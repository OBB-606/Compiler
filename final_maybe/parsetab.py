
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND BEGIN BREAK CALL CLOSE_PAREN COLON COMMA CONTINUE DIVISION ELSE END EQUAL FLOAT_DIGIT FLOAT_TYPE FUNCTION IF INTEGER_TYPE INT_DIGIT LESS LESS_EQUAL LOGIC_EQUAL MINUS MORE_ MORE_EQUAL MULTIPLY NAME_FUNCTION NEGATION NEGEQ OPEN_PAREN OR PRINT_ SEMI_COLON SUM VAR VARIABLE WHILE_program : blockblock : vars_ beginstmtvars_ : VAR variables COLON types SEMI_COLON\n             | variables : VARIABLE COMMA VARIABLE\n                 | VARIABLE types : INTEGER_TYPE\n             | FLOAT_TYPEstatement : assign\n                 | call\n                 | print_\n                 | if_\n                 | while_\n                 | break_cont\n                 | function\n                 | vars_\n                 assign : VARIABLE EQUAL expressioncall : CALL NAME_FUNCTION OPEN_PAREN variables CLOSE_PARENprint_ : PRINT_ OPEN_PAREN args_print CLOSE_PARENargs_print : variablesfunction : FUNCTION NAME_FUNCTION OPEN_PAREN variables CLOSE_PAREN beginstmtbeginstmt : BEGIN statement SEMI_COLON END\n                 | beginstmt BEGIN statement SEMI_COLON ENDif_ : IF OPEN_PAREN condition CLOSE_PAREN beginstmt\n           | IF OPEN_PAREN condition CLOSE_PAREN beginstmt ELSE beginstmtwhile_ : WHILE_ OPEN_PAREN condition CLOSE_PAREN beginstmtbreak_cont : BREAK\n                  | CONTINUEcondition : expression compare_operators expression\n                 | OPEN_PAREN expression CLOSE_PAREN compare_operators OPEN_PAREN expression CLOSE_PARENand_or : AND\n              | ORcompare_operators : NEGEQ\n                         | LOGIC_EQUAL\n                         | LESS\n                         | MORE_\n                         | LESS_EQUAL\n                         | MORE_EQUAL\n                         expression : term SUM term\n                  | term MINUS term\n                  |term : factor\n            | factor MULTIPLY factor\n            | factor DIVISION factorfactor : VARIABLE\n              | digit\n              | OPEN_PAREN expression CLOSE_PARENdigit : INT_DIGIT\n             | FLOAT_DIGIT'
    
_lr_action_items = {'VAR':([0,6,9,],[4,4,4,]),'BEGIN':([0,3,5,42,59,60,69,77,86,88,89,91,92,94,],[-4,6,9,-22,-3,-23,6,6,9,9,6,6,9,9,]),'$end':([1,2,5,42,60,],[0,-1,-2,-22,-23,]),'VARIABLE':([4,6,9,28,31,33,34,35,48,51,54,58,61,62,63,64,70,71,72,73,74,75,76,93,],[8,19,19,40,43,8,43,43,43,8,43,8,43,43,43,43,43,-33,-34,-35,-36,-37,-38,43,]),'CALL':([6,9,],[20,20,]),'PRINT_':([6,9,],[21,21,]),'IF':([6,9,],[22,22,]),'WHILE_':([6,9,],[23,23,]),'BREAK':([6,9,],[24,24,]),'CONTINUE':([6,9,],[25,25,]),'FUNCTION':([6,9,],[26,26,]),'SEMI_COLON':([6,9,10,11,12,13,14,15,16,17,18,24,25,29,31,37,38,39,42,43,44,46,47,49,50,59,60,67,79,80,81,82,83,84,86,88,92,94,],[-4,-4,30,-9,-10,-11,-12,-13,-14,-15,-16,-27,-28,41,-41,59,-7,-8,-22,-45,-17,-42,-46,-48,-49,-3,-23,-19,-39,-40,-43,-44,-47,-18,-24,-26,-21,-25,]),'COLON':([7,8,40,],[27,-6,-5,]),'COMMA':([8,],[28,]),'CLOSE_PAREN':([8,40,43,46,47,48,49,50,52,53,54,55,57,65,66,68,70,71,72,73,74,75,76,78,79,80,81,82,83,87,93,95,96,],[-6,-5,-45,-42,-46,-41,-48,-49,67,-20,-41,69,77,83,84,85,-41,-33,-34,-35,-36,-37,-38,89,-39,-40,-43,-44,-47,-29,-41,96,-30,]),'EQUAL':([19,],[31,]),'NAME_FUNCTION':([20,26,],[32,36,]),'OPEN_PAREN':([21,22,23,31,32,34,35,36,48,54,61,62,63,64,70,71,72,73,74,75,76,90,93,],[33,34,35,48,51,54,54,58,48,48,48,48,48,48,48,-33,-34,-35,-36,-37,-38,93,48,]),'INTEGER_TYPE':([27,],[38,]),'FLOAT_TYPE':([27,],[39,]),'END':([30,41,],[42,60,]),'INT_DIGIT':([31,34,35,48,54,61,62,63,64,70,71,72,73,74,75,76,93,],[49,49,49,49,49,49,49,49,49,49,-33,-34,-35,-36,-37,-38,49,]),'FLOAT_DIGIT':([31,34,35,48,54,61,62,63,64,70,71,72,73,74,75,76,93,],[50,50,50,50,50,50,50,50,50,50,-33,-34,-35,-36,-37,-38,50,]),'NEGEQ':([34,35,43,46,47,49,50,56,79,80,81,82,83,85,],[-41,-41,-45,-42,-46,-48,-49,71,-39,-40,-43,-44,-47,71,]),'LOGIC_EQUAL':([34,35,43,46,47,49,50,56,79,80,81,82,83,85,],[-41,-41,-45,-42,-46,-48,-49,72,-39,-40,-43,-44,-47,72,]),'LESS':([34,35,43,46,47,49,50,56,79,80,81,82,83,85,],[-41,-41,-45,-42,-46,-48,-49,73,-39,-40,-43,-44,-47,73,]),'MORE_':([34,35,43,46,47,49,50,56,79,80,81,82,83,85,],[-41,-41,-45,-42,-46,-48,-49,74,-39,-40,-43,-44,-47,74,]),'LESS_EQUAL':([34,35,43,46,47,49,50,56,79,80,81,82,83,85,],[-41,-41,-45,-42,-46,-48,-49,75,-39,-40,-43,-44,-47,75,]),'MORE_EQUAL':([34,35,43,46,47,49,50,56,79,80,81,82,83,85,],[-41,-41,-45,-42,-46,-48,-49,76,-39,-40,-43,-44,-47,76,]),'ELSE':([42,60,86,],[-22,-23,91,]),'MULTIPLY':([43,46,47,49,50,83,85,],[-45,63,-46,-48,-49,-47,-47,]),'DIVISION':([43,46,47,49,50,83,85,],[-45,64,-46,-48,-49,-47,-47,]),'SUM':([43,45,46,47,49,50,81,82,83,85,],[-45,61,-42,-46,-48,-49,-43,-44,-47,-47,]),'MINUS':([43,45,46,47,49,50,81,82,83,85,],[-45,62,-42,-46,-48,-49,-43,-44,-47,-47,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'block':([0,],[2,]),'vars_':([0,6,9,],[3,18,18,]),'beginstmt':([3,69,77,89,91,],[5,86,88,92,94,]),'variables':([4,33,51,58,],[7,53,66,78,]),'statement':([6,9,],[10,29,]),'assign':([6,9,],[11,11,]),'call':([6,9,],[12,12,]),'print_':([6,9,],[13,13,]),'if_':([6,9,],[14,14,]),'while_':([6,9,],[15,15,]),'break_cont':([6,9,],[16,16,]),'function':([6,9,],[17,17,]),'types':([27,],[37,]),'expression':([31,34,35,48,54,70,93,],[44,56,56,65,68,87,95,]),'term':([31,34,35,48,54,61,62,70,93,],[45,45,45,45,45,79,80,45,45,]),'factor':([31,34,35,48,54,61,62,63,64,70,93,],[46,46,46,46,46,46,46,81,82,46,46,]),'digit':([31,34,35,48,54,61,62,63,64,70,93,],[47,47,47,47,47,47,47,47,47,47,47,]),'args_print':([33,],[52,]),'condition':([34,35,],[55,57,]),'compare_operators':([56,85,],[70,90,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> block','program',1,'p_program','parser.py',25),
  ('block -> vars_ beginstmt','block',2,'p_block','parser.py',28),
  ('vars_ -> VAR variables COLON types SEMI_COLON','vars_',5,'p_vars_','parser.py',30),
  ('vars_ -> <empty>','vars_',0,'p_vars_','parser.py',31),
  ('variables -> VARIABLE COMMA VARIABLE','variables',3,'p_variables','parser.py',34),
  ('variables -> VARIABLE','variables',1,'p_variables','parser.py',35),
  ('types -> INTEGER_TYPE','types',1,'p_types','parser.py',38),
  ('types -> FLOAT_TYPE','types',1,'p_types','parser.py',39),
  ('statement -> assign','statement',1,'p_statement','parser.py',42),
  ('statement -> call','statement',1,'p_statement','parser.py',43),
  ('statement -> print_','statement',1,'p_statement','parser.py',44),
  ('statement -> if_','statement',1,'p_statement','parser.py',45),
  ('statement -> while_','statement',1,'p_statement','parser.py',46),
  ('statement -> break_cont','statement',1,'p_statement','parser.py',47),
  ('statement -> function','statement',1,'p_statement','parser.py',48),
  ('statement -> vars_','statement',1,'p_statement','parser.py',49),
  ('assign -> VARIABLE EQUAL expression','assign',3,'p_assign','parser.py',53),
  ('call -> CALL NAME_FUNCTION OPEN_PAREN variables CLOSE_PAREN','call',5,'p_call','parser.py',56),
  ('print_ -> PRINT_ OPEN_PAREN args_print CLOSE_PAREN','print_',4,'p_print_','parser.py',59),
  ('args_print -> variables','args_print',1,'p_args_print','parser.py',62),
  ('function -> FUNCTION NAME_FUNCTION OPEN_PAREN variables CLOSE_PAREN beginstmt','function',6,'p_function','parser.py',65),
  ('beginstmt -> BEGIN statement SEMI_COLON END','beginstmt',4,'p_beginstmt','parser.py',71),
  ('beginstmt -> beginstmt BEGIN statement SEMI_COLON END','beginstmt',5,'p_beginstmt','parser.py',72),
  ('if_ -> IF OPEN_PAREN condition CLOSE_PAREN beginstmt','if_',5,'p_if_','parser.py',75),
  ('if_ -> IF OPEN_PAREN condition CLOSE_PAREN beginstmt ELSE beginstmt','if_',7,'p_if_','parser.py',76),
  ('while_ -> WHILE_ OPEN_PAREN condition CLOSE_PAREN beginstmt','while_',5,'p_while_','parser.py',79),
  ('break_cont -> BREAK','break_cont',1,'p_break_cont','parser.py',82),
  ('break_cont -> CONTINUE','break_cont',1,'p_break_cont','parser.py',83),
  ('condition -> expression compare_operators expression','condition',3,'p_condition','parser.py',86),
  ('condition -> OPEN_PAREN expression CLOSE_PAREN compare_operators OPEN_PAREN expression CLOSE_PAREN','condition',7,'p_condition','parser.py',87),
  ('and_or -> AND','and_or',1,'p_and_or','parser.py',90),
  ('and_or -> OR','and_or',1,'p_and_or','parser.py',91),
  ('compare_operators -> NEGEQ','compare_operators',1,'p_compare_operators','parser.py',94),
  ('compare_operators -> LOGIC_EQUAL','compare_operators',1,'p_compare_operators','parser.py',95),
  ('compare_operators -> LESS','compare_operators',1,'p_compare_operators','parser.py',96),
  ('compare_operators -> MORE_','compare_operators',1,'p_compare_operators','parser.py',97),
  ('compare_operators -> LESS_EQUAL','compare_operators',1,'p_compare_operators','parser.py',98),
  ('compare_operators -> MORE_EQUAL','compare_operators',1,'p_compare_operators','parser.py',99),
  ('expression -> term SUM term','expression',3,'p_expression','parser.py',103),
  ('expression -> term MINUS term','expression',3,'p_expression','parser.py',104),
  ('expression -> <empty>','expression',0,'p_expression','parser.py',105),
  ('term -> factor','term',1,'p_term','parser.py',108),
  ('term -> factor MULTIPLY factor','term',3,'p_term','parser.py',109),
  ('term -> factor DIVISION factor','term',3,'p_term','parser.py',110),
  ('factor -> VARIABLE','factor',1,'p_factor','parser.py',113),
  ('factor -> digit','factor',1,'p_factor','parser.py',114),
  ('factor -> OPEN_PAREN expression CLOSE_PAREN','factor',3,'p_factor','parser.py',115),
  ('digit -> INT_DIGIT','digit',1,'p_digit','parser.py',118),
  ('digit -> FLOAT_DIGIT','digit',1,'p_digit','parser.py',119),
]
