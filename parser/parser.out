Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> <empty>
Rule 2     program -> block colons body
Rule 3     block -> <empty>
Rule 4     block -> vars
Rule 5     vars -> <empty>
Rule 6     vars -> VAR vars variables colons types colons
Rule 7     types -> <empty>
Rule 8     types -> INTEGER_TYPE
Rule 9     types -> FLOAT_TYPE
Rule 10    colons -> <empty>
Rule 11    colons -> COLON
Rule 12    colons -> SEMI_COLON
Rule 13    variables -> <empty>
Rule 14    variables -> VARIABLE
Rule 15    variables -> VARIABLE COMMA variables
Rule 16    variables -> OPEN_PAREN variables CLOSE_PAREN
Rule 17    body -> <empty>
Rule 18    body -> BEGIN body lines colons END
Rule 19    body -> lines colons
Rule 20    lines -> <empty>
Rule 21    lines -> function
Rule 22    lines -> cycle
Rule 23    lines -> assign
Rule 24    lines -> expression
Rule 25    lines -> print
Rule 26    lines -> if
Rule 27    lines -> call
Rule 28    assign -> <empty>
Rule 29    assign -> variables EQUAL expression
Rule 30    call -> <empty>
Rule 31    call -> CALL NAME_FUNCTION variables
Rule 32    function -> <empty>
Rule 33    function -> FUNCTION NAME_FUNCTION variables body
Rule 34    cycle -> <empty>
Rule 35    cycle -> CYCLE condition body
Rule 36    if -> <empty>
Rule 37    if -> IF condition body else body
Rule 38    else -> <empty>
Rule 39    else -> ELSE
Rule 40    condition -> <empty>
Rule 41    condition -> expression comparison expression
Rule 42    condition -> OPEN_PAREN condition CLOSE_PAREN logic_op
Rule 43    logic_op -> <empty>
Rule 44    logic_op -> AND
Rule 45    logic_op -> OR
Rule 46    logic_op -> NEGATION
Rule 47    comparison -> <empty>
Rule 48    comparison -> MORE
Rule 49    comparison -> LESS
Rule 50    comparison -> LOGIC_EQUAL
Rule 51    print -> <empty>
Rule 52    print -> PRINT expression
Rule 53    expression -> <empty>
Rule 54    expression -> term SUM term
Rule 55    expression -> term MINUS term
Rule 56    expression -> CONTINUE
Rule 57    expression -> BREAK
Rule 58    term -> <empty>
Rule 59    term -> factor MULTIPLY factor
Rule 60    term -> factor DIVISION factor
Rule 61    factor -> <empty>
Rule 62    factor -> VARIABLE
Rule 63    factor -> FLOAT_DIGIT
Rule 64    factor -> INT_DIGIT
Rule 65    factor -> OPEN_PAREN expression CLOSE_PAREN

Terminals, with rules where they appear

AND                  : 44
BEGIN                : 18
BREAK                : 57
CALL                 : 31
CLOSE_PAREN          : 16 42 65
COLON                : 11
COMMA                : 15
CONTINUE             : 56
CYCLE                : 35
DIVISION             : 60
ELSE                 : 39
END                  : 18
EQUAL                : 29
FLOAT_DIGIT          : 63
FLOAT_TYPE           : 9
FUNCTION             : 33
IF                   : 37
INTEGER_TYPE         : 8
INT_DIGIT            : 64
LESS                 : 49
LOGIC_EQUAL          : 50
MINUS                : 55
MORE                 : 48
MULTIPLY             : 59
NAME_FUNCTION        : 31 33
NEGATION             : 46
OPEN_PAREN           : 16 42 65
OR                   : 45
PRINT                : 52
SEMI_COLON           : 12
SUM                  : 54
VAR                  : 6
VARIABLE             : 14 15 62
error                : 

Nonterminals, with rules where they appear

assign               : 23
block                : 2
body                 : 2 18 33 35 37 37
call                 : 27
colons               : 2 6 6 18 19
comparison           : 41
condition            : 35 37 42
cycle                : 22
else                 : 37
expression           : 24 29 41 41 52 65
factor               : 59 59 60 60
function             : 21
if                   : 26
lines                : 18 19
logic_op             : 42
print                : 25
program              : 0
term                 : 54 54 55 55
types                : 6
variables            : 6 15 16 29 31 33
vars                 : 4 6

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> .
    (2) program -> . block colons body
    (3) block -> .
    (4) block -> . vars
    (5) vars -> .
    (6) vars -> . VAR vars variables colons types colons

  ! reduce/reduce conflict for $end resolved using rule 1 (program -> .)
  ! reduce/reduce conflict for COLON resolved using rule 3 (block -> .)
  ! reduce/reduce conflict for SEMI_COLON resolved using rule 3 (block -> .)
  ! reduce/reduce conflict for BEGIN resolved using rule 3 (block -> .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 3 (block -> .)
  ! reduce/reduce conflict for CYCLE resolved using rule 3 (block -> .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 3 (block -> .)
  ! reduce/reduce conflict for BREAK resolved using rule 3 (block -> .)
  ! reduce/reduce conflict for PRINT resolved using rule 3 (block -> .)
  ! reduce/reduce conflict for IF resolved using rule 3 (block -> .)
  ! reduce/reduce conflict for CALL resolved using rule 3 (block -> .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 3 (block -> .)
  ! reduce/reduce conflict for OPEN_PAREN resolved using rule 3 (block -> .)
  ! reduce/reduce conflict for FLOAT_DIGIT resolved using rule 3 (block -> .)
  ! reduce/reduce conflict for INT_DIGIT resolved using rule 3 (block -> .)
  ! reduce/reduce conflict for EQUAL resolved using rule 3 (block -> .)
  ! reduce/reduce conflict for SUM resolved using rule 3 (block -> .)
  ! reduce/reduce conflict for MINUS resolved using rule 3 (block -> .)
  ! reduce/reduce conflict for MULTIPLY resolved using rule 3 (block -> .)
  ! reduce/reduce conflict for DIVISION resolved using rule 3 (block -> .)
  ! reduce/reduce conflict for $end resolved using rule 1 (program -> .)
    $end            reduce using rule 1 (program -> .)
    COLON           reduce using rule 3 (block -> .)
    SEMI_COLON      reduce using rule 3 (block -> .)
    BEGIN           reduce using rule 3 (block -> .)
    FUNCTION        reduce using rule 3 (block -> .)
    CYCLE           reduce using rule 3 (block -> .)
    CONTINUE        reduce using rule 3 (block -> .)
    BREAK           reduce using rule 3 (block -> .)
    PRINT           reduce using rule 3 (block -> .)
    IF              reduce using rule 3 (block -> .)
    CALL            reduce using rule 3 (block -> .)
    VARIABLE        reduce using rule 3 (block -> .)
    OPEN_PAREN      reduce using rule 3 (block -> .)
    FLOAT_DIGIT     reduce using rule 3 (block -> .)
    INT_DIGIT       reduce using rule 3 (block -> .)
    EQUAL           reduce using rule 3 (block -> .)
    SUM             reduce using rule 3 (block -> .)
    MINUS           reduce using rule 3 (block -> .)
    MULTIPLY        reduce using rule 3 (block -> .)
    DIVISION        reduce using rule 3 (block -> .)
    VAR             shift and go to state 4

  ! $end            [ reduce using rule 3 (block -> .) ]
  ! COLON           [ reduce using rule 5 (vars -> .) ]
  ! SEMI_COLON      [ reduce using rule 5 (vars -> .) ]
  ! BEGIN           [ reduce using rule 5 (vars -> .) ]
  ! FUNCTION        [ reduce using rule 5 (vars -> .) ]
  ! CYCLE           [ reduce using rule 5 (vars -> .) ]
  ! CONTINUE        [ reduce using rule 5 (vars -> .) ]
  ! BREAK           [ reduce using rule 5 (vars -> .) ]
  ! PRINT           [ reduce using rule 5 (vars -> .) ]
  ! IF              [ reduce using rule 5 (vars -> .) ]
  ! CALL            [ reduce using rule 5 (vars -> .) ]
  ! VARIABLE        [ reduce using rule 5 (vars -> .) ]
  ! OPEN_PAREN      [ reduce using rule 5 (vars -> .) ]
  ! FLOAT_DIGIT     [ reduce using rule 5 (vars -> .) ]
  ! INT_DIGIT       [ reduce using rule 5 (vars -> .) ]
  ! EQUAL           [ reduce using rule 5 (vars -> .) ]
  ! SUM             [ reduce using rule 5 (vars -> .) ]
  ! MINUS           [ reduce using rule 5 (vars -> .) ]
  ! MULTIPLY        [ reduce using rule 5 (vars -> .) ]
  ! DIVISION        [ reduce using rule 5 (vars -> .) ]
  ! $end            [ reduce using rule 5 (vars -> .) ]

    program                        shift and go to state 1
    block                          shift and go to state 2
    vars                           shift and go to state 3

state 1

    (0) S' -> program .



state 2

    (2) program -> block . colons body
    (10) colons -> .
    (11) colons -> . COLON
    (12) colons -> . SEMI_COLON

  ! shift/reduce conflict for COLON resolved as shift
  ! shift/reduce conflict for SEMI_COLON resolved as shift
    BEGIN           reduce using rule 10 (colons -> .)
    FUNCTION        reduce using rule 10 (colons -> .)
    CYCLE           reduce using rule 10 (colons -> .)
    CONTINUE        reduce using rule 10 (colons -> .)
    BREAK           reduce using rule 10 (colons -> .)
    PRINT           reduce using rule 10 (colons -> .)
    IF              reduce using rule 10 (colons -> .)
    CALL            reduce using rule 10 (colons -> .)
    VARIABLE        reduce using rule 10 (colons -> .)
    OPEN_PAREN      reduce using rule 10 (colons -> .)
    FLOAT_DIGIT     reduce using rule 10 (colons -> .)
    INT_DIGIT       reduce using rule 10 (colons -> .)
    EQUAL           reduce using rule 10 (colons -> .)
    SUM             reduce using rule 10 (colons -> .)
    MINUS           reduce using rule 10 (colons -> .)
    MULTIPLY        reduce using rule 10 (colons -> .)
    DIVISION        reduce using rule 10 (colons -> .)
    $end            reduce using rule 10 (colons -> .)
    COLON           shift and go to state 6
    SEMI_COLON      shift and go to state 7

  ! COLON           [ reduce using rule 10 (colons -> .) ]
  ! SEMI_COLON      [ reduce using rule 10 (colons -> .) ]

    colons                         shift and go to state 5

state 3

    (4) block -> vars .

    COLON           reduce using rule 4 (block -> vars .)
    SEMI_COLON      reduce using rule 4 (block -> vars .)
    BEGIN           reduce using rule 4 (block -> vars .)
    FUNCTION        reduce using rule 4 (block -> vars .)
    CYCLE           reduce using rule 4 (block -> vars .)
    CONTINUE        reduce using rule 4 (block -> vars .)
    BREAK           reduce using rule 4 (block -> vars .)
    PRINT           reduce using rule 4 (block -> vars .)
    IF              reduce using rule 4 (block -> vars .)
    CALL            reduce using rule 4 (block -> vars .)
    VARIABLE        reduce using rule 4 (block -> vars .)
    OPEN_PAREN      reduce using rule 4 (block -> vars .)
    FLOAT_DIGIT     reduce using rule 4 (block -> vars .)
    INT_DIGIT       reduce using rule 4 (block -> vars .)
    EQUAL           reduce using rule 4 (block -> vars .)
    SUM             reduce using rule 4 (block -> vars .)
    MINUS           reduce using rule 4 (block -> vars .)
    MULTIPLY        reduce using rule 4 (block -> vars .)
    DIVISION        reduce using rule 4 (block -> vars .)
    $end            reduce using rule 4 (block -> vars .)


state 4

    (6) vars -> VAR . vars variables colons types colons
    (5) vars -> .
    (6) vars -> . VAR vars variables colons types colons

    VARIABLE        reduce using rule 5 (vars -> .)
    OPEN_PAREN      reduce using rule 5 (vars -> .)
    COLON           reduce using rule 5 (vars -> .)
    SEMI_COLON      reduce using rule 5 (vars -> .)
    INTEGER_TYPE    reduce using rule 5 (vars -> .)
    FLOAT_TYPE      reduce using rule 5 (vars -> .)
    BEGIN           reduce using rule 5 (vars -> .)
    FUNCTION        reduce using rule 5 (vars -> .)
    CYCLE           reduce using rule 5 (vars -> .)
    CONTINUE        reduce using rule 5 (vars -> .)
    BREAK           reduce using rule 5 (vars -> .)
    PRINT           reduce using rule 5 (vars -> .)
    IF              reduce using rule 5 (vars -> .)
    CALL            reduce using rule 5 (vars -> .)
    FLOAT_DIGIT     reduce using rule 5 (vars -> .)
    INT_DIGIT       reduce using rule 5 (vars -> .)
    EQUAL           reduce using rule 5 (vars -> .)
    SUM             reduce using rule 5 (vars -> .)
    MINUS           reduce using rule 5 (vars -> .)
    MULTIPLY        reduce using rule 5 (vars -> .)
    DIVISION        reduce using rule 5 (vars -> .)
    $end            reduce using rule 5 (vars -> .)
    VAR             shift and go to state 4

    vars                           shift and go to state 8

state 5

    (2) program -> block colons . body
    (17) body -> .
    (18) body -> . BEGIN body lines colons END
    (19) body -> . lines colons
    (20) lines -> .
    (21) lines -> . function
    (22) lines -> . cycle
    (23) lines -> . assign
    (24) lines -> . expression
    (25) lines -> . print
    (26) lines -> . if
    (27) lines -> . call
    (32) function -> .
    (33) function -> . FUNCTION NAME_FUNCTION variables body
    (34) cycle -> .
    (35) cycle -> . CYCLE condition body
    (28) assign -> .
    (29) assign -> . variables EQUAL expression
    (53) expression -> .
    (54) expression -> . term SUM term
    (55) expression -> . term MINUS term
    (56) expression -> . CONTINUE
    (57) expression -> . BREAK
    (51) print -> .
    (52) print -> . PRINT expression
    (36) if -> .
    (37) if -> . IF condition body else body
    (30) call -> .
    (31) call -> . CALL NAME_FUNCTION variables
    (13) variables -> .
    (14) variables -> . VARIABLE
    (15) variables -> . VARIABLE COMMA variables
    (16) variables -> . OPEN_PAREN variables CLOSE_PAREN
    (58) term -> .
    (59) term -> . factor MULTIPLY factor
    (60) term -> . factor DIVISION factor
    (61) factor -> .
    (62) factor -> . VARIABLE
    (63) factor -> . FLOAT_DIGIT
    (64) factor -> . INT_DIGIT
    (65) factor -> . OPEN_PAREN expression CLOSE_PAREN

  ! reduce/reduce conflict for $end resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for COLON resolved using rule 20 (lines -> .)
  ! reduce/reduce conflict for SEMI_COLON resolved using rule 20 (lines -> .)
  ! reduce/reduce conflict for $end resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for COLON resolved using rule 20 (lines -> .)
  ! reduce/reduce conflict for SEMI_COLON resolved using rule 20 (lines -> .)
  ! reduce/reduce conflict for $end resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for COLON resolved using rule 20 (lines -> .)
  ! reduce/reduce conflict for SEMI_COLON resolved using rule 20 (lines -> .)
  ! reduce/reduce conflict for $end resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for COLON resolved using rule 20 (lines -> .)
  ! reduce/reduce conflict for SEMI_COLON resolved using rule 20 (lines -> .)
  ! reduce/reduce conflict for $end resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for COLON resolved using rule 20 (lines -> .)
  ! reduce/reduce conflict for SEMI_COLON resolved using rule 20 (lines -> .)
  ! reduce/reduce conflict for $end resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for COLON resolved using rule 20 (lines -> .)
  ! reduce/reduce conflict for SEMI_COLON resolved using rule 20 (lines -> .)
  ! reduce/reduce conflict for $end resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for COLON resolved using rule 20 (lines -> .)
  ! reduce/reduce conflict for SEMI_COLON resolved using rule 20 (lines -> .)
  ! reduce/reduce conflict for $end resolved using rule 17 (body -> .)
    $end            reduce using rule 17 (body -> .)
    BEGIN           shift and go to state 10
    COLON           reduce using rule 20 (lines -> .)
    SEMI_COLON      reduce using rule 20 (lines -> .)
    FUNCTION        shift and go to state 19
    CYCLE           shift and go to state 21
    CONTINUE        shift and go to state 23
    BREAK           shift and go to state 24
    PRINT           shift and go to state 25
    IF              shift and go to state 26
    CALL            shift and go to state 27
    EQUAL           reduce using rule 13 (variables -> .)
    VARIABLE        shift and go to state 28
    OPEN_PAREN      shift and go to state 29
    SUM             reduce using rule 58 (term -> .)
    MINUS           reduce using rule 58 (term -> .)
    MULTIPLY        reduce using rule 61 (factor -> .)
    DIVISION        reduce using rule 61 (factor -> .)
    FLOAT_DIGIT     shift and go to state 31
    INT_DIGIT       shift and go to state 32

  ! $end            [ reduce using rule 20 (lines -> .) ]
  ! COLON           [ reduce using rule 32 (function -> .) ]
  ! SEMI_COLON      [ reduce using rule 32 (function -> .) ]
  ! $end            [ reduce using rule 32 (function -> .) ]
  ! COLON           [ reduce using rule 34 (cycle -> .) ]
  ! SEMI_COLON      [ reduce using rule 34 (cycle -> .) ]
  ! $end            [ reduce using rule 34 (cycle -> .) ]
  ! COLON           [ reduce using rule 28 (assign -> .) ]
  ! SEMI_COLON      [ reduce using rule 28 (assign -> .) ]
  ! $end            [ reduce using rule 28 (assign -> .) ]
  ! COLON           [ reduce using rule 53 (expression -> .) ]
  ! SEMI_COLON      [ reduce using rule 53 (expression -> .) ]
  ! $end            [ reduce using rule 53 (expression -> .) ]
  ! COLON           [ reduce using rule 51 (print -> .) ]
  ! SEMI_COLON      [ reduce using rule 51 (print -> .) ]
  ! $end            [ reduce using rule 51 (print -> .) ]
  ! COLON           [ reduce using rule 36 (if -> .) ]
  ! SEMI_COLON      [ reduce using rule 36 (if -> .) ]
  ! $end            [ reduce using rule 36 (if -> .) ]
  ! COLON           [ reduce using rule 30 (call -> .) ]
  ! SEMI_COLON      [ reduce using rule 30 (call -> .) ]
  ! $end            [ reduce using rule 30 (call -> .) ]

    body                           shift and go to state 9
    lines                          shift and go to state 11
    function                       shift and go to state 12
    cycle                          shift and go to state 13
    assign                         shift and go to state 14
    expression                     shift and go to state 15
    print                          shift and go to state 16
    if                             shift and go to state 17
    call                           shift and go to state 18
    variables                      shift and go to state 20
    term                           shift and go to state 22
    factor                         shift and go to state 30

state 6

    (11) colons -> COLON .

    BEGIN           reduce using rule 11 (colons -> COLON .)
    FUNCTION        reduce using rule 11 (colons -> COLON .)
    CYCLE           reduce using rule 11 (colons -> COLON .)
    CONTINUE        reduce using rule 11 (colons -> COLON .)
    BREAK           reduce using rule 11 (colons -> COLON .)
    PRINT           reduce using rule 11 (colons -> COLON .)
    IF              reduce using rule 11 (colons -> COLON .)
    CALL            reduce using rule 11 (colons -> COLON .)
    VARIABLE        reduce using rule 11 (colons -> COLON .)
    OPEN_PAREN      reduce using rule 11 (colons -> COLON .)
    FLOAT_DIGIT     reduce using rule 11 (colons -> COLON .)
    INT_DIGIT       reduce using rule 11 (colons -> COLON .)
    COLON           reduce using rule 11 (colons -> COLON .)
    SEMI_COLON      reduce using rule 11 (colons -> COLON .)
    EQUAL           reduce using rule 11 (colons -> COLON .)
    SUM             reduce using rule 11 (colons -> COLON .)
    MINUS           reduce using rule 11 (colons -> COLON .)
    MULTIPLY        reduce using rule 11 (colons -> COLON .)
    DIVISION        reduce using rule 11 (colons -> COLON .)
    $end            reduce using rule 11 (colons -> COLON .)
    END             reduce using rule 11 (colons -> COLON .)
    ELSE            reduce using rule 11 (colons -> COLON .)
    INTEGER_TYPE    reduce using rule 11 (colons -> COLON .)
    FLOAT_TYPE      reduce using rule 11 (colons -> COLON .)


state 7

    (12) colons -> SEMI_COLON .

    BEGIN           reduce using rule 12 (colons -> SEMI_COLON .)
    FUNCTION        reduce using rule 12 (colons -> SEMI_COLON .)
    CYCLE           reduce using rule 12 (colons -> SEMI_COLON .)
    CONTINUE        reduce using rule 12 (colons -> SEMI_COLON .)
    BREAK           reduce using rule 12 (colons -> SEMI_COLON .)
    PRINT           reduce using rule 12 (colons -> SEMI_COLON .)
    IF              reduce using rule 12 (colons -> SEMI_COLON .)
    CALL            reduce using rule 12 (colons -> SEMI_COLON .)
    VARIABLE        reduce using rule 12 (colons -> SEMI_COLON .)
    OPEN_PAREN      reduce using rule 12 (colons -> SEMI_COLON .)
    FLOAT_DIGIT     reduce using rule 12 (colons -> SEMI_COLON .)
    INT_DIGIT       reduce using rule 12 (colons -> SEMI_COLON .)
    COLON           reduce using rule 12 (colons -> SEMI_COLON .)
    SEMI_COLON      reduce using rule 12 (colons -> SEMI_COLON .)
    EQUAL           reduce using rule 12 (colons -> SEMI_COLON .)
    SUM             reduce using rule 12 (colons -> SEMI_COLON .)
    MINUS           reduce using rule 12 (colons -> SEMI_COLON .)
    MULTIPLY        reduce using rule 12 (colons -> SEMI_COLON .)
    DIVISION        reduce using rule 12 (colons -> SEMI_COLON .)
    $end            reduce using rule 12 (colons -> SEMI_COLON .)
    END             reduce using rule 12 (colons -> SEMI_COLON .)
    ELSE            reduce using rule 12 (colons -> SEMI_COLON .)
    INTEGER_TYPE    reduce using rule 12 (colons -> SEMI_COLON .)
    FLOAT_TYPE      reduce using rule 12 (colons -> SEMI_COLON .)


state 8

    (6) vars -> VAR vars . variables colons types colons
    (13) variables -> .
    (14) variables -> . VARIABLE
    (15) variables -> . VARIABLE COMMA variables
    (16) variables -> . OPEN_PAREN variables CLOSE_PAREN

  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for OPEN_PAREN resolved as shift
    COLON           reduce using rule 13 (variables -> .)
    SEMI_COLON      reduce using rule 13 (variables -> .)
    INTEGER_TYPE    reduce using rule 13 (variables -> .)
    FLOAT_TYPE      reduce using rule 13 (variables -> .)
    BEGIN           reduce using rule 13 (variables -> .)
    FUNCTION        reduce using rule 13 (variables -> .)
    CYCLE           reduce using rule 13 (variables -> .)
    CONTINUE        reduce using rule 13 (variables -> .)
    BREAK           reduce using rule 13 (variables -> .)
    PRINT           reduce using rule 13 (variables -> .)
    IF              reduce using rule 13 (variables -> .)
    CALL            reduce using rule 13 (variables -> .)
    FLOAT_DIGIT     reduce using rule 13 (variables -> .)
    INT_DIGIT       reduce using rule 13 (variables -> .)
    EQUAL           reduce using rule 13 (variables -> .)
    SUM             reduce using rule 13 (variables -> .)
    MINUS           reduce using rule 13 (variables -> .)
    MULTIPLY        reduce using rule 13 (variables -> .)
    DIVISION        reduce using rule 13 (variables -> .)
    $end            reduce using rule 13 (variables -> .)
    VARIABLE        shift and go to state 34
    OPEN_PAREN      shift and go to state 35

  ! VARIABLE        [ reduce using rule 13 (variables -> .) ]
  ! OPEN_PAREN      [ reduce using rule 13 (variables -> .) ]

    variables                      shift and go to state 33

state 9

    (2) program -> block colons body .

    $end            reduce using rule 2 (program -> block colons body .)


state 10

    (18) body -> BEGIN . body lines colons END
    (17) body -> .
    (18) body -> . BEGIN body lines colons END
    (19) body -> . lines colons
    (20) lines -> .
    (21) lines -> . function
    (22) lines -> . cycle
    (23) lines -> . assign
    (24) lines -> . expression
    (25) lines -> . print
    (26) lines -> . if
    (27) lines -> . call
    (32) function -> .
    (33) function -> . FUNCTION NAME_FUNCTION variables body
    (34) cycle -> .
    (35) cycle -> . CYCLE condition body
    (28) assign -> .
    (29) assign -> . variables EQUAL expression
    (53) expression -> .
    (54) expression -> . term SUM term
    (55) expression -> . term MINUS term
    (56) expression -> . CONTINUE
    (57) expression -> . BREAK
    (51) print -> .
    (52) print -> . PRINT expression
    (36) if -> .
    (37) if -> . IF condition body else body
    (30) call -> .
    (31) call -> . CALL NAME_FUNCTION variables
    (13) variables -> .
    (14) variables -> . VARIABLE
    (15) variables -> . VARIABLE COMMA variables
    (16) variables -> . OPEN_PAREN variables CLOSE_PAREN
    (58) term -> .
    (59) term -> . factor MULTIPLY factor
    (60) term -> . factor DIVISION factor
    (61) factor -> .
    (62) factor -> . VARIABLE
    (63) factor -> . FLOAT_DIGIT
    (64) factor -> . INT_DIGIT
    (65) factor -> . OPEN_PAREN expression CLOSE_PAREN

  ! reduce/reduce conflict for COLON resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for SEMI_COLON resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for CYCLE resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for BREAK resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for PRINT resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for IF resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for CALL resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for OPEN_PAREN resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for FLOAT_DIGIT resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for INT_DIGIT resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for END resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for EQUAL resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for SUM resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for MINUS resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for MULTIPLY resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for DIVISION resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for COLON resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for SEMI_COLON resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for CYCLE resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for BREAK resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for PRINT resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for IF resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for CALL resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for OPEN_PAREN resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for FLOAT_DIGIT resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for INT_DIGIT resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for END resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for EQUAL resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for SUM resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for MINUS resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for MULTIPLY resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for DIVISION resolved using rule 17 (body -> .)
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! reduce/reduce conflict for COLON resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for SEMI_COLON resolved using rule 17 (body -> .)
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! reduce/reduce conflict for CYCLE resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for BREAK resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for PRINT resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for IF resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for CALL resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for OPEN_PAREN resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for FLOAT_DIGIT resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for INT_DIGIT resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for END resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for EQUAL resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for SUM resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for MINUS resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for MULTIPLY resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for DIVISION resolved using rule 17 (body -> .)
  ! shift/reduce conflict for CYCLE resolved as shift
  ! reduce/reduce conflict for COLON resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for SEMI_COLON resolved using rule 17 (body -> .)
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for CYCLE resolved as shift
  ! reduce/reduce conflict for CONTINUE resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for BREAK resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for PRINT resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for IF resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for CALL resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for OPEN_PAREN resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for FLOAT_DIGIT resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for INT_DIGIT resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for END resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for EQUAL resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for SUM resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for MINUS resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for MULTIPLY resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for DIVISION resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for COLON resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for SEMI_COLON resolved using rule 17 (body -> .)
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for CYCLE resolved as shift
  ! reduce/reduce conflict for CONTINUE resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for BREAK resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for PRINT resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for IF resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for CALL resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for OPEN_PAREN resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for FLOAT_DIGIT resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for INT_DIGIT resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for END resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for EQUAL resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for SUM resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for MINUS resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for MULTIPLY resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for DIVISION resolved using rule 17 (body -> .)
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! reduce/reduce conflict for COLON resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for SEMI_COLON resolved using rule 17 (body -> .)
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for CYCLE resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! reduce/reduce conflict for PRINT resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for IF resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for CALL resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for OPEN_PAREN resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for FLOAT_DIGIT resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for INT_DIGIT resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for END resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for EQUAL resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for SUM resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for MINUS resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for MULTIPLY resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for DIVISION resolved using rule 17 (body -> .)
  ! shift/reduce conflict for PRINT resolved as shift
  ! reduce/reduce conflict for COLON resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for SEMI_COLON resolved using rule 17 (body -> .)
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for CYCLE resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! reduce/reduce conflict for IF resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for CALL resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for OPEN_PAREN resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for FLOAT_DIGIT resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for INT_DIGIT resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for END resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for EQUAL resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for SUM resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for MINUS resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for MULTIPLY resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for DIVISION resolved using rule 17 (body -> .)
  ! shift/reduce conflict for IF resolved as shift
  ! reduce/reduce conflict for COLON resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for SEMI_COLON resolved using rule 17 (body -> .)
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for CYCLE resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! reduce/reduce conflict for CALL resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for OPEN_PAREN resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for FLOAT_DIGIT resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for INT_DIGIT resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for END resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for EQUAL resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for SUM resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for MINUS resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for MULTIPLY resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for DIVISION resolved using rule 17 (body -> .)
  ! shift/reduce conflict for CALL resolved as shift
  ! reduce/reduce conflict for EQUAL resolved using rule 13 (variables -> .)
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for OPEN_PAREN resolved as shift
  ! reduce/reduce conflict for SUM resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for MINUS resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for MULTIPLY resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for DIVISION resolved using rule 17 (body -> .)
  ! shift/reduce conflict for FLOAT_DIGIT resolved as shift
  ! shift/reduce conflict for INT_DIGIT resolved as shift
    COLON           reduce using rule 17 (body -> .)
    SEMI_COLON      reduce using rule 17 (body -> .)
    END             reduce using rule 17 (body -> .)
    SUM             reduce using rule 17 (body -> .)
    MINUS           reduce using rule 17 (body -> .)
    MULTIPLY        reduce using rule 17 (body -> .)
    DIVISION        reduce using rule 17 (body -> .)
    BEGIN           shift and go to state 10
    FUNCTION        shift and go to state 19
    CYCLE           shift and go to state 21
    CONTINUE        shift and go to state 23
    BREAK           shift and go to state 24
    PRINT           shift and go to state 25
    IF              shift and go to state 26
    CALL            shift and go to state 27
    EQUAL           reduce using rule 13 (variables -> .)
    VARIABLE        shift and go to state 28
    OPEN_PAREN      shift and go to state 29
    FLOAT_DIGIT     shift and go to state 31
    INT_DIGIT       shift and go to state 32

  ! FUNCTION        [ reduce using rule 17 (body -> .) ]
  ! CYCLE           [ reduce using rule 17 (body -> .) ]
  ! CONTINUE        [ reduce using rule 17 (body -> .) ]
  ! BREAK           [ reduce using rule 17 (body -> .) ]
  ! PRINT           [ reduce using rule 17 (body -> .) ]
  ! IF              [ reduce using rule 17 (body -> .) ]
  ! CALL            [ reduce using rule 17 (body -> .) ]
  ! VARIABLE        [ reduce using rule 17 (body -> .) ]
  ! OPEN_PAREN      [ reduce using rule 17 (body -> .) ]
  ! FLOAT_DIGIT     [ reduce using rule 17 (body -> .) ]
  ! INT_DIGIT       [ reduce using rule 17 (body -> .) ]
  ! EQUAL           [ reduce using rule 17 (body -> .) ]
  ! COLON           [ reduce using rule 20 (lines -> .) ]
  ! SEMI_COLON      [ reduce using rule 20 (lines -> .) ]
  ! FUNCTION        [ reduce using rule 20 (lines -> .) ]
  ! CYCLE           [ reduce using rule 20 (lines -> .) ]
  ! CONTINUE        [ reduce using rule 20 (lines -> .) ]
  ! BREAK           [ reduce using rule 20 (lines -> .) ]
  ! PRINT           [ reduce using rule 20 (lines -> .) ]
  ! IF              [ reduce using rule 20 (lines -> .) ]
  ! CALL            [ reduce using rule 20 (lines -> .) ]
  ! VARIABLE        [ reduce using rule 20 (lines -> .) ]
  ! OPEN_PAREN      [ reduce using rule 20 (lines -> .) ]
  ! FLOAT_DIGIT     [ reduce using rule 20 (lines -> .) ]
  ! INT_DIGIT       [ reduce using rule 20 (lines -> .) ]
  ! END             [ reduce using rule 20 (lines -> .) ]
  ! EQUAL           [ reduce using rule 20 (lines -> .) ]
  ! SUM             [ reduce using rule 20 (lines -> .) ]
  ! MINUS           [ reduce using rule 20 (lines -> .) ]
  ! MULTIPLY        [ reduce using rule 20 (lines -> .) ]
  ! DIVISION        [ reduce using rule 20 (lines -> .) ]
  ! COLON           [ reduce using rule 32 (function -> .) ]
  ! SEMI_COLON      [ reduce using rule 32 (function -> .) ]
  ! FUNCTION        [ reduce using rule 32 (function -> .) ]
  ! CYCLE           [ reduce using rule 32 (function -> .) ]
  ! CONTINUE        [ reduce using rule 32 (function -> .) ]
  ! BREAK           [ reduce using rule 32 (function -> .) ]
  ! PRINT           [ reduce using rule 32 (function -> .) ]
  ! IF              [ reduce using rule 32 (function -> .) ]
  ! CALL            [ reduce using rule 32 (function -> .) ]
  ! VARIABLE        [ reduce using rule 32 (function -> .) ]
  ! OPEN_PAREN      [ reduce using rule 32 (function -> .) ]
  ! FLOAT_DIGIT     [ reduce using rule 32 (function -> .) ]
  ! INT_DIGIT       [ reduce using rule 32 (function -> .) ]
  ! END             [ reduce using rule 32 (function -> .) ]
  ! EQUAL           [ reduce using rule 32 (function -> .) ]
  ! SUM             [ reduce using rule 32 (function -> .) ]
  ! MINUS           [ reduce using rule 32 (function -> .) ]
  ! MULTIPLY        [ reduce using rule 32 (function -> .) ]
  ! DIVISION        [ reduce using rule 32 (function -> .) ]
  ! COLON           [ reduce using rule 34 (cycle -> .) ]
  ! SEMI_COLON      [ reduce using rule 34 (cycle -> .) ]
  ! FUNCTION        [ reduce using rule 34 (cycle -> .) ]
  ! CYCLE           [ reduce using rule 34 (cycle -> .) ]
  ! CONTINUE        [ reduce using rule 34 (cycle -> .) ]
  ! BREAK           [ reduce using rule 34 (cycle -> .) ]
  ! PRINT           [ reduce using rule 34 (cycle -> .) ]
  ! IF              [ reduce using rule 34 (cycle -> .) ]
  ! CALL            [ reduce using rule 34 (cycle -> .) ]
  ! VARIABLE        [ reduce using rule 34 (cycle -> .) ]
  ! OPEN_PAREN      [ reduce using rule 34 (cycle -> .) ]
  ! FLOAT_DIGIT     [ reduce using rule 34 (cycle -> .) ]
  ! INT_DIGIT       [ reduce using rule 34 (cycle -> .) ]
  ! END             [ reduce using rule 34 (cycle -> .) ]
  ! EQUAL           [ reduce using rule 34 (cycle -> .) ]
  ! SUM             [ reduce using rule 34 (cycle -> .) ]
  ! MINUS           [ reduce using rule 34 (cycle -> .) ]
  ! MULTIPLY        [ reduce using rule 34 (cycle -> .) ]
  ! DIVISION        [ reduce using rule 34 (cycle -> .) ]
  ! COLON           [ reduce using rule 28 (assign -> .) ]
  ! SEMI_COLON      [ reduce using rule 28 (assign -> .) ]
  ! FUNCTION        [ reduce using rule 28 (assign -> .) ]
  ! CYCLE           [ reduce using rule 28 (assign -> .) ]
  ! CONTINUE        [ reduce using rule 28 (assign -> .) ]
  ! BREAK           [ reduce using rule 28 (assign -> .) ]
  ! PRINT           [ reduce using rule 28 (assign -> .) ]
  ! IF              [ reduce using rule 28 (assign -> .) ]
  ! CALL            [ reduce using rule 28 (assign -> .) ]
  ! VARIABLE        [ reduce using rule 28 (assign -> .) ]
  ! OPEN_PAREN      [ reduce using rule 28 (assign -> .) ]
  ! FLOAT_DIGIT     [ reduce using rule 28 (assign -> .) ]
  ! INT_DIGIT       [ reduce using rule 28 (assign -> .) ]
  ! END             [ reduce using rule 28 (assign -> .) ]
  ! EQUAL           [ reduce using rule 28 (assign -> .) ]
  ! SUM             [ reduce using rule 28 (assign -> .) ]
  ! MINUS           [ reduce using rule 28 (assign -> .) ]
  ! MULTIPLY        [ reduce using rule 28 (assign -> .) ]
  ! DIVISION        [ reduce using rule 28 (assign -> .) ]
  ! COLON           [ reduce using rule 53 (expression -> .) ]
  ! SEMI_COLON      [ reduce using rule 53 (expression -> .) ]
  ! FUNCTION        [ reduce using rule 53 (expression -> .) ]
  ! CYCLE           [ reduce using rule 53 (expression -> .) ]
  ! CONTINUE        [ reduce using rule 53 (expression -> .) ]
  ! BREAK           [ reduce using rule 53 (expression -> .) ]
  ! PRINT           [ reduce using rule 53 (expression -> .) ]
  ! IF              [ reduce using rule 53 (expression -> .) ]
  ! CALL            [ reduce using rule 53 (expression -> .) ]
  ! VARIABLE        [ reduce using rule 53 (expression -> .) ]
  ! OPEN_PAREN      [ reduce using rule 53 (expression -> .) ]
  ! FLOAT_DIGIT     [ reduce using rule 53 (expression -> .) ]
  ! INT_DIGIT       [ reduce using rule 53 (expression -> .) ]
  ! END             [ reduce using rule 53 (expression -> .) ]
  ! EQUAL           [ reduce using rule 53 (expression -> .) ]
  ! SUM             [ reduce using rule 53 (expression -> .) ]
  ! MINUS           [ reduce using rule 53 (expression -> .) ]
  ! MULTIPLY        [ reduce using rule 53 (expression -> .) ]
  ! DIVISION        [ reduce using rule 53 (expression -> .) ]
  ! COLON           [ reduce using rule 51 (print -> .) ]
  ! SEMI_COLON      [ reduce using rule 51 (print -> .) ]
  ! FUNCTION        [ reduce using rule 51 (print -> .) ]
  ! CYCLE           [ reduce using rule 51 (print -> .) ]
  ! CONTINUE        [ reduce using rule 51 (print -> .) ]
  ! BREAK           [ reduce using rule 51 (print -> .) ]
  ! PRINT           [ reduce using rule 51 (print -> .) ]
  ! IF              [ reduce using rule 51 (print -> .) ]
  ! CALL            [ reduce using rule 51 (print -> .) ]
  ! VARIABLE        [ reduce using rule 51 (print -> .) ]
  ! OPEN_PAREN      [ reduce using rule 51 (print -> .) ]
  ! FLOAT_DIGIT     [ reduce using rule 51 (print -> .) ]
  ! INT_DIGIT       [ reduce using rule 51 (print -> .) ]
  ! END             [ reduce using rule 51 (print -> .) ]
  ! EQUAL           [ reduce using rule 51 (print -> .) ]
  ! SUM             [ reduce using rule 51 (print -> .) ]
  ! MINUS           [ reduce using rule 51 (print -> .) ]
  ! MULTIPLY        [ reduce using rule 51 (print -> .) ]
  ! DIVISION        [ reduce using rule 51 (print -> .) ]
  ! COLON           [ reduce using rule 36 (if -> .) ]
  ! SEMI_COLON      [ reduce using rule 36 (if -> .) ]
  ! FUNCTION        [ reduce using rule 36 (if -> .) ]
  ! CYCLE           [ reduce using rule 36 (if -> .) ]
  ! CONTINUE        [ reduce using rule 36 (if -> .) ]
  ! BREAK           [ reduce using rule 36 (if -> .) ]
  ! PRINT           [ reduce using rule 36 (if -> .) ]
  ! IF              [ reduce using rule 36 (if -> .) ]
  ! CALL            [ reduce using rule 36 (if -> .) ]
  ! VARIABLE        [ reduce using rule 36 (if -> .) ]
  ! OPEN_PAREN      [ reduce using rule 36 (if -> .) ]
  ! FLOAT_DIGIT     [ reduce using rule 36 (if -> .) ]
  ! INT_DIGIT       [ reduce using rule 36 (if -> .) ]
  ! END             [ reduce using rule 36 (if -> .) ]
  ! EQUAL           [ reduce using rule 36 (if -> .) ]
  ! SUM             [ reduce using rule 36 (if -> .) ]
  ! MINUS           [ reduce using rule 36 (if -> .) ]
  ! MULTIPLY        [ reduce using rule 36 (if -> .) ]
  ! DIVISION        [ reduce using rule 36 (if -> .) ]
  ! COLON           [ reduce using rule 30 (call -> .) ]
  ! SEMI_COLON      [ reduce using rule 30 (call -> .) ]
  ! FUNCTION        [ reduce using rule 30 (call -> .) ]
  ! CYCLE           [ reduce using rule 30 (call -> .) ]
  ! CONTINUE        [ reduce using rule 30 (call -> .) ]
  ! BREAK           [ reduce using rule 30 (call -> .) ]
  ! PRINT           [ reduce using rule 30 (call -> .) ]
  ! IF              [ reduce using rule 30 (call -> .) ]
  ! CALL            [ reduce using rule 30 (call -> .) ]
  ! VARIABLE        [ reduce using rule 30 (call -> .) ]
  ! OPEN_PAREN      [ reduce using rule 30 (call -> .) ]
  ! FLOAT_DIGIT     [ reduce using rule 30 (call -> .) ]
  ! INT_DIGIT       [ reduce using rule 30 (call -> .) ]
  ! END             [ reduce using rule 30 (call -> .) ]
  ! EQUAL           [ reduce using rule 30 (call -> .) ]
  ! SUM             [ reduce using rule 30 (call -> .) ]
  ! MINUS           [ reduce using rule 30 (call -> .) ]
  ! MULTIPLY        [ reduce using rule 30 (call -> .) ]
  ! DIVISION        [ reduce using rule 30 (call -> .) ]
  ! SUM             [ reduce using rule 58 (term -> .) ]
  ! MINUS           [ reduce using rule 58 (term -> .) ]
  ! MULTIPLY        [ reduce using rule 61 (factor -> .) ]
  ! DIVISION        [ reduce using rule 61 (factor -> .) ]

    body                           shift and go to state 36
    lines                          shift and go to state 11
    function                       shift and go to state 12
    cycle                          shift and go to state 13
    assign                         shift and go to state 14
    expression                     shift and go to state 15
    print                          shift and go to state 16
    if                             shift and go to state 17
    call                           shift and go to state 18
    variables                      shift and go to state 20
    term                           shift and go to state 22
    factor                         shift and go to state 30

state 11

    (19) body -> lines . colons
    (10) colons -> .
    (11) colons -> . COLON
    (12) colons -> . SEMI_COLON

  ! shift/reduce conflict for COLON resolved as shift
  ! shift/reduce conflict for SEMI_COLON resolved as shift
    $end            reduce using rule 10 (colons -> .)
    FUNCTION        reduce using rule 10 (colons -> .)
    CYCLE           reduce using rule 10 (colons -> .)
    CONTINUE        reduce using rule 10 (colons -> .)
    BREAK           reduce using rule 10 (colons -> .)
    PRINT           reduce using rule 10 (colons -> .)
    IF              reduce using rule 10 (colons -> .)
    CALL            reduce using rule 10 (colons -> .)
    VARIABLE        reduce using rule 10 (colons -> .)
    OPEN_PAREN      reduce using rule 10 (colons -> .)
    FLOAT_DIGIT     reduce using rule 10 (colons -> .)
    INT_DIGIT       reduce using rule 10 (colons -> .)
    END             reduce using rule 10 (colons -> .)
    EQUAL           reduce using rule 10 (colons -> .)
    SUM             reduce using rule 10 (colons -> .)
    MINUS           reduce using rule 10 (colons -> .)
    MULTIPLY        reduce using rule 10 (colons -> .)
    DIVISION        reduce using rule 10 (colons -> .)
    ELSE            reduce using rule 10 (colons -> .)
    BEGIN           reduce using rule 10 (colons -> .)
    COLON           shift and go to state 6
    SEMI_COLON      shift and go to state 7

  ! COLON           [ reduce using rule 10 (colons -> .) ]
  ! SEMI_COLON      [ reduce using rule 10 (colons -> .) ]

    colons                         shift and go to state 37

state 12

    (21) lines -> function .

    COLON           reduce using rule 21 (lines -> function .)
    SEMI_COLON      reduce using rule 21 (lines -> function .)
    $end            reduce using rule 21 (lines -> function .)
    FUNCTION        reduce using rule 21 (lines -> function .)
    CYCLE           reduce using rule 21 (lines -> function .)
    CONTINUE        reduce using rule 21 (lines -> function .)
    BREAK           reduce using rule 21 (lines -> function .)
    PRINT           reduce using rule 21 (lines -> function .)
    IF              reduce using rule 21 (lines -> function .)
    CALL            reduce using rule 21 (lines -> function .)
    VARIABLE        reduce using rule 21 (lines -> function .)
    OPEN_PAREN      reduce using rule 21 (lines -> function .)
    FLOAT_DIGIT     reduce using rule 21 (lines -> function .)
    INT_DIGIT       reduce using rule 21 (lines -> function .)
    END             reduce using rule 21 (lines -> function .)
    EQUAL           reduce using rule 21 (lines -> function .)
    SUM             reduce using rule 21 (lines -> function .)
    MINUS           reduce using rule 21 (lines -> function .)
    MULTIPLY        reduce using rule 21 (lines -> function .)
    DIVISION        reduce using rule 21 (lines -> function .)
    ELSE            reduce using rule 21 (lines -> function .)
    BEGIN           reduce using rule 21 (lines -> function .)


state 13

    (22) lines -> cycle .

    COLON           reduce using rule 22 (lines -> cycle .)
    SEMI_COLON      reduce using rule 22 (lines -> cycle .)
    $end            reduce using rule 22 (lines -> cycle .)
    FUNCTION        reduce using rule 22 (lines -> cycle .)
    CYCLE           reduce using rule 22 (lines -> cycle .)
    CONTINUE        reduce using rule 22 (lines -> cycle .)
    BREAK           reduce using rule 22 (lines -> cycle .)
    PRINT           reduce using rule 22 (lines -> cycle .)
    IF              reduce using rule 22 (lines -> cycle .)
    CALL            reduce using rule 22 (lines -> cycle .)
    VARIABLE        reduce using rule 22 (lines -> cycle .)
    OPEN_PAREN      reduce using rule 22 (lines -> cycle .)
    FLOAT_DIGIT     reduce using rule 22 (lines -> cycle .)
    INT_DIGIT       reduce using rule 22 (lines -> cycle .)
    END             reduce using rule 22 (lines -> cycle .)
    EQUAL           reduce using rule 22 (lines -> cycle .)
    SUM             reduce using rule 22 (lines -> cycle .)
    MINUS           reduce using rule 22 (lines -> cycle .)
    MULTIPLY        reduce using rule 22 (lines -> cycle .)
    DIVISION        reduce using rule 22 (lines -> cycle .)
    ELSE            reduce using rule 22 (lines -> cycle .)
    BEGIN           reduce using rule 22 (lines -> cycle .)


state 14

    (23) lines -> assign .

    COLON           reduce using rule 23 (lines -> assign .)
    SEMI_COLON      reduce using rule 23 (lines -> assign .)
    $end            reduce using rule 23 (lines -> assign .)
    FUNCTION        reduce using rule 23 (lines -> assign .)
    CYCLE           reduce using rule 23 (lines -> assign .)
    CONTINUE        reduce using rule 23 (lines -> assign .)
    BREAK           reduce using rule 23 (lines -> assign .)
    PRINT           reduce using rule 23 (lines -> assign .)
    IF              reduce using rule 23 (lines -> assign .)
    CALL            reduce using rule 23 (lines -> assign .)
    VARIABLE        reduce using rule 23 (lines -> assign .)
    OPEN_PAREN      reduce using rule 23 (lines -> assign .)
    FLOAT_DIGIT     reduce using rule 23 (lines -> assign .)
    INT_DIGIT       reduce using rule 23 (lines -> assign .)
    END             reduce using rule 23 (lines -> assign .)
    EQUAL           reduce using rule 23 (lines -> assign .)
    SUM             reduce using rule 23 (lines -> assign .)
    MINUS           reduce using rule 23 (lines -> assign .)
    MULTIPLY        reduce using rule 23 (lines -> assign .)
    DIVISION        reduce using rule 23 (lines -> assign .)
    ELSE            reduce using rule 23 (lines -> assign .)
    BEGIN           reduce using rule 23 (lines -> assign .)


state 15

    (24) lines -> expression .

    COLON           reduce using rule 24 (lines -> expression .)
    SEMI_COLON      reduce using rule 24 (lines -> expression .)
    $end            reduce using rule 24 (lines -> expression .)
    FUNCTION        reduce using rule 24 (lines -> expression .)
    CYCLE           reduce using rule 24 (lines -> expression .)
    CONTINUE        reduce using rule 24 (lines -> expression .)
    BREAK           reduce using rule 24 (lines -> expression .)
    PRINT           reduce using rule 24 (lines -> expression .)
    IF              reduce using rule 24 (lines -> expression .)
    CALL            reduce using rule 24 (lines -> expression .)
    VARIABLE        reduce using rule 24 (lines -> expression .)
    OPEN_PAREN      reduce using rule 24 (lines -> expression .)
    FLOAT_DIGIT     reduce using rule 24 (lines -> expression .)
    INT_DIGIT       reduce using rule 24 (lines -> expression .)
    END             reduce using rule 24 (lines -> expression .)
    EQUAL           reduce using rule 24 (lines -> expression .)
    SUM             reduce using rule 24 (lines -> expression .)
    MINUS           reduce using rule 24 (lines -> expression .)
    MULTIPLY        reduce using rule 24 (lines -> expression .)
    DIVISION        reduce using rule 24 (lines -> expression .)
    ELSE            reduce using rule 24 (lines -> expression .)
    BEGIN           reduce using rule 24 (lines -> expression .)


state 16

    (25) lines -> print .

    COLON           reduce using rule 25 (lines -> print .)
    SEMI_COLON      reduce using rule 25 (lines -> print .)
    $end            reduce using rule 25 (lines -> print .)
    FUNCTION        reduce using rule 25 (lines -> print .)
    CYCLE           reduce using rule 25 (lines -> print .)
    CONTINUE        reduce using rule 25 (lines -> print .)
    BREAK           reduce using rule 25 (lines -> print .)
    PRINT           reduce using rule 25 (lines -> print .)
    IF              reduce using rule 25 (lines -> print .)
    CALL            reduce using rule 25 (lines -> print .)
    VARIABLE        reduce using rule 25 (lines -> print .)
    OPEN_PAREN      reduce using rule 25 (lines -> print .)
    FLOAT_DIGIT     reduce using rule 25 (lines -> print .)
    INT_DIGIT       reduce using rule 25 (lines -> print .)
    END             reduce using rule 25 (lines -> print .)
    EQUAL           reduce using rule 25 (lines -> print .)
    SUM             reduce using rule 25 (lines -> print .)
    MINUS           reduce using rule 25 (lines -> print .)
    MULTIPLY        reduce using rule 25 (lines -> print .)
    DIVISION        reduce using rule 25 (lines -> print .)
    ELSE            reduce using rule 25 (lines -> print .)
    BEGIN           reduce using rule 25 (lines -> print .)


state 17

    (26) lines -> if .

    COLON           reduce using rule 26 (lines -> if .)
    SEMI_COLON      reduce using rule 26 (lines -> if .)
    $end            reduce using rule 26 (lines -> if .)
    FUNCTION        reduce using rule 26 (lines -> if .)
    CYCLE           reduce using rule 26 (lines -> if .)
    CONTINUE        reduce using rule 26 (lines -> if .)
    BREAK           reduce using rule 26 (lines -> if .)
    PRINT           reduce using rule 26 (lines -> if .)
    IF              reduce using rule 26 (lines -> if .)
    CALL            reduce using rule 26 (lines -> if .)
    VARIABLE        reduce using rule 26 (lines -> if .)
    OPEN_PAREN      reduce using rule 26 (lines -> if .)
    FLOAT_DIGIT     reduce using rule 26 (lines -> if .)
    INT_DIGIT       reduce using rule 26 (lines -> if .)
    END             reduce using rule 26 (lines -> if .)
    EQUAL           reduce using rule 26 (lines -> if .)
    SUM             reduce using rule 26 (lines -> if .)
    MINUS           reduce using rule 26 (lines -> if .)
    MULTIPLY        reduce using rule 26 (lines -> if .)
    DIVISION        reduce using rule 26 (lines -> if .)
    ELSE            reduce using rule 26 (lines -> if .)
    BEGIN           reduce using rule 26 (lines -> if .)


state 18

    (27) lines -> call .

    COLON           reduce using rule 27 (lines -> call .)
    SEMI_COLON      reduce using rule 27 (lines -> call .)
    $end            reduce using rule 27 (lines -> call .)
    FUNCTION        reduce using rule 27 (lines -> call .)
    CYCLE           reduce using rule 27 (lines -> call .)
    CONTINUE        reduce using rule 27 (lines -> call .)
    BREAK           reduce using rule 27 (lines -> call .)
    PRINT           reduce using rule 27 (lines -> call .)
    IF              reduce using rule 27 (lines -> call .)
    CALL            reduce using rule 27 (lines -> call .)
    VARIABLE        reduce using rule 27 (lines -> call .)
    OPEN_PAREN      reduce using rule 27 (lines -> call .)
    FLOAT_DIGIT     reduce using rule 27 (lines -> call .)
    INT_DIGIT       reduce using rule 27 (lines -> call .)
    END             reduce using rule 27 (lines -> call .)
    EQUAL           reduce using rule 27 (lines -> call .)
    SUM             reduce using rule 27 (lines -> call .)
    MINUS           reduce using rule 27 (lines -> call .)
    MULTIPLY        reduce using rule 27 (lines -> call .)
    DIVISION        reduce using rule 27 (lines -> call .)
    ELSE            reduce using rule 27 (lines -> call .)
    BEGIN           reduce using rule 27 (lines -> call .)


state 19

    (33) function -> FUNCTION . NAME_FUNCTION variables body

    NAME_FUNCTION   shift and go to state 38


state 20

    (29) assign -> variables . EQUAL expression

    EQUAL           shift and go to state 39


state 21

    (35) cycle -> CYCLE . condition body
    (40) condition -> .
    (41) condition -> . expression comparison expression
    (42) condition -> . OPEN_PAREN condition CLOSE_PAREN logic_op
    (53) expression -> .
    (54) expression -> . term SUM term
    (55) expression -> . term MINUS term
    (56) expression -> . CONTINUE
    (57) expression -> . BREAK
    (58) term -> .
    (59) term -> . factor MULTIPLY factor
    (60) term -> . factor DIVISION factor
    (61) factor -> .
    (62) factor -> . VARIABLE
    (63) factor -> . FLOAT_DIGIT
    (64) factor -> . INT_DIGIT
    (65) factor -> . OPEN_PAREN expression CLOSE_PAREN

  ! shift/reduce conflict for OPEN_PAREN resolved as shift
  ! reduce/reduce conflict for CONTINUE resolved using rule 40 (condition -> .)
  ! reduce/reduce conflict for BREAK resolved using rule 40 (condition -> .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 40 (condition -> .)
  ! reduce/reduce conflict for FLOAT_DIGIT resolved using rule 40 (condition -> .)
  ! reduce/reduce conflict for INT_DIGIT resolved using rule 40 (condition -> .)
  ! shift/reduce conflict for OPEN_PAREN resolved as shift
  ! reduce/reduce conflict for SUM resolved using rule 40 (condition -> .)
  ! reduce/reduce conflict for MINUS resolved using rule 40 (condition -> .)
  ! reduce/reduce conflict for MULTIPLY resolved using rule 40 (condition -> .)
  ! reduce/reduce conflict for DIVISION resolved using rule 40 (condition -> .)
  ! reduce/reduce conflict for BEGIN resolved using rule 40 (condition -> .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 40 (condition -> .)
  ! reduce/reduce conflict for CYCLE resolved using rule 40 (condition -> .)
  ! reduce/reduce conflict for PRINT resolved using rule 40 (condition -> .)
  ! reduce/reduce conflict for IF resolved using rule 40 (condition -> .)
  ! reduce/reduce conflict for CALL resolved using rule 40 (condition -> .)
  ! reduce/reduce conflict for COLON resolved using rule 40 (condition -> .)
  ! reduce/reduce conflict for SEMI_COLON resolved using rule 40 (condition -> .)
  ! reduce/reduce conflict for EQUAL resolved using rule 40 (condition -> .)
  ! reduce/reduce conflict for $end resolved using rule 40 (condition -> .)
  ! reduce/reduce conflict for END resolved using rule 40 (condition -> .)
  ! reduce/reduce conflict for ELSE resolved using rule 40 (condition -> .)
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! reduce/reduce conflict for SUM resolved using rule 40 (condition -> .)
  ! reduce/reduce conflict for MINUS resolved using rule 40 (condition -> .)
  ! reduce/reduce conflict for MULTIPLY resolved using rule 40 (condition -> .)
  ! reduce/reduce conflict for DIVISION resolved using rule 40 (condition -> .)
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for FLOAT_DIGIT resolved as shift
  ! shift/reduce conflict for INT_DIGIT resolved as shift
    BEGIN           reduce using rule 40 (condition -> .)
    FUNCTION        reduce using rule 40 (condition -> .)
    CYCLE           reduce using rule 40 (condition -> .)
    PRINT           reduce using rule 40 (condition -> .)
    IF              reduce using rule 40 (condition -> .)
    CALL            reduce using rule 40 (condition -> .)
    COLON           reduce using rule 40 (condition -> .)
    SEMI_COLON      reduce using rule 40 (condition -> .)
    EQUAL           reduce using rule 40 (condition -> .)
    SUM             reduce using rule 40 (condition -> .)
    MINUS           reduce using rule 40 (condition -> .)
    MULTIPLY        reduce using rule 40 (condition -> .)
    DIVISION        reduce using rule 40 (condition -> .)
    $end            reduce using rule 40 (condition -> .)
    END             reduce using rule 40 (condition -> .)
    ELSE            reduce using rule 40 (condition -> .)
    OPEN_PAREN      shift and go to state 42
    MORE            reduce using rule 53 (expression -> .)
    LESS            reduce using rule 53 (expression -> .)
    LOGIC_EQUAL     reduce using rule 53 (expression -> .)
    CONTINUE        shift and go to state 23
    BREAK           shift and go to state 24
    VARIABLE        shift and go to state 43
    FLOAT_DIGIT     shift and go to state 31
    INT_DIGIT       shift and go to state 32

  ! CONTINUE        [ reduce using rule 40 (condition -> .) ]
  ! BREAK           [ reduce using rule 40 (condition -> .) ]
  ! VARIABLE        [ reduce using rule 40 (condition -> .) ]
  ! OPEN_PAREN      [ reduce using rule 40 (condition -> .) ]
  ! FLOAT_DIGIT     [ reduce using rule 40 (condition -> .) ]
  ! INT_DIGIT       [ reduce using rule 40 (condition -> .) ]
  ! CONTINUE        [ reduce using rule 53 (expression -> .) ]
  ! BREAK           [ reduce using rule 53 (expression -> .) ]
  ! VARIABLE        [ reduce using rule 53 (expression -> .) ]
  ! FLOAT_DIGIT     [ reduce using rule 53 (expression -> .) ]
  ! INT_DIGIT       [ reduce using rule 53 (expression -> .) ]
  ! OPEN_PAREN      [ reduce using rule 53 (expression -> .) ]
  ! SUM             [ reduce using rule 53 (expression -> .) ]
  ! MINUS           [ reduce using rule 53 (expression -> .) ]
  ! MULTIPLY        [ reduce using rule 53 (expression -> .) ]
  ! DIVISION        [ reduce using rule 53 (expression -> .) ]
  ! BEGIN           [ reduce using rule 53 (expression -> .) ]
  ! FUNCTION        [ reduce using rule 53 (expression -> .) ]
  ! CYCLE           [ reduce using rule 53 (expression -> .) ]
  ! PRINT           [ reduce using rule 53 (expression -> .) ]
  ! IF              [ reduce using rule 53 (expression -> .) ]
  ! CALL            [ reduce using rule 53 (expression -> .) ]
  ! COLON           [ reduce using rule 53 (expression -> .) ]
  ! SEMI_COLON      [ reduce using rule 53 (expression -> .) ]
  ! EQUAL           [ reduce using rule 53 (expression -> .) ]
  ! $end            [ reduce using rule 53 (expression -> .) ]
  ! END             [ reduce using rule 53 (expression -> .) ]
  ! ELSE            [ reduce using rule 53 (expression -> .) ]
  ! SUM             [ reduce using rule 58 (term -> .) ]
  ! MINUS           [ reduce using rule 58 (term -> .) ]
  ! MULTIPLY        [ reduce using rule 61 (factor -> .) ]
  ! DIVISION        [ reduce using rule 61 (factor -> .) ]

    condition                      shift and go to state 40
    expression                     shift and go to state 41
    term                           shift and go to state 22
    factor                         shift and go to state 30

state 22

    (54) expression -> term . SUM term
    (55) expression -> term . MINUS term

    SUM             shift and go to state 44
    MINUS           shift and go to state 45


state 23

    (56) expression -> CONTINUE .

    COLON           reduce using rule 56 (expression -> CONTINUE .)
    SEMI_COLON      reduce using rule 56 (expression -> CONTINUE .)
    $end            reduce using rule 56 (expression -> CONTINUE .)
    FUNCTION        reduce using rule 56 (expression -> CONTINUE .)
    CYCLE           reduce using rule 56 (expression -> CONTINUE .)
    CONTINUE        reduce using rule 56 (expression -> CONTINUE .)
    BREAK           reduce using rule 56 (expression -> CONTINUE .)
    PRINT           reduce using rule 56 (expression -> CONTINUE .)
    IF              reduce using rule 56 (expression -> CONTINUE .)
    CALL            reduce using rule 56 (expression -> CONTINUE .)
    VARIABLE        reduce using rule 56 (expression -> CONTINUE .)
    OPEN_PAREN      reduce using rule 56 (expression -> CONTINUE .)
    FLOAT_DIGIT     reduce using rule 56 (expression -> CONTINUE .)
    INT_DIGIT       reduce using rule 56 (expression -> CONTINUE .)
    END             reduce using rule 56 (expression -> CONTINUE .)
    EQUAL           reduce using rule 56 (expression -> CONTINUE .)
    SUM             reduce using rule 56 (expression -> CONTINUE .)
    MINUS           reduce using rule 56 (expression -> CONTINUE .)
    MULTIPLY        reduce using rule 56 (expression -> CONTINUE .)
    DIVISION        reduce using rule 56 (expression -> CONTINUE .)
    MORE            reduce using rule 56 (expression -> CONTINUE .)
    LESS            reduce using rule 56 (expression -> CONTINUE .)
    LOGIC_EQUAL     reduce using rule 56 (expression -> CONTINUE .)
    BEGIN           reduce using rule 56 (expression -> CONTINUE .)
    ELSE            reduce using rule 56 (expression -> CONTINUE .)
    CLOSE_PAREN     reduce using rule 56 (expression -> CONTINUE .)


state 24

    (57) expression -> BREAK .

    COLON           reduce using rule 57 (expression -> BREAK .)
    SEMI_COLON      reduce using rule 57 (expression -> BREAK .)
    $end            reduce using rule 57 (expression -> BREAK .)
    FUNCTION        reduce using rule 57 (expression -> BREAK .)
    CYCLE           reduce using rule 57 (expression -> BREAK .)
    CONTINUE        reduce using rule 57 (expression -> BREAK .)
    BREAK           reduce using rule 57 (expression -> BREAK .)
    PRINT           reduce using rule 57 (expression -> BREAK .)
    IF              reduce using rule 57 (expression -> BREAK .)
    CALL            reduce using rule 57 (expression -> BREAK .)
    VARIABLE        reduce using rule 57 (expression -> BREAK .)
    OPEN_PAREN      reduce using rule 57 (expression -> BREAK .)
    FLOAT_DIGIT     reduce using rule 57 (expression -> BREAK .)
    INT_DIGIT       reduce using rule 57 (expression -> BREAK .)
    END             reduce using rule 57 (expression -> BREAK .)
    EQUAL           reduce using rule 57 (expression -> BREAK .)
    SUM             reduce using rule 57 (expression -> BREAK .)
    MINUS           reduce using rule 57 (expression -> BREAK .)
    MULTIPLY        reduce using rule 57 (expression -> BREAK .)
    DIVISION        reduce using rule 57 (expression -> BREAK .)
    MORE            reduce using rule 57 (expression -> BREAK .)
    LESS            reduce using rule 57 (expression -> BREAK .)
    LOGIC_EQUAL     reduce using rule 57 (expression -> BREAK .)
    BEGIN           reduce using rule 57 (expression -> BREAK .)
    ELSE            reduce using rule 57 (expression -> BREAK .)
    CLOSE_PAREN     reduce using rule 57 (expression -> BREAK .)


state 25

    (52) print -> PRINT . expression
    (53) expression -> .
    (54) expression -> . term SUM term
    (55) expression -> . term MINUS term
    (56) expression -> . CONTINUE
    (57) expression -> . BREAK
    (58) term -> .
    (59) term -> . factor MULTIPLY factor
    (60) term -> . factor DIVISION factor
    (61) factor -> .
    (62) factor -> . VARIABLE
    (63) factor -> . FLOAT_DIGIT
    (64) factor -> . INT_DIGIT
    (65) factor -> . OPEN_PAREN expression CLOSE_PAREN

  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! reduce/reduce conflict for SUM resolved using rule 53 (expression -> .)
  ! reduce/reduce conflict for MINUS resolved using rule 53 (expression -> .)
  ! reduce/reduce conflict for MULTIPLY resolved using rule 53 (expression -> .)
  ! reduce/reduce conflict for DIVISION resolved using rule 53 (expression -> .)
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for FLOAT_DIGIT resolved as shift
  ! shift/reduce conflict for INT_DIGIT resolved as shift
  ! shift/reduce conflict for OPEN_PAREN resolved as shift
    COLON           reduce using rule 53 (expression -> .)
    SEMI_COLON      reduce using rule 53 (expression -> .)
    $end            reduce using rule 53 (expression -> .)
    FUNCTION        reduce using rule 53 (expression -> .)
    CYCLE           reduce using rule 53 (expression -> .)
    PRINT           reduce using rule 53 (expression -> .)
    IF              reduce using rule 53 (expression -> .)
    CALL            reduce using rule 53 (expression -> .)
    END             reduce using rule 53 (expression -> .)
    EQUAL           reduce using rule 53 (expression -> .)
    SUM             reduce using rule 53 (expression -> .)
    MINUS           reduce using rule 53 (expression -> .)
    MULTIPLY        reduce using rule 53 (expression -> .)
    DIVISION        reduce using rule 53 (expression -> .)
    ELSE            reduce using rule 53 (expression -> .)
    BEGIN           reduce using rule 53 (expression -> .)
    CONTINUE        shift and go to state 23
    BREAK           shift and go to state 24
    VARIABLE        shift and go to state 43
    FLOAT_DIGIT     shift and go to state 31
    INT_DIGIT       shift and go to state 32
    OPEN_PAREN      shift and go to state 47

  ! CONTINUE        [ reduce using rule 53 (expression -> .) ]
  ! BREAK           [ reduce using rule 53 (expression -> .) ]
  ! VARIABLE        [ reduce using rule 53 (expression -> .) ]
  ! OPEN_PAREN      [ reduce using rule 53 (expression -> .) ]
  ! FLOAT_DIGIT     [ reduce using rule 53 (expression -> .) ]
  ! INT_DIGIT       [ reduce using rule 53 (expression -> .) ]
  ! SUM             [ reduce using rule 58 (term -> .) ]
  ! MINUS           [ reduce using rule 58 (term -> .) ]
  ! MULTIPLY        [ reduce using rule 61 (factor -> .) ]
  ! DIVISION        [ reduce using rule 61 (factor -> .) ]

    expression                     shift and go to state 46
    term                           shift and go to state 22
    factor                         shift and go to state 30

state 26

    (37) if -> IF . condition body else body
    (40) condition -> .
    (41) condition -> . expression comparison expression
    (42) condition -> . OPEN_PAREN condition CLOSE_PAREN logic_op
    (53) expression -> .
    (54) expression -> . term SUM term
    (55) expression -> . term MINUS term
    (56) expression -> . CONTINUE
    (57) expression -> . BREAK
    (58) term -> .
    (59) term -> . factor MULTIPLY factor
    (60) term -> . factor DIVISION factor
    (61) factor -> .
    (62) factor -> . VARIABLE
    (63) factor -> . FLOAT_DIGIT
    (64) factor -> . INT_DIGIT
    (65) factor -> . OPEN_PAREN expression CLOSE_PAREN

  ! shift/reduce conflict for OPEN_PAREN resolved as shift
  ! reduce/reduce conflict for CONTINUE resolved using rule 40 (condition -> .)
  ! reduce/reduce conflict for BREAK resolved using rule 40 (condition -> .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 40 (condition -> .)
  ! reduce/reduce conflict for FLOAT_DIGIT resolved using rule 40 (condition -> .)
  ! reduce/reduce conflict for INT_DIGIT resolved using rule 40 (condition -> .)
  ! shift/reduce conflict for OPEN_PAREN resolved as shift
  ! reduce/reduce conflict for SUM resolved using rule 40 (condition -> .)
  ! reduce/reduce conflict for MINUS resolved using rule 40 (condition -> .)
  ! reduce/reduce conflict for MULTIPLY resolved using rule 40 (condition -> .)
  ! reduce/reduce conflict for DIVISION resolved using rule 40 (condition -> .)
  ! reduce/reduce conflict for BEGIN resolved using rule 40 (condition -> .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 40 (condition -> .)
  ! reduce/reduce conflict for CYCLE resolved using rule 40 (condition -> .)
  ! reduce/reduce conflict for PRINT resolved using rule 40 (condition -> .)
  ! reduce/reduce conflict for IF resolved using rule 40 (condition -> .)
  ! reduce/reduce conflict for CALL resolved using rule 40 (condition -> .)
  ! reduce/reduce conflict for ELSE resolved using rule 40 (condition -> .)
  ! reduce/reduce conflict for COLON resolved using rule 40 (condition -> .)
  ! reduce/reduce conflict for SEMI_COLON resolved using rule 40 (condition -> .)
  ! reduce/reduce conflict for EQUAL resolved using rule 40 (condition -> .)
  ! reduce/reduce conflict for $end resolved using rule 40 (condition -> .)
  ! reduce/reduce conflict for END resolved using rule 40 (condition -> .)
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! reduce/reduce conflict for SUM resolved using rule 40 (condition -> .)
  ! reduce/reduce conflict for MINUS resolved using rule 40 (condition -> .)
  ! reduce/reduce conflict for MULTIPLY resolved using rule 40 (condition -> .)
  ! reduce/reduce conflict for DIVISION resolved using rule 40 (condition -> .)
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for FLOAT_DIGIT resolved as shift
  ! shift/reduce conflict for INT_DIGIT resolved as shift
    BEGIN           reduce using rule 40 (condition -> .)
    FUNCTION        reduce using rule 40 (condition -> .)
    CYCLE           reduce using rule 40 (condition -> .)
    PRINT           reduce using rule 40 (condition -> .)
    IF              reduce using rule 40 (condition -> .)
    CALL            reduce using rule 40 (condition -> .)
    ELSE            reduce using rule 40 (condition -> .)
    COLON           reduce using rule 40 (condition -> .)
    SEMI_COLON      reduce using rule 40 (condition -> .)
    EQUAL           reduce using rule 40 (condition -> .)
    SUM             reduce using rule 40 (condition -> .)
    MINUS           reduce using rule 40 (condition -> .)
    MULTIPLY        reduce using rule 40 (condition -> .)
    DIVISION        reduce using rule 40 (condition -> .)
    $end            reduce using rule 40 (condition -> .)
    END             reduce using rule 40 (condition -> .)
    OPEN_PAREN      shift and go to state 42
    MORE            reduce using rule 53 (expression -> .)
    LESS            reduce using rule 53 (expression -> .)
    LOGIC_EQUAL     reduce using rule 53 (expression -> .)
    CONTINUE        shift and go to state 23
    BREAK           shift and go to state 24
    VARIABLE        shift and go to state 43
    FLOAT_DIGIT     shift and go to state 31
    INT_DIGIT       shift and go to state 32

  ! CONTINUE        [ reduce using rule 40 (condition -> .) ]
  ! BREAK           [ reduce using rule 40 (condition -> .) ]
  ! VARIABLE        [ reduce using rule 40 (condition -> .) ]
  ! OPEN_PAREN      [ reduce using rule 40 (condition -> .) ]
  ! FLOAT_DIGIT     [ reduce using rule 40 (condition -> .) ]
  ! INT_DIGIT       [ reduce using rule 40 (condition -> .) ]
  ! CONTINUE        [ reduce using rule 53 (expression -> .) ]
  ! BREAK           [ reduce using rule 53 (expression -> .) ]
  ! VARIABLE        [ reduce using rule 53 (expression -> .) ]
  ! FLOAT_DIGIT     [ reduce using rule 53 (expression -> .) ]
  ! INT_DIGIT       [ reduce using rule 53 (expression -> .) ]
  ! OPEN_PAREN      [ reduce using rule 53 (expression -> .) ]
  ! SUM             [ reduce using rule 53 (expression -> .) ]
  ! MINUS           [ reduce using rule 53 (expression -> .) ]
  ! MULTIPLY        [ reduce using rule 53 (expression -> .) ]
  ! DIVISION        [ reduce using rule 53 (expression -> .) ]
  ! BEGIN           [ reduce using rule 53 (expression -> .) ]
  ! FUNCTION        [ reduce using rule 53 (expression -> .) ]
  ! CYCLE           [ reduce using rule 53 (expression -> .) ]
  ! PRINT           [ reduce using rule 53 (expression -> .) ]
  ! IF              [ reduce using rule 53 (expression -> .) ]
  ! CALL            [ reduce using rule 53 (expression -> .) ]
  ! ELSE            [ reduce using rule 53 (expression -> .) ]
  ! COLON           [ reduce using rule 53 (expression -> .) ]
  ! SEMI_COLON      [ reduce using rule 53 (expression -> .) ]
  ! EQUAL           [ reduce using rule 53 (expression -> .) ]
  ! $end            [ reduce using rule 53 (expression -> .) ]
  ! END             [ reduce using rule 53 (expression -> .) ]
  ! SUM             [ reduce using rule 58 (term -> .) ]
  ! MINUS           [ reduce using rule 58 (term -> .) ]
  ! MULTIPLY        [ reduce using rule 61 (factor -> .) ]
  ! DIVISION        [ reduce using rule 61 (factor -> .) ]

    condition                      shift and go to state 48
    expression                     shift and go to state 41
    term                           shift and go to state 22
    factor                         shift and go to state 30

state 27

    (31) call -> CALL . NAME_FUNCTION variables

    NAME_FUNCTION   shift and go to state 49


state 28

    (14) variables -> VARIABLE .
    (15) variables -> VARIABLE . COMMA variables
    (62) factor -> VARIABLE .

    EQUAL           reduce using rule 14 (variables -> VARIABLE .)
    CLOSE_PAREN     reduce using rule 14 (variables -> VARIABLE .)
    COMMA           shift and go to state 50
    MULTIPLY        reduce using rule 62 (factor -> VARIABLE .)
    DIVISION        reduce using rule 62 (factor -> VARIABLE .)


state 29

    (16) variables -> OPEN_PAREN . variables CLOSE_PAREN
    (65) factor -> OPEN_PAREN . expression CLOSE_PAREN
    (13) variables -> .
    (14) variables -> . VARIABLE
    (15) variables -> . VARIABLE COMMA variables
    (16) variables -> . OPEN_PAREN variables CLOSE_PAREN
    (53) expression -> .
    (54) expression -> . term SUM term
    (55) expression -> . term MINUS term
    (56) expression -> . CONTINUE
    (57) expression -> . BREAK
    (58) term -> .
    (59) term -> . factor MULTIPLY factor
    (60) term -> . factor DIVISION factor
    (61) factor -> .
    (62) factor -> . VARIABLE
    (63) factor -> . FLOAT_DIGIT
    (64) factor -> . INT_DIGIT
    (65) factor -> . OPEN_PAREN expression CLOSE_PAREN

  ! reduce/reduce conflict for CLOSE_PAREN resolved using rule 13 (variables -> .)
    CLOSE_PAREN     reduce using rule 13 (variables -> .)
    VARIABLE        shift and go to state 28
    OPEN_PAREN      shift and go to state 29
    CONTINUE        shift and go to state 23
    BREAK           shift and go to state 24
    SUM             reduce using rule 58 (term -> .)
    MINUS           reduce using rule 58 (term -> .)
    MULTIPLY        reduce using rule 61 (factor -> .)
    DIVISION        reduce using rule 61 (factor -> .)
    FLOAT_DIGIT     shift and go to state 31
    INT_DIGIT       shift and go to state 32

  ! CLOSE_PAREN     [ reduce using rule 53 (expression -> .) ]

    variables                      shift and go to state 51
    expression                     shift and go to state 52
    term                           shift and go to state 22
    factor                         shift and go to state 30

state 30

    (59) term -> factor . MULTIPLY factor
    (60) term -> factor . DIVISION factor

    MULTIPLY        shift and go to state 53
    DIVISION        shift and go to state 54


state 31

    (63) factor -> FLOAT_DIGIT .

    MULTIPLY        reduce using rule 63 (factor -> FLOAT_DIGIT .)
    DIVISION        reduce using rule 63 (factor -> FLOAT_DIGIT .)
    SUM             reduce using rule 63 (factor -> FLOAT_DIGIT .)
    MINUS           reduce using rule 63 (factor -> FLOAT_DIGIT .)
    COLON           reduce using rule 63 (factor -> FLOAT_DIGIT .)
    SEMI_COLON      reduce using rule 63 (factor -> FLOAT_DIGIT .)
    $end            reduce using rule 63 (factor -> FLOAT_DIGIT .)
    FUNCTION        reduce using rule 63 (factor -> FLOAT_DIGIT .)
    CYCLE           reduce using rule 63 (factor -> FLOAT_DIGIT .)
    CONTINUE        reduce using rule 63 (factor -> FLOAT_DIGIT .)
    BREAK           reduce using rule 63 (factor -> FLOAT_DIGIT .)
    PRINT           reduce using rule 63 (factor -> FLOAT_DIGIT .)
    IF              reduce using rule 63 (factor -> FLOAT_DIGIT .)
    CALL            reduce using rule 63 (factor -> FLOAT_DIGIT .)
    VARIABLE        reduce using rule 63 (factor -> FLOAT_DIGIT .)
    OPEN_PAREN      reduce using rule 63 (factor -> FLOAT_DIGIT .)
    FLOAT_DIGIT     reduce using rule 63 (factor -> FLOAT_DIGIT .)
    INT_DIGIT       reduce using rule 63 (factor -> FLOAT_DIGIT .)
    END             reduce using rule 63 (factor -> FLOAT_DIGIT .)
    EQUAL           reduce using rule 63 (factor -> FLOAT_DIGIT .)
    MORE            reduce using rule 63 (factor -> FLOAT_DIGIT .)
    LESS            reduce using rule 63 (factor -> FLOAT_DIGIT .)
    LOGIC_EQUAL     reduce using rule 63 (factor -> FLOAT_DIGIT .)
    BEGIN           reduce using rule 63 (factor -> FLOAT_DIGIT .)
    ELSE            reduce using rule 63 (factor -> FLOAT_DIGIT .)
    CLOSE_PAREN     reduce using rule 63 (factor -> FLOAT_DIGIT .)


state 32

    (64) factor -> INT_DIGIT .

    MULTIPLY        reduce using rule 64 (factor -> INT_DIGIT .)
    DIVISION        reduce using rule 64 (factor -> INT_DIGIT .)
    SUM             reduce using rule 64 (factor -> INT_DIGIT .)
    MINUS           reduce using rule 64 (factor -> INT_DIGIT .)
    COLON           reduce using rule 64 (factor -> INT_DIGIT .)
    SEMI_COLON      reduce using rule 64 (factor -> INT_DIGIT .)
    $end            reduce using rule 64 (factor -> INT_DIGIT .)
    FUNCTION        reduce using rule 64 (factor -> INT_DIGIT .)
    CYCLE           reduce using rule 64 (factor -> INT_DIGIT .)
    CONTINUE        reduce using rule 64 (factor -> INT_DIGIT .)
    BREAK           reduce using rule 64 (factor -> INT_DIGIT .)
    PRINT           reduce using rule 64 (factor -> INT_DIGIT .)
    IF              reduce using rule 64 (factor -> INT_DIGIT .)
    CALL            reduce using rule 64 (factor -> INT_DIGIT .)
    VARIABLE        reduce using rule 64 (factor -> INT_DIGIT .)
    OPEN_PAREN      reduce using rule 64 (factor -> INT_DIGIT .)
    FLOAT_DIGIT     reduce using rule 64 (factor -> INT_DIGIT .)
    INT_DIGIT       reduce using rule 64 (factor -> INT_DIGIT .)
    END             reduce using rule 64 (factor -> INT_DIGIT .)
    EQUAL           reduce using rule 64 (factor -> INT_DIGIT .)
    MORE            reduce using rule 64 (factor -> INT_DIGIT .)
    LESS            reduce using rule 64 (factor -> INT_DIGIT .)
    LOGIC_EQUAL     reduce using rule 64 (factor -> INT_DIGIT .)
    BEGIN           reduce using rule 64 (factor -> INT_DIGIT .)
    ELSE            reduce using rule 64 (factor -> INT_DIGIT .)
    CLOSE_PAREN     reduce using rule 64 (factor -> INT_DIGIT .)


state 33

    (6) vars -> VAR vars variables . colons types colons
    (10) colons -> .
    (11) colons -> . COLON
    (12) colons -> . SEMI_COLON

  ! shift/reduce conflict for COLON resolved as shift
  ! shift/reduce conflict for SEMI_COLON resolved as shift
    INTEGER_TYPE    reduce using rule 10 (colons -> .)
    FLOAT_TYPE      reduce using rule 10 (colons -> .)
    BEGIN           reduce using rule 10 (colons -> .)
    FUNCTION        reduce using rule 10 (colons -> .)
    CYCLE           reduce using rule 10 (colons -> .)
    CONTINUE        reduce using rule 10 (colons -> .)
    BREAK           reduce using rule 10 (colons -> .)
    PRINT           reduce using rule 10 (colons -> .)
    IF              reduce using rule 10 (colons -> .)
    CALL            reduce using rule 10 (colons -> .)
    VARIABLE        reduce using rule 10 (colons -> .)
    OPEN_PAREN      reduce using rule 10 (colons -> .)
    FLOAT_DIGIT     reduce using rule 10 (colons -> .)
    INT_DIGIT       reduce using rule 10 (colons -> .)
    EQUAL           reduce using rule 10 (colons -> .)
    SUM             reduce using rule 10 (colons -> .)
    MINUS           reduce using rule 10 (colons -> .)
    MULTIPLY        reduce using rule 10 (colons -> .)
    DIVISION        reduce using rule 10 (colons -> .)
    $end            reduce using rule 10 (colons -> .)
    COLON           shift and go to state 6
    SEMI_COLON      shift and go to state 7

  ! COLON           [ reduce using rule 10 (colons -> .) ]
  ! SEMI_COLON      [ reduce using rule 10 (colons -> .) ]

    colons                         shift and go to state 55

state 34

    (14) variables -> VARIABLE .
    (15) variables -> VARIABLE . COMMA variables

    COLON           reduce using rule 14 (variables -> VARIABLE .)
    SEMI_COLON      reduce using rule 14 (variables -> VARIABLE .)
    INTEGER_TYPE    reduce using rule 14 (variables -> VARIABLE .)
    FLOAT_TYPE      reduce using rule 14 (variables -> VARIABLE .)
    BEGIN           reduce using rule 14 (variables -> VARIABLE .)
    FUNCTION        reduce using rule 14 (variables -> VARIABLE .)
    CYCLE           reduce using rule 14 (variables -> VARIABLE .)
    CONTINUE        reduce using rule 14 (variables -> VARIABLE .)
    BREAK           reduce using rule 14 (variables -> VARIABLE .)
    PRINT           reduce using rule 14 (variables -> VARIABLE .)
    IF              reduce using rule 14 (variables -> VARIABLE .)
    CALL            reduce using rule 14 (variables -> VARIABLE .)
    VARIABLE        reduce using rule 14 (variables -> VARIABLE .)
    OPEN_PAREN      reduce using rule 14 (variables -> VARIABLE .)
    FLOAT_DIGIT     reduce using rule 14 (variables -> VARIABLE .)
    INT_DIGIT       reduce using rule 14 (variables -> VARIABLE .)
    EQUAL           reduce using rule 14 (variables -> VARIABLE .)
    SUM             reduce using rule 14 (variables -> VARIABLE .)
    MINUS           reduce using rule 14 (variables -> VARIABLE .)
    MULTIPLY        reduce using rule 14 (variables -> VARIABLE .)
    DIVISION        reduce using rule 14 (variables -> VARIABLE .)
    $end            reduce using rule 14 (variables -> VARIABLE .)
    CLOSE_PAREN     reduce using rule 14 (variables -> VARIABLE .)
    END             reduce using rule 14 (variables -> VARIABLE .)
    ELSE            reduce using rule 14 (variables -> VARIABLE .)
    COMMA           shift and go to state 50


state 35

    (16) variables -> OPEN_PAREN . variables CLOSE_PAREN
    (13) variables -> .
    (14) variables -> . VARIABLE
    (15) variables -> . VARIABLE COMMA variables
    (16) variables -> . OPEN_PAREN variables CLOSE_PAREN

    CLOSE_PAREN     reduce using rule 13 (variables -> .)
    VARIABLE        shift and go to state 34
    OPEN_PAREN      shift and go to state 35

    variables                      shift and go to state 51

state 36

    (18) body -> BEGIN body . lines colons END
    (20) lines -> .
    (21) lines -> . function
    (22) lines -> . cycle
    (23) lines -> . assign
    (24) lines -> . expression
    (25) lines -> . print
    (26) lines -> . if
    (27) lines -> . call
    (32) function -> .
    (33) function -> . FUNCTION NAME_FUNCTION variables body
    (34) cycle -> .
    (35) cycle -> . CYCLE condition body
    (28) assign -> .
    (29) assign -> . variables EQUAL expression
    (53) expression -> .
    (54) expression -> . term SUM term
    (55) expression -> . term MINUS term
    (56) expression -> . CONTINUE
    (57) expression -> . BREAK
    (51) print -> .
    (52) print -> . PRINT expression
    (36) if -> .
    (37) if -> . IF condition body else body
    (30) call -> .
    (31) call -> . CALL NAME_FUNCTION variables
    (13) variables -> .
    (14) variables -> . VARIABLE
    (15) variables -> . VARIABLE COMMA variables
    (16) variables -> . OPEN_PAREN variables CLOSE_PAREN
    (58) term -> .
    (59) term -> . factor MULTIPLY factor
    (60) term -> . factor DIVISION factor
    (61) factor -> .
    (62) factor -> . VARIABLE
    (63) factor -> . FLOAT_DIGIT
    (64) factor -> . INT_DIGIT
    (65) factor -> . OPEN_PAREN expression CLOSE_PAREN

  ! reduce/reduce conflict for COLON resolved using rule 20 (lines -> .)
  ! reduce/reduce conflict for SEMI_COLON resolved using rule 20 (lines -> .)
  ! reduce/reduce conflict for END resolved using rule 20 (lines -> .)
  ! reduce/reduce conflict for COLON resolved using rule 20 (lines -> .)
  ! reduce/reduce conflict for SEMI_COLON resolved using rule 20 (lines -> .)
  ! reduce/reduce conflict for END resolved using rule 20 (lines -> .)
  ! reduce/reduce conflict for COLON resolved using rule 20 (lines -> .)
  ! reduce/reduce conflict for SEMI_COLON resolved using rule 20 (lines -> .)
  ! reduce/reduce conflict for END resolved using rule 20 (lines -> .)
  ! reduce/reduce conflict for COLON resolved using rule 20 (lines -> .)
  ! reduce/reduce conflict for SEMI_COLON resolved using rule 20 (lines -> .)
  ! reduce/reduce conflict for END resolved using rule 20 (lines -> .)
  ! reduce/reduce conflict for COLON resolved using rule 20 (lines -> .)
  ! reduce/reduce conflict for SEMI_COLON resolved using rule 20 (lines -> .)
  ! reduce/reduce conflict for END resolved using rule 20 (lines -> .)
  ! reduce/reduce conflict for COLON resolved using rule 20 (lines -> .)
  ! reduce/reduce conflict for SEMI_COLON resolved using rule 20 (lines -> .)
  ! reduce/reduce conflict for END resolved using rule 20 (lines -> .)
  ! reduce/reduce conflict for COLON resolved using rule 20 (lines -> .)
  ! reduce/reduce conflict for SEMI_COLON resolved using rule 20 (lines -> .)
  ! reduce/reduce conflict for END resolved using rule 20 (lines -> .)
    COLON           reduce using rule 20 (lines -> .)
    SEMI_COLON      reduce using rule 20 (lines -> .)
    END             reduce using rule 20 (lines -> .)
    FUNCTION        shift and go to state 19
    CYCLE           shift and go to state 21
    CONTINUE        shift and go to state 23
    BREAK           shift and go to state 24
    PRINT           shift and go to state 25
    IF              shift and go to state 26
    CALL            shift and go to state 27
    EQUAL           reduce using rule 13 (variables -> .)
    VARIABLE        shift and go to state 28
    OPEN_PAREN      shift and go to state 29
    SUM             reduce using rule 58 (term -> .)
    MINUS           reduce using rule 58 (term -> .)
    MULTIPLY        reduce using rule 61 (factor -> .)
    DIVISION        reduce using rule 61 (factor -> .)
    FLOAT_DIGIT     shift and go to state 31
    INT_DIGIT       shift and go to state 32

  ! COLON           [ reduce using rule 32 (function -> .) ]
  ! SEMI_COLON      [ reduce using rule 32 (function -> .) ]
  ! END             [ reduce using rule 32 (function -> .) ]
  ! COLON           [ reduce using rule 34 (cycle -> .) ]
  ! SEMI_COLON      [ reduce using rule 34 (cycle -> .) ]
  ! END             [ reduce using rule 34 (cycle -> .) ]
  ! COLON           [ reduce using rule 28 (assign -> .) ]
  ! SEMI_COLON      [ reduce using rule 28 (assign -> .) ]
  ! END             [ reduce using rule 28 (assign -> .) ]
  ! COLON           [ reduce using rule 53 (expression -> .) ]
  ! SEMI_COLON      [ reduce using rule 53 (expression -> .) ]
  ! END             [ reduce using rule 53 (expression -> .) ]
  ! COLON           [ reduce using rule 51 (print -> .) ]
  ! SEMI_COLON      [ reduce using rule 51 (print -> .) ]
  ! END             [ reduce using rule 51 (print -> .) ]
  ! COLON           [ reduce using rule 36 (if -> .) ]
  ! SEMI_COLON      [ reduce using rule 36 (if -> .) ]
  ! END             [ reduce using rule 36 (if -> .) ]
  ! COLON           [ reduce using rule 30 (call -> .) ]
  ! SEMI_COLON      [ reduce using rule 30 (call -> .) ]
  ! END             [ reduce using rule 30 (call -> .) ]

    lines                          shift and go to state 56
    function                       shift and go to state 12
    cycle                          shift and go to state 13
    assign                         shift and go to state 14
    expression                     shift and go to state 15
    print                          shift and go to state 16
    if                             shift and go to state 17
    call                           shift and go to state 18
    variables                      shift and go to state 20
    term                           shift and go to state 22
    factor                         shift and go to state 30

state 37

    (19) body -> lines colons .

    $end            reduce using rule 19 (body -> lines colons .)
    FUNCTION        reduce using rule 19 (body -> lines colons .)
    CYCLE           reduce using rule 19 (body -> lines colons .)
    CONTINUE        reduce using rule 19 (body -> lines colons .)
    BREAK           reduce using rule 19 (body -> lines colons .)
    PRINT           reduce using rule 19 (body -> lines colons .)
    IF              reduce using rule 19 (body -> lines colons .)
    CALL            reduce using rule 19 (body -> lines colons .)
    VARIABLE        reduce using rule 19 (body -> lines colons .)
    OPEN_PAREN      reduce using rule 19 (body -> lines colons .)
    FLOAT_DIGIT     reduce using rule 19 (body -> lines colons .)
    INT_DIGIT       reduce using rule 19 (body -> lines colons .)
    COLON           reduce using rule 19 (body -> lines colons .)
    SEMI_COLON      reduce using rule 19 (body -> lines colons .)
    END             reduce using rule 19 (body -> lines colons .)
    EQUAL           reduce using rule 19 (body -> lines colons .)
    SUM             reduce using rule 19 (body -> lines colons .)
    MINUS           reduce using rule 19 (body -> lines colons .)
    MULTIPLY        reduce using rule 19 (body -> lines colons .)
    DIVISION        reduce using rule 19 (body -> lines colons .)
    ELSE            reduce using rule 19 (body -> lines colons .)
    BEGIN           reduce using rule 19 (body -> lines colons .)


state 38

    (33) function -> FUNCTION NAME_FUNCTION . variables body
    (13) variables -> .
    (14) variables -> . VARIABLE
    (15) variables -> . VARIABLE COMMA variables
    (16) variables -> . OPEN_PAREN variables CLOSE_PAREN

  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for OPEN_PAREN resolved as shift
    BEGIN           reduce using rule 13 (variables -> .)
    FUNCTION        reduce using rule 13 (variables -> .)
    CYCLE           reduce using rule 13 (variables -> .)
    CONTINUE        reduce using rule 13 (variables -> .)
    BREAK           reduce using rule 13 (variables -> .)
    PRINT           reduce using rule 13 (variables -> .)
    IF              reduce using rule 13 (variables -> .)
    CALL            reduce using rule 13 (variables -> .)
    FLOAT_DIGIT     reduce using rule 13 (variables -> .)
    INT_DIGIT       reduce using rule 13 (variables -> .)
    COLON           reduce using rule 13 (variables -> .)
    SEMI_COLON      reduce using rule 13 (variables -> .)
    EQUAL           reduce using rule 13 (variables -> .)
    SUM             reduce using rule 13 (variables -> .)
    MINUS           reduce using rule 13 (variables -> .)
    MULTIPLY        reduce using rule 13 (variables -> .)
    DIVISION        reduce using rule 13 (variables -> .)
    $end            reduce using rule 13 (variables -> .)
    END             reduce using rule 13 (variables -> .)
    ELSE            reduce using rule 13 (variables -> .)
    VARIABLE        shift and go to state 34
    OPEN_PAREN      shift and go to state 35

  ! VARIABLE        [ reduce using rule 13 (variables -> .) ]
  ! OPEN_PAREN      [ reduce using rule 13 (variables -> .) ]

    variables                      shift and go to state 57

state 39

    (29) assign -> variables EQUAL . expression
    (53) expression -> .
    (54) expression -> . term SUM term
    (55) expression -> . term MINUS term
    (56) expression -> . CONTINUE
    (57) expression -> . BREAK
    (58) term -> .
    (59) term -> . factor MULTIPLY factor
    (60) term -> . factor DIVISION factor
    (61) factor -> .
    (62) factor -> . VARIABLE
    (63) factor -> . FLOAT_DIGIT
    (64) factor -> . INT_DIGIT
    (65) factor -> . OPEN_PAREN expression CLOSE_PAREN

  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! reduce/reduce conflict for SUM resolved using rule 53 (expression -> .)
  ! reduce/reduce conflict for MINUS resolved using rule 53 (expression -> .)
  ! reduce/reduce conflict for MULTIPLY resolved using rule 53 (expression -> .)
  ! reduce/reduce conflict for DIVISION resolved using rule 53 (expression -> .)
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for FLOAT_DIGIT resolved as shift
  ! shift/reduce conflict for INT_DIGIT resolved as shift
  ! shift/reduce conflict for OPEN_PAREN resolved as shift
    COLON           reduce using rule 53 (expression -> .)
    SEMI_COLON      reduce using rule 53 (expression -> .)
    $end            reduce using rule 53 (expression -> .)
    FUNCTION        reduce using rule 53 (expression -> .)
    CYCLE           reduce using rule 53 (expression -> .)
    PRINT           reduce using rule 53 (expression -> .)
    IF              reduce using rule 53 (expression -> .)
    CALL            reduce using rule 53 (expression -> .)
    END             reduce using rule 53 (expression -> .)
    EQUAL           reduce using rule 53 (expression -> .)
    SUM             reduce using rule 53 (expression -> .)
    MINUS           reduce using rule 53 (expression -> .)
    MULTIPLY        reduce using rule 53 (expression -> .)
    DIVISION        reduce using rule 53 (expression -> .)
    ELSE            reduce using rule 53 (expression -> .)
    BEGIN           reduce using rule 53 (expression -> .)
    CONTINUE        shift and go to state 23
    BREAK           shift and go to state 24
    VARIABLE        shift and go to state 43
    FLOAT_DIGIT     shift and go to state 31
    INT_DIGIT       shift and go to state 32
    OPEN_PAREN      shift and go to state 47

  ! CONTINUE        [ reduce using rule 53 (expression -> .) ]
  ! BREAK           [ reduce using rule 53 (expression -> .) ]
  ! VARIABLE        [ reduce using rule 53 (expression -> .) ]
  ! OPEN_PAREN      [ reduce using rule 53 (expression -> .) ]
  ! FLOAT_DIGIT     [ reduce using rule 53 (expression -> .) ]
  ! INT_DIGIT       [ reduce using rule 53 (expression -> .) ]
  ! SUM             [ reduce using rule 58 (term -> .) ]
  ! MINUS           [ reduce using rule 58 (term -> .) ]
  ! MULTIPLY        [ reduce using rule 61 (factor -> .) ]
  ! DIVISION        [ reduce using rule 61 (factor -> .) ]

    expression                     shift and go to state 58
    term                           shift and go to state 22
    factor                         shift and go to state 30

state 40

    (35) cycle -> CYCLE condition . body
    (17) body -> .
    (18) body -> . BEGIN body lines colons END
    (19) body -> . lines colons
    (20) lines -> .
    (21) lines -> . function
    (22) lines -> . cycle
    (23) lines -> . assign
    (24) lines -> . expression
    (25) lines -> . print
    (26) lines -> . if
    (27) lines -> . call
    (32) function -> .
    (33) function -> . FUNCTION NAME_FUNCTION variables body
    (34) cycle -> .
    (35) cycle -> . CYCLE condition body
    (28) assign -> .
    (29) assign -> . variables EQUAL expression
    (53) expression -> .
    (54) expression -> . term SUM term
    (55) expression -> . term MINUS term
    (56) expression -> . CONTINUE
    (57) expression -> . BREAK
    (51) print -> .
    (52) print -> . PRINT expression
    (36) if -> .
    (37) if -> . IF condition body else body
    (30) call -> .
    (31) call -> . CALL NAME_FUNCTION variables
    (13) variables -> .
    (14) variables -> . VARIABLE
    (15) variables -> . VARIABLE COMMA variables
    (16) variables -> . OPEN_PAREN variables CLOSE_PAREN
    (58) term -> .
    (59) term -> . factor MULTIPLY factor
    (60) term -> . factor DIVISION factor
    (61) factor -> .
    (62) factor -> . VARIABLE
    (63) factor -> . FLOAT_DIGIT
    (64) factor -> . INT_DIGIT
    (65) factor -> . OPEN_PAREN expression CLOSE_PAREN

  ! shift/reduce conflict for BEGIN resolved as shift
  ! reduce/reduce conflict for COLON resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for SEMI_COLON resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for $end resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for CYCLE resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for BREAK resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for PRINT resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for IF resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for CALL resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for OPEN_PAREN resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for FLOAT_DIGIT resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for INT_DIGIT resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for END resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for EQUAL resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for SUM resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for MINUS resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for MULTIPLY resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for DIVISION resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for ELSE resolved using rule 17 (body -> .)
  ! shift/reduce conflict for BEGIN resolved as shift
  ! reduce/reduce conflict for COLON resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for SEMI_COLON resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for $end resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for CYCLE resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for BREAK resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for PRINT resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for IF resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for CALL resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for OPEN_PAREN resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for FLOAT_DIGIT resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for INT_DIGIT resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for END resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for EQUAL resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for SUM resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for MINUS resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for MULTIPLY resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for DIVISION resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for ELSE resolved using rule 17 (body -> .)
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! reduce/reduce conflict for COLON resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for SEMI_COLON resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for $end resolved using rule 17 (body -> .)
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! reduce/reduce conflict for CYCLE resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for BREAK resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for PRINT resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for IF resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for CALL resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for OPEN_PAREN resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for FLOAT_DIGIT resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for INT_DIGIT resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for END resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for EQUAL resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for SUM resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for MINUS resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for MULTIPLY resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for DIVISION resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for ELSE resolved using rule 17 (body -> .)
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for CYCLE resolved as shift
  ! reduce/reduce conflict for COLON resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for SEMI_COLON resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for $end resolved using rule 17 (body -> .)
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for CYCLE resolved as shift
  ! reduce/reduce conflict for CONTINUE resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for BREAK resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for PRINT resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for IF resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for CALL resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for OPEN_PAREN resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for FLOAT_DIGIT resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for INT_DIGIT resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for END resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for EQUAL resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for SUM resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for MINUS resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for MULTIPLY resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for DIVISION resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for ELSE resolved using rule 17 (body -> .)
  ! shift/reduce conflict for BEGIN resolved as shift
  ! reduce/reduce conflict for COLON resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for SEMI_COLON resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for $end resolved using rule 17 (body -> .)
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for CYCLE resolved as shift
  ! reduce/reduce conflict for CONTINUE resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for BREAK resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for PRINT resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for IF resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for CALL resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for OPEN_PAREN resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for FLOAT_DIGIT resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for INT_DIGIT resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for END resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for EQUAL resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for SUM resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for MINUS resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for MULTIPLY resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for DIVISION resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for ELSE resolved using rule 17 (body -> .)
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! reduce/reduce conflict for COLON resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for SEMI_COLON resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for $end resolved using rule 17 (body -> .)
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for CYCLE resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! reduce/reduce conflict for PRINT resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for IF resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for CALL resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for OPEN_PAREN resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for FLOAT_DIGIT resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for INT_DIGIT resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for END resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for EQUAL resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for SUM resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for MINUS resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for MULTIPLY resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for DIVISION resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for ELSE resolved using rule 17 (body -> .)
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! reduce/reduce conflict for COLON resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for SEMI_COLON resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for $end resolved using rule 17 (body -> .)
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for CYCLE resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! reduce/reduce conflict for IF resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for CALL resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for OPEN_PAREN resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for FLOAT_DIGIT resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for INT_DIGIT resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for END resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for EQUAL resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for SUM resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for MINUS resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for MULTIPLY resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for DIVISION resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for ELSE resolved using rule 17 (body -> .)
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! reduce/reduce conflict for COLON resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for SEMI_COLON resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for $end resolved using rule 17 (body -> .)
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for CYCLE resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! reduce/reduce conflict for CALL resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for OPEN_PAREN resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for FLOAT_DIGIT resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for INT_DIGIT resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for END resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for EQUAL resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for SUM resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for MINUS resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for MULTIPLY resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for DIVISION resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for ELSE resolved using rule 17 (body -> .)
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for CALL resolved as shift
  ! reduce/reduce conflict for EQUAL resolved using rule 13 (variables -> .)
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for OPEN_PAREN resolved as shift
  ! reduce/reduce conflict for SUM resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for MINUS resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for MULTIPLY resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for DIVISION resolved using rule 17 (body -> .)
  ! shift/reduce conflict for FLOAT_DIGIT resolved as shift
  ! shift/reduce conflict for INT_DIGIT resolved as shift
    COLON           reduce using rule 17 (body -> .)
    SEMI_COLON      reduce using rule 17 (body -> .)
    $end            reduce using rule 17 (body -> .)
    END             reduce using rule 17 (body -> .)
    SUM             reduce using rule 17 (body -> .)
    MINUS           reduce using rule 17 (body -> .)
    MULTIPLY        reduce using rule 17 (body -> .)
    DIVISION        reduce using rule 17 (body -> .)
    ELSE            reduce using rule 17 (body -> .)
    BEGIN           shift and go to state 10
    FUNCTION        shift and go to state 19
    CYCLE           shift and go to state 21
    CONTINUE        shift and go to state 23
    BREAK           shift and go to state 24
    PRINT           shift and go to state 25
    IF              shift and go to state 26
    CALL            shift and go to state 27
    EQUAL           reduce using rule 13 (variables -> .)
    VARIABLE        shift and go to state 28
    OPEN_PAREN      shift and go to state 29
    FLOAT_DIGIT     shift and go to state 31
    INT_DIGIT       shift and go to state 32

  ! FUNCTION        [ reduce using rule 17 (body -> .) ]
  ! CYCLE           [ reduce using rule 17 (body -> .) ]
  ! CONTINUE        [ reduce using rule 17 (body -> .) ]
  ! BREAK           [ reduce using rule 17 (body -> .) ]
  ! PRINT           [ reduce using rule 17 (body -> .) ]
  ! IF              [ reduce using rule 17 (body -> .) ]
  ! CALL            [ reduce using rule 17 (body -> .) ]
  ! VARIABLE        [ reduce using rule 17 (body -> .) ]
  ! OPEN_PAREN      [ reduce using rule 17 (body -> .) ]
  ! FLOAT_DIGIT     [ reduce using rule 17 (body -> .) ]
  ! INT_DIGIT       [ reduce using rule 17 (body -> .) ]
  ! EQUAL           [ reduce using rule 17 (body -> .) ]
  ! BEGIN           [ reduce using rule 17 (body -> .) ]
  ! COLON           [ reduce using rule 20 (lines -> .) ]
  ! SEMI_COLON      [ reduce using rule 20 (lines -> .) ]
  ! $end            [ reduce using rule 20 (lines -> .) ]
  ! FUNCTION        [ reduce using rule 20 (lines -> .) ]
  ! CYCLE           [ reduce using rule 20 (lines -> .) ]
  ! CONTINUE        [ reduce using rule 20 (lines -> .) ]
  ! BREAK           [ reduce using rule 20 (lines -> .) ]
  ! PRINT           [ reduce using rule 20 (lines -> .) ]
  ! IF              [ reduce using rule 20 (lines -> .) ]
  ! CALL            [ reduce using rule 20 (lines -> .) ]
  ! VARIABLE        [ reduce using rule 20 (lines -> .) ]
  ! OPEN_PAREN      [ reduce using rule 20 (lines -> .) ]
  ! FLOAT_DIGIT     [ reduce using rule 20 (lines -> .) ]
  ! INT_DIGIT       [ reduce using rule 20 (lines -> .) ]
  ! END             [ reduce using rule 20 (lines -> .) ]
  ! EQUAL           [ reduce using rule 20 (lines -> .) ]
  ! SUM             [ reduce using rule 20 (lines -> .) ]
  ! MINUS           [ reduce using rule 20 (lines -> .) ]
  ! MULTIPLY        [ reduce using rule 20 (lines -> .) ]
  ! DIVISION        [ reduce using rule 20 (lines -> .) ]
  ! ELSE            [ reduce using rule 20 (lines -> .) ]
  ! BEGIN           [ reduce using rule 20 (lines -> .) ]
  ! COLON           [ reduce using rule 32 (function -> .) ]
  ! SEMI_COLON      [ reduce using rule 32 (function -> .) ]
  ! $end            [ reduce using rule 32 (function -> .) ]
  ! FUNCTION        [ reduce using rule 32 (function -> .) ]
  ! CYCLE           [ reduce using rule 32 (function -> .) ]
  ! CONTINUE        [ reduce using rule 32 (function -> .) ]
  ! BREAK           [ reduce using rule 32 (function -> .) ]
  ! PRINT           [ reduce using rule 32 (function -> .) ]
  ! IF              [ reduce using rule 32 (function -> .) ]
  ! CALL            [ reduce using rule 32 (function -> .) ]
  ! VARIABLE        [ reduce using rule 32 (function -> .) ]
  ! OPEN_PAREN      [ reduce using rule 32 (function -> .) ]
  ! FLOAT_DIGIT     [ reduce using rule 32 (function -> .) ]
  ! INT_DIGIT       [ reduce using rule 32 (function -> .) ]
  ! END             [ reduce using rule 32 (function -> .) ]
  ! EQUAL           [ reduce using rule 32 (function -> .) ]
  ! SUM             [ reduce using rule 32 (function -> .) ]
  ! MINUS           [ reduce using rule 32 (function -> .) ]
  ! MULTIPLY        [ reduce using rule 32 (function -> .) ]
  ! DIVISION        [ reduce using rule 32 (function -> .) ]
  ! ELSE            [ reduce using rule 32 (function -> .) ]
  ! BEGIN           [ reduce using rule 32 (function -> .) ]
  ! COLON           [ reduce using rule 34 (cycle -> .) ]
  ! SEMI_COLON      [ reduce using rule 34 (cycle -> .) ]
  ! $end            [ reduce using rule 34 (cycle -> .) ]
  ! FUNCTION        [ reduce using rule 34 (cycle -> .) ]
  ! CYCLE           [ reduce using rule 34 (cycle -> .) ]
  ! CONTINUE        [ reduce using rule 34 (cycle -> .) ]
  ! BREAK           [ reduce using rule 34 (cycle -> .) ]
  ! PRINT           [ reduce using rule 34 (cycle -> .) ]
  ! IF              [ reduce using rule 34 (cycle -> .) ]
  ! CALL            [ reduce using rule 34 (cycle -> .) ]
  ! VARIABLE        [ reduce using rule 34 (cycle -> .) ]
  ! OPEN_PAREN      [ reduce using rule 34 (cycle -> .) ]
  ! FLOAT_DIGIT     [ reduce using rule 34 (cycle -> .) ]
  ! INT_DIGIT       [ reduce using rule 34 (cycle -> .) ]
  ! END             [ reduce using rule 34 (cycle -> .) ]
  ! EQUAL           [ reduce using rule 34 (cycle -> .) ]
  ! SUM             [ reduce using rule 34 (cycle -> .) ]
  ! MINUS           [ reduce using rule 34 (cycle -> .) ]
  ! MULTIPLY        [ reduce using rule 34 (cycle -> .) ]
  ! DIVISION        [ reduce using rule 34 (cycle -> .) ]
  ! ELSE            [ reduce using rule 34 (cycle -> .) ]
  ! BEGIN           [ reduce using rule 34 (cycle -> .) ]
  ! COLON           [ reduce using rule 28 (assign -> .) ]
  ! SEMI_COLON      [ reduce using rule 28 (assign -> .) ]
  ! $end            [ reduce using rule 28 (assign -> .) ]
  ! FUNCTION        [ reduce using rule 28 (assign -> .) ]
  ! CYCLE           [ reduce using rule 28 (assign -> .) ]
  ! CONTINUE        [ reduce using rule 28 (assign -> .) ]
  ! BREAK           [ reduce using rule 28 (assign -> .) ]
  ! PRINT           [ reduce using rule 28 (assign -> .) ]
  ! IF              [ reduce using rule 28 (assign -> .) ]
  ! CALL            [ reduce using rule 28 (assign -> .) ]
  ! VARIABLE        [ reduce using rule 28 (assign -> .) ]
  ! OPEN_PAREN      [ reduce using rule 28 (assign -> .) ]
  ! FLOAT_DIGIT     [ reduce using rule 28 (assign -> .) ]
  ! INT_DIGIT       [ reduce using rule 28 (assign -> .) ]
  ! END             [ reduce using rule 28 (assign -> .) ]
  ! EQUAL           [ reduce using rule 28 (assign -> .) ]
  ! SUM             [ reduce using rule 28 (assign -> .) ]
  ! MINUS           [ reduce using rule 28 (assign -> .) ]
  ! MULTIPLY        [ reduce using rule 28 (assign -> .) ]
  ! DIVISION        [ reduce using rule 28 (assign -> .) ]
  ! ELSE            [ reduce using rule 28 (assign -> .) ]
  ! BEGIN           [ reduce using rule 28 (assign -> .) ]
  ! COLON           [ reduce using rule 53 (expression -> .) ]
  ! SEMI_COLON      [ reduce using rule 53 (expression -> .) ]
  ! $end            [ reduce using rule 53 (expression -> .) ]
  ! FUNCTION        [ reduce using rule 53 (expression -> .) ]
  ! CYCLE           [ reduce using rule 53 (expression -> .) ]
  ! CONTINUE        [ reduce using rule 53 (expression -> .) ]
  ! BREAK           [ reduce using rule 53 (expression -> .) ]
  ! PRINT           [ reduce using rule 53 (expression -> .) ]
  ! IF              [ reduce using rule 53 (expression -> .) ]
  ! CALL            [ reduce using rule 53 (expression -> .) ]
  ! VARIABLE        [ reduce using rule 53 (expression -> .) ]
  ! OPEN_PAREN      [ reduce using rule 53 (expression -> .) ]
  ! FLOAT_DIGIT     [ reduce using rule 53 (expression -> .) ]
  ! INT_DIGIT       [ reduce using rule 53 (expression -> .) ]
  ! END             [ reduce using rule 53 (expression -> .) ]
  ! EQUAL           [ reduce using rule 53 (expression -> .) ]
  ! SUM             [ reduce using rule 53 (expression -> .) ]
  ! MINUS           [ reduce using rule 53 (expression -> .) ]
  ! MULTIPLY        [ reduce using rule 53 (expression -> .) ]
  ! DIVISION        [ reduce using rule 53 (expression -> .) ]
  ! ELSE            [ reduce using rule 53 (expression -> .) ]
  ! BEGIN           [ reduce using rule 53 (expression -> .) ]
  ! COLON           [ reduce using rule 51 (print -> .) ]
  ! SEMI_COLON      [ reduce using rule 51 (print -> .) ]
  ! $end            [ reduce using rule 51 (print -> .) ]
  ! FUNCTION        [ reduce using rule 51 (print -> .) ]
  ! CYCLE           [ reduce using rule 51 (print -> .) ]
  ! CONTINUE        [ reduce using rule 51 (print -> .) ]
  ! BREAK           [ reduce using rule 51 (print -> .) ]
  ! PRINT           [ reduce using rule 51 (print -> .) ]
  ! IF              [ reduce using rule 51 (print -> .) ]
  ! CALL            [ reduce using rule 51 (print -> .) ]
  ! VARIABLE        [ reduce using rule 51 (print -> .) ]
  ! OPEN_PAREN      [ reduce using rule 51 (print -> .) ]
  ! FLOAT_DIGIT     [ reduce using rule 51 (print -> .) ]
  ! INT_DIGIT       [ reduce using rule 51 (print -> .) ]
  ! END             [ reduce using rule 51 (print -> .) ]
  ! EQUAL           [ reduce using rule 51 (print -> .) ]
  ! SUM             [ reduce using rule 51 (print -> .) ]
  ! MINUS           [ reduce using rule 51 (print -> .) ]
  ! MULTIPLY        [ reduce using rule 51 (print -> .) ]
  ! DIVISION        [ reduce using rule 51 (print -> .) ]
  ! ELSE            [ reduce using rule 51 (print -> .) ]
  ! BEGIN           [ reduce using rule 51 (print -> .) ]
  ! COLON           [ reduce using rule 36 (if -> .) ]
  ! SEMI_COLON      [ reduce using rule 36 (if -> .) ]
  ! $end            [ reduce using rule 36 (if -> .) ]
  ! FUNCTION        [ reduce using rule 36 (if -> .) ]
  ! CYCLE           [ reduce using rule 36 (if -> .) ]
  ! CONTINUE        [ reduce using rule 36 (if -> .) ]
  ! BREAK           [ reduce using rule 36 (if -> .) ]
  ! PRINT           [ reduce using rule 36 (if -> .) ]
  ! IF              [ reduce using rule 36 (if -> .) ]
  ! CALL            [ reduce using rule 36 (if -> .) ]
  ! VARIABLE        [ reduce using rule 36 (if -> .) ]
  ! OPEN_PAREN      [ reduce using rule 36 (if -> .) ]
  ! FLOAT_DIGIT     [ reduce using rule 36 (if -> .) ]
  ! INT_DIGIT       [ reduce using rule 36 (if -> .) ]
  ! END             [ reduce using rule 36 (if -> .) ]
  ! EQUAL           [ reduce using rule 36 (if -> .) ]
  ! SUM             [ reduce using rule 36 (if -> .) ]
  ! MINUS           [ reduce using rule 36 (if -> .) ]
  ! MULTIPLY        [ reduce using rule 36 (if -> .) ]
  ! DIVISION        [ reduce using rule 36 (if -> .) ]
  ! ELSE            [ reduce using rule 36 (if -> .) ]
  ! BEGIN           [ reduce using rule 36 (if -> .) ]
  ! COLON           [ reduce using rule 30 (call -> .) ]
  ! SEMI_COLON      [ reduce using rule 30 (call -> .) ]
  ! $end            [ reduce using rule 30 (call -> .) ]
  ! FUNCTION        [ reduce using rule 30 (call -> .) ]
  ! CYCLE           [ reduce using rule 30 (call -> .) ]
  ! CONTINUE        [ reduce using rule 30 (call -> .) ]
  ! BREAK           [ reduce using rule 30 (call -> .) ]
  ! PRINT           [ reduce using rule 30 (call -> .) ]
  ! IF              [ reduce using rule 30 (call -> .) ]
  ! CALL            [ reduce using rule 30 (call -> .) ]
  ! VARIABLE        [ reduce using rule 30 (call -> .) ]
  ! OPEN_PAREN      [ reduce using rule 30 (call -> .) ]
  ! FLOAT_DIGIT     [ reduce using rule 30 (call -> .) ]
  ! INT_DIGIT       [ reduce using rule 30 (call -> .) ]
  ! END             [ reduce using rule 30 (call -> .) ]
  ! EQUAL           [ reduce using rule 30 (call -> .) ]
  ! SUM             [ reduce using rule 30 (call -> .) ]
  ! MINUS           [ reduce using rule 30 (call -> .) ]
  ! MULTIPLY        [ reduce using rule 30 (call -> .) ]
  ! DIVISION        [ reduce using rule 30 (call -> .) ]
  ! ELSE            [ reduce using rule 30 (call -> .) ]
  ! BEGIN           [ reduce using rule 30 (call -> .) ]
  ! SUM             [ reduce using rule 58 (term -> .) ]
  ! MINUS           [ reduce using rule 58 (term -> .) ]
  ! MULTIPLY        [ reduce using rule 61 (factor -> .) ]
  ! DIVISION        [ reduce using rule 61 (factor -> .) ]

    body                           shift and go to state 59
    lines                          shift and go to state 11
    function                       shift and go to state 12
    cycle                          shift and go to state 13
    assign                         shift and go to state 14
    expression                     shift and go to state 15
    print                          shift and go to state 16
    if                             shift and go to state 17
    call                           shift and go to state 18
    variables                      shift and go to state 20
    term                           shift and go to state 22
    factor                         shift and go to state 30

state 41

    (41) condition -> expression . comparison expression
    (47) comparison -> .
    (48) comparison -> . MORE
    (49) comparison -> . LESS
    (50) comparison -> . LOGIC_EQUAL

    CONTINUE        reduce using rule 47 (comparison -> .)
    BREAK           reduce using rule 47 (comparison -> .)
    VARIABLE        reduce using rule 47 (comparison -> .)
    FLOAT_DIGIT     reduce using rule 47 (comparison -> .)
    INT_DIGIT       reduce using rule 47 (comparison -> .)
    OPEN_PAREN      reduce using rule 47 (comparison -> .)
    SUM             reduce using rule 47 (comparison -> .)
    MINUS           reduce using rule 47 (comparison -> .)
    MULTIPLY        reduce using rule 47 (comparison -> .)
    DIVISION        reduce using rule 47 (comparison -> .)
    BEGIN           reduce using rule 47 (comparison -> .)
    FUNCTION        reduce using rule 47 (comparison -> .)
    CYCLE           reduce using rule 47 (comparison -> .)
    PRINT           reduce using rule 47 (comparison -> .)
    IF              reduce using rule 47 (comparison -> .)
    CALL            reduce using rule 47 (comparison -> .)
    COLON           reduce using rule 47 (comparison -> .)
    SEMI_COLON      reduce using rule 47 (comparison -> .)
    EQUAL           reduce using rule 47 (comparison -> .)
    $end            reduce using rule 47 (comparison -> .)
    END             reduce using rule 47 (comparison -> .)
    ELSE            reduce using rule 47 (comparison -> .)
    MORE            shift and go to state 61
    LESS            shift and go to state 62
    LOGIC_EQUAL     shift and go to state 63

    comparison                     shift and go to state 60

state 42

    (42) condition -> OPEN_PAREN . condition CLOSE_PAREN logic_op
    (65) factor -> OPEN_PAREN . expression CLOSE_PAREN
    (40) condition -> .
    (41) condition -> . expression comparison expression
    (42) condition -> . OPEN_PAREN condition CLOSE_PAREN logic_op
    (53) expression -> .
    (54) expression -> . term SUM term
    (55) expression -> . term MINUS term
    (56) expression -> . CONTINUE
    (57) expression -> . BREAK
    (58) term -> .
    (59) term -> . factor MULTIPLY factor
    (60) term -> . factor DIVISION factor
    (61) factor -> .
    (62) factor -> . VARIABLE
    (63) factor -> . FLOAT_DIGIT
    (64) factor -> . INT_DIGIT
    (65) factor -> . OPEN_PAREN expression CLOSE_PAREN

  ! reduce/reduce conflict for CLOSE_PAREN resolved using rule 40 (condition -> .)
  ! shift/reduce conflict for OPEN_PAREN resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! reduce/reduce conflict for SUM resolved using rule 53 (expression -> .)
  ! reduce/reduce conflict for MINUS resolved using rule 53 (expression -> .)
  ! reduce/reduce conflict for MULTIPLY resolved using rule 53 (expression -> .)
  ! reduce/reduce conflict for DIVISION resolved using rule 53 (expression -> .)
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for FLOAT_DIGIT resolved as shift
  ! shift/reduce conflict for INT_DIGIT resolved as shift
    CLOSE_PAREN     reduce using rule 40 (condition -> .)
    OPEN_PAREN      shift and go to state 42
    MORE            reduce using rule 53 (expression -> .)
    LESS            reduce using rule 53 (expression -> .)
    LOGIC_EQUAL     reduce using rule 53 (expression -> .)
    SUM             reduce using rule 53 (expression -> .)
    MINUS           reduce using rule 53 (expression -> .)
    MULTIPLY        reduce using rule 53 (expression -> .)
    DIVISION        reduce using rule 53 (expression -> .)
    CONTINUE        shift and go to state 23
    BREAK           shift and go to state 24
    VARIABLE        shift and go to state 43
    FLOAT_DIGIT     shift and go to state 31
    INT_DIGIT       shift and go to state 32

  ! CLOSE_PAREN     [ reduce using rule 53 (expression -> .) ]
  ! CONTINUE        [ reduce using rule 53 (expression -> .) ]
  ! BREAK           [ reduce using rule 53 (expression -> .) ]
  ! VARIABLE        [ reduce using rule 53 (expression -> .) ]
  ! FLOAT_DIGIT     [ reduce using rule 53 (expression -> .) ]
  ! INT_DIGIT       [ reduce using rule 53 (expression -> .) ]
  ! OPEN_PAREN      [ reduce using rule 53 (expression -> .) ]
  ! SUM             [ reduce using rule 58 (term -> .) ]
  ! MINUS           [ reduce using rule 58 (term -> .) ]
  ! MULTIPLY        [ reduce using rule 61 (factor -> .) ]
  ! DIVISION        [ reduce using rule 61 (factor -> .) ]

    condition                      shift and go to state 64
    expression                     shift and go to state 65
    term                           shift and go to state 22
    factor                         shift and go to state 30

state 43

    (62) factor -> VARIABLE .

    MULTIPLY        reduce using rule 62 (factor -> VARIABLE .)
    DIVISION        reduce using rule 62 (factor -> VARIABLE .)
    SUM             reduce using rule 62 (factor -> VARIABLE .)
    MINUS           reduce using rule 62 (factor -> VARIABLE .)
    COLON           reduce using rule 62 (factor -> VARIABLE .)
    SEMI_COLON      reduce using rule 62 (factor -> VARIABLE .)
    $end            reduce using rule 62 (factor -> VARIABLE .)
    FUNCTION        reduce using rule 62 (factor -> VARIABLE .)
    CYCLE           reduce using rule 62 (factor -> VARIABLE .)
    CONTINUE        reduce using rule 62 (factor -> VARIABLE .)
    BREAK           reduce using rule 62 (factor -> VARIABLE .)
    PRINT           reduce using rule 62 (factor -> VARIABLE .)
    IF              reduce using rule 62 (factor -> VARIABLE .)
    CALL            reduce using rule 62 (factor -> VARIABLE .)
    VARIABLE        reduce using rule 62 (factor -> VARIABLE .)
    OPEN_PAREN      reduce using rule 62 (factor -> VARIABLE .)
    FLOAT_DIGIT     reduce using rule 62 (factor -> VARIABLE .)
    INT_DIGIT       reduce using rule 62 (factor -> VARIABLE .)
    END             reduce using rule 62 (factor -> VARIABLE .)
    EQUAL           reduce using rule 62 (factor -> VARIABLE .)
    MORE            reduce using rule 62 (factor -> VARIABLE .)
    LESS            reduce using rule 62 (factor -> VARIABLE .)
    LOGIC_EQUAL     reduce using rule 62 (factor -> VARIABLE .)
    BEGIN           reduce using rule 62 (factor -> VARIABLE .)
    ELSE            reduce using rule 62 (factor -> VARIABLE .)
    CLOSE_PAREN     reduce using rule 62 (factor -> VARIABLE .)


state 44

    (54) expression -> term SUM . term
    (58) term -> .
    (59) term -> . factor MULTIPLY factor
    (60) term -> . factor DIVISION factor
    (61) factor -> .
    (62) factor -> . VARIABLE
    (63) factor -> . FLOAT_DIGIT
    (64) factor -> . INT_DIGIT
    (65) factor -> . OPEN_PAREN expression CLOSE_PAREN

  ! reduce/reduce conflict for MULTIPLY resolved using rule 58 (term -> .)
  ! reduce/reduce conflict for DIVISION resolved using rule 58 (term -> .)
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for FLOAT_DIGIT resolved as shift
  ! shift/reduce conflict for INT_DIGIT resolved as shift
  ! shift/reduce conflict for OPEN_PAREN resolved as shift
    COLON           reduce using rule 58 (term -> .)
    SEMI_COLON      reduce using rule 58 (term -> .)
    $end            reduce using rule 58 (term -> .)
    FUNCTION        reduce using rule 58 (term -> .)
    CYCLE           reduce using rule 58 (term -> .)
    CONTINUE        reduce using rule 58 (term -> .)
    BREAK           reduce using rule 58 (term -> .)
    PRINT           reduce using rule 58 (term -> .)
    IF              reduce using rule 58 (term -> .)
    CALL            reduce using rule 58 (term -> .)
    END             reduce using rule 58 (term -> .)
    EQUAL           reduce using rule 58 (term -> .)
    SUM             reduce using rule 58 (term -> .)
    MINUS           reduce using rule 58 (term -> .)
    MULTIPLY        reduce using rule 58 (term -> .)
    DIVISION        reduce using rule 58 (term -> .)
    MORE            reduce using rule 58 (term -> .)
    LESS            reduce using rule 58 (term -> .)
    LOGIC_EQUAL     reduce using rule 58 (term -> .)
    BEGIN           reduce using rule 58 (term -> .)
    ELSE            reduce using rule 58 (term -> .)
    CLOSE_PAREN     reduce using rule 58 (term -> .)
    VARIABLE        shift and go to state 43
    FLOAT_DIGIT     shift and go to state 31
    INT_DIGIT       shift and go to state 32
    OPEN_PAREN      shift and go to state 47

  ! VARIABLE        [ reduce using rule 58 (term -> .) ]
  ! OPEN_PAREN      [ reduce using rule 58 (term -> .) ]
  ! FLOAT_DIGIT     [ reduce using rule 58 (term -> .) ]
  ! INT_DIGIT       [ reduce using rule 58 (term -> .) ]
  ! MULTIPLY        [ reduce using rule 61 (factor -> .) ]
  ! DIVISION        [ reduce using rule 61 (factor -> .) ]

    term                           shift and go to state 66
    factor                         shift and go to state 30

state 45

    (55) expression -> term MINUS . term
    (58) term -> .
    (59) term -> . factor MULTIPLY factor
    (60) term -> . factor DIVISION factor
    (61) factor -> .
    (62) factor -> . VARIABLE
    (63) factor -> . FLOAT_DIGIT
    (64) factor -> . INT_DIGIT
    (65) factor -> . OPEN_PAREN expression CLOSE_PAREN

  ! reduce/reduce conflict for MULTIPLY resolved using rule 58 (term -> .)
  ! reduce/reduce conflict for DIVISION resolved using rule 58 (term -> .)
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for FLOAT_DIGIT resolved as shift
  ! shift/reduce conflict for INT_DIGIT resolved as shift
  ! shift/reduce conflict for OPEN_PAREN resolved as shift
    COLON           reduce using rule 58 (term -> .)
    SEMI_COLON      reduce using rule 58 (term -> .)
    $end            reduce using rule 58 (term -> .)
    FUNCTION        reduce using rule 58 (term -> .)
    CYCLE           reduce using rule 58 (term -> .)
    CONTINUE        reduce using rule 58 (term -> .)
    BREAK           reduce using rule 58 (term -> .)
    PRINT           reduce using rule 58 (term -> .)
    IF              reduce using rule 58 (term -> .)
    CALL            reduce using rule 58 (term -> .)
    END             reduce using rule 58 (term -> .)
    EQUAL           reduce using rule 58 (term -> .)
    SUM             reduce using rule 58 (term -> .)
    MINUS           reduce using rule 58 (term -> .)
    MULTIPLY        reduce using rule 58 (term -> .)
    DIVISION        reduce using rule 58 (term -> .)
    MORE            reduce using rule 58 (term -> .)
    LESS            reduce using rule 58 (term -> .)
    LOGIC_EQUAL     reduce using rule 58 (term -> .)
    BEGIN           reduce using rule 58 (term -> .)
    ELSE            reduce using rule 58 (term -> .)
    CLOSE_PAREN     reduce using rule 58 (term -> .)
    VARIABLE        shift and go to state 43
    FLOAT_DIGIT     shift and go to state 31
    INT_DIGIT       shift and go to state 32
    OPEN_PAREN      shift and go to state 47

  ! VARIABLE        [ reduce using rule 58 (term -> .) ]
  ! OPEN_PAREN      [ reduce using rule 58 (term -> .) ]
  ! FLOAT_DIGIT     [ reduce using rule 58 (term -> .) ]
  ! INT_DIGIT       [ reduce using rule 58 (term -> .) ]
  ! MULTIPLY        [ reduce using rule 61 (factor -> .) ]
  ! DIVISION        [ reduce using rule 61 (factor -> .) ]

    term                           shift and go to state 67
    factor                         shift and go to state 30

state 46

    (52) print -> PRINT expression .

    COLON           reduce using rule 52 (print -> PRINT expression .)
    SEMI_COLON      reduce using rule 52 (print -> PRINT expression .)
    $end            reduce using rule 52 (print -> PRINT expression .)
    FUNCTION        reduce using rule 52 (print -> PRINT expression .)
    CYCLE           reduce using rule 52 (print -> PRINT expression .)
    CONTINUE        reduce using rule 52 (print -> PRINT expression .)
    BREAK           reduce using rule 52 (print -> PRINT expression .)
    PRINT           reduce using rule 52 (print -> PRINT expression .)
    IF              reduce using rule 52 (print -> PRINT expression .)
    CALL            reduce using rule 52 (print -> PRINT expression .)
    VARIABLE        reduce using rule 52 (print -> PRINT expression .)
    OPEN_PAREN      reduce using rule 52 (print -> PRINT expression .)
    FLOAT_DIGIT     reduce using rule 52 (print -> PRINT expression .)
    INT_DIGIT       reduce using rule 52 (print -> PRINT expression .)
    END             reduce using rule 52 (print -> PRINT expression .)
    EQUAL           reduce using rule 52 (print -> PRINT expression .)
    SUM             reduce using rule 52 (print -> PRINT expression .)
    MINUS           reduce using rule 52 (print -> PRINT expression .)
    MULTIPLY        reduce using rule 52 (print -> PRINT expression .)
    DIVISION        reduce using rule 52 (print -> PRINT expression .)
    ELSE            reduce using rule 52 (print -> PRINT expression .)
    BEGIN           reduce using rule 52 (print -> PRINT expression .)


state 47

    (65) factor -> OPEN_PAREN . expression CLOSE_PAREN
    (53) expression -> .
    (54) expression -> . term SUM term
    (55) expression -> . term MINUS term
    (56) expression -> . CONTINUE
    (57) expression -> . BREAK
    (58) term -> .
    (59) term -> . factor MULTIPLY factor
    (60) term -> . factor DIVISION factor
    (61) factor -> .
    (62) factor -> . VARIABLE
    (63) factor -> . FLOAT_DIGIT
    (64) factor -> . INT_DIGIT
    (65) factor -> . OPEN_PAREN expression CLOSE_PAREN

    CLOSE_PAREN     reduce using rule 53 (expression -> .)
    CONTINUE        shift and go to state 23
    BREAK           shift and go to state 24
    SUM             reduce using rule 58 (term -> .)
    MINUS           reduce using rule 58 (term -> .)
    MULTIPLY        reduce using rule 61 (factor -> .)
    DIVISION        reduce using rule 61 (factor -> .)
    VARIABLE        shift and go to state 43
    FLOAT_DIGIT     shift and go to state 31
    INT_DIGIT       shift and go to state 32
    OPEN_PAREN      shift and go to state 47

    expression                     shift and go to state 52
    term                           shift and go to state 22
    factor                         shift and go to state 30

state 48

    (37) if -> IF condition . body else body
    (17) body -> .
    (18) body -> . BEGIN body lines colons END
    (19) body -> . lines colons
    (20) lines -> .
    (21) lines -> . function
    (22) lines -> . cycle
    (23) lines -> . assign
    (24) lines -> . expression
    (25) lines -> . print
    (26) lines -> . if
    (27) lines -> . call
    (32) function -> .
    (33) function -> . FUNCTION NAME_FUNCTION variables body
    (34) cycle -> .
    (35) cycle -> . CYCLE condition body
    (28) assign -> .
    (29) assign -> . variables EQUAL expression
    (53) expression -> .
    (54) expression -> . term SUM term
    (55) expression -> . term MINUS term
    (56) expression -> . CONTINUE
    (57) expression -> . BREAK
    (51) print -> .
    (52) print -> . PRINT expression
    (36) if -> .
    (37) if -> . IF condition body else body
    (30) call -> .
    (31) call -> . CALL NAME_FUNCTION variables
    (13) variables -> .
    (14) variables -> . VARIABLE
    (15) variables -> . VARIABLE COMMA variables
    (16) variables -> . OPEN_PAREN variables CLOSE_PAREN
    (58) term -> .
    (59) term -> . factor MULTIPLY factor
    (60) term -> . factor DIVISION factor
    (61) factor -> .
    (62) factor -> . VARIABLE
    (63) factor -> . FLOAT_DIGIT
    (64) factor -> . INT_DIGIT
    (65) factor -> . OPEN_PAREN expression CLOSE_PAREN

  ! shift/reduce conflict for BEGIN resolved as shift
  ! reduce/reduce conflict for COLON resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for SEMI_COLON resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for $end resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for CYCLE resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for BREAK resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for PRINT resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for IF resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for CALL resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for OPEN_PAREN resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for FLOAT_DIGIT resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for INT_DIGIT resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for END resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for EQUAL resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for SUM resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for MINUS resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for MULTIPLY resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for DIVISION resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for ELSE resolved using rule 17 (body -> .)
  ! shift/reduce conflict for BEGIN resolved as shift
  ! reduce/reduce conflict for COLON resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for SEMI_COLON resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for $end resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for CYCLE resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for BREAK resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for PRINT resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for IF resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for CALL resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for OPEN_PAREN resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for FLOAT_DIGIT resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for INT_DIGIT resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for END resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for EQUAL resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for SUM resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for MINUS resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for MULTIPLY resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for DIVISION resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for ELSE resolved using rule 17 (body -> .)
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! reduce/reduce conflict for COLON resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for SEMI_COLON resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for $end resolved using rule 17 (body -> .)
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! reduce/reduce conflict for CYCLE resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for BREAK resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for PRINT resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for IF resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for CALL resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for OPEN_PAREN resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for FLOAT_DIGIT resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for INT_DIGIT resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for END resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for EQUAL resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for SUM resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for MINUS resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for MULTIPLY resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for DIVISION resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for ELSE resolved using rule 17 (body -> .)
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for CYCLE resolved as shift
  ! reduce/reduce conflict for COLON resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for SEMI_COLON resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for $end resolved using rule 17 (body -> .)
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for CYCLE resolved as shift
  ! reduce/reduce conflict for CONTINUE resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for BREAK resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for PRINT resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for IF resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for CALL resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for OPEN_PAREN resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for FLOAT_DIGIT resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for INT_DIGIT resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for END resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for EQUAL resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for SUM resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for MINUS resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for MULTIPLY resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for DIVISION resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for ELSE resolved using rule 17 (body -> .)
  ! shift/reduce conflict for BEGIN resolved as shift
  ! reduce/reduce conflict for COLON resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for SEMI_COLON resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for $end resolved using rule 17 (body -> .)
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for CYCLE resolved as shift
  ! reduce/reduce conflict for CONTINUE resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for BREAK resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for PRINT resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for IF resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for CALL resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for OPEN_PAREN resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for FLOAT_DIGIT resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for INT_DIGIT resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for END resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for EQUAL resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for SUM resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for MINUS resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for MULTIPLY resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for DIVISION resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for ELSE resolved using rule 17 (body -> .)
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! reduce/reduce conflict for COLON resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for SEMI_COLON resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for $end resolved using rule 17 (body -> .)
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for CYCLE resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! reduce/reduce conflict for PRINT resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for IF resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for CALL resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for OPEN_PAREN resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for FLOAT_DIGIT resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for INT_DIGIT resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for END resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for EQUAL resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for SUM resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for MINUS resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for MULTIPLY resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for DIVISION resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for ELSE resolved using rule 17 (body -> .)
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! reduce/reduce conflict for COLON resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for SEMI_COLON resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for $end resolved using rule 17 (body -> .)
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for CYCLE resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! reduce/reduce conflict for IF resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for CALL resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for OPEN_PAREN resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for FLOAT_DIGIT resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for INT_DIGIT resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for END resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for EQUAL resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for SUM resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for MINUS resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for MULTIPLY resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for DIVISION resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for ELSE resolved using rule 17 (body -> .)
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! reduce/reduce conflict for COLON resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for SEMI_COLON resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for $end resolved using rule 17 (body -> .)
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for CYCLE resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! reduce/reduce conflict for CALL resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for OPEN_PAREN resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for FLOAT_DIGIT resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for INT_DIGIT resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for END resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for EQUAL resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for SUM resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for MINUS resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for MULTIPLY resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for DIVISION resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for ELSE resolved using rule 17 (body -> .)
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for CALL resolved as shift
  ! reduce/reduce conflict for EQUAL resolved using rule 13 (variables -> .)
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for OPEN_PAREN resolved as shift
  ! reduce/reduce conflict for SUM resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for MINUS resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for MULTIPLY resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for DIVISION resolved using rule 17 (body -> .)
  ! shift/reduce conflict for FLOAT_DIGIT resolved as shift
  ! shift/reduce conflict for INT_DIGIT resolved as shift
    COLON           reduce using rule 17 (body -> .)
    SEMI_COLON      reduce using rule 17 (body -> .)
    $end            reduce using rule 17 (body -> .)
    END             reduce using rule 17 (body -> .)
    SUM             reduce using rule 17 (body -> .)
    MINUS           reduce using rule 17 (body -> .)
    MULTIPLY        reduce using rule 17 (body -> .)
    DIVISION        reduce using rule 17 (body -> .)
    ELSE            reduce using rule 17 (body -> .)
    BEGIN           shift and go to state 10
    FUNCTION        shift and go to state 19
    CYCLE           shift and go to state 21
    CONTINUE        shift and go to state 23
    BREAK           shift and go to state 24
    PRINT           shift and go to state 25
    IF              shift and go to state 26
    CALL            shift and go to state 27
    EQUAL           reduce using rule 13 (variables -> .)
    VARIABLE        shift and go to state 28
    OPEN_PAREN      shift and go to state 29
    FLOAT_DIGIT     shift and go to state 31
    INT_DIGIT       shift and go to state 32

  ! FUNCTION        [ reduce using rule 17 (body -> .) ]
  ! CYCLE           [ reduce using rule 17 (body -> .) ]
  ! CONTINUE        [ reduce using rule 17 (body -> .) ]
  ! BREAK           [ reduce using rule 17 (body -> .) ]
  ! PRINT           [ reduce using rule 17 (body -> .) ]
  ! IF              [ reduce using rule 17 (body -> .) ]
  ! CALL            [ reduce using rule 17 (body -> .) ]
  ! VARIABLE        [ reduce using rule 17 (body -> .) ]
  ! OPEN_PAREN      [ reduce using rule 17 (body -> .) ]
  ! FLOAT_DIGIT     [ reduce using rule 17 (body -> .) ]
  ! INT_DIGIT       [ reduce using rule 17 (body -> .) ]
  ! EQUAL           [ reduce using rule 17 (body -> .) ]
  ! BEGIN           [ reduce using rule 17 (body -> .) ]
  ! COLON           [ reduce using rule 20 (lines -> .) ]
  ! SEMI_COLON      [ reduce using rule 20 (lines -> .) ]
  ! $end            [ reduce using rule 20 (lines -> .) ]
  ! FUNCTION        [ reduce using rule 20 (lines -> .) ]
  ! CYCLE           [ reduce using rule 20 (lines -> .) ]
  ! CONTINUE        [ reduce using rule 20 (lines -> .) ]
  ! BREAK           [ reduce using rule 20 (lines -> .) ]
  ! PRINT           [ reduce using rule 20 (lines -> .) ]
  ! IF              [ reduce using rule 20 (lines -> .) ]
  ! CALL            [ reduce using rule 20 (lines -> .) ]
  ! VARIABLE        [ reduce using rule 20 (lines -> .) ]
  ! OPEN_PAREN      [ reduce using rule 20 (lines -> .) ]
  ! FLOAT_DIGIT     [ reduce using rule 20 (lines -> .) ]
  ! INT_DIGIT       [ reduce using rule 20 (lines -> .) ]
  ! END             [ reduce using rule 20 (lines -> .) ]
  ! EQUAL           [ reduce using rule 20 (lines -> .) ]
  ! SUM             [ reduce using rule 20 (lines -> .) ]
  ! MINUS           [ reduce using rule 20 (lines -> .) ]
  ! MULTIPLY        [ reduce using rule 20 (lines -> .) ]
  ! DIVISION        [ reduce using rule 20 (lines -> .) ]
  ! ELSE            [ reduce using rule 20 (lines -> .) ]
  ! BEGIN           [ reduce using rule 20 (lines -> .) ]
  ! COLON           [ reduce using rule 32 (function -> .) ]
  ! SEMI_COLON      [ reduce using rule 32 (function -> .) ]
  ! $end            [ reduce using rule 32 (function -> .) ]
  ! FUNCTION        [ reduce using rule 32 (function -> .) ]
  ! CYCLE           [ reduce using rule 32 (function -> .) ]
  ! CONTINUE        [ reduce using rule 32 (function -> .) ]
  ! BREAK           [ reduce using rule 32 (function -> .) ]
  ! PRINT           [ reduce using rule 32 (function -> .) ]
  ! IF              [ reduce using rule 32 (function -> .) ]
  ! CALL            [ reduce using rule 32 (function -> .) ]
  ! VARIABLE        [ reduce using rule 32 (function -> .) ]
  ! OPEN_PAREN      [ reduce using rule 32 (function -> .) ]
  ! FLOAT_DIGIT     [ reduce using rule 32 (function -> .) ]
  ! INT_DIGIT       [ reduce using rule 32 (function -> .) ]
  ! END             [ reduce using rule 32 (function -> .) ]
  ! EQUAL           [ reduce using rule 32 (function -> .) ]
  ! SUM             [ reduce using rule 32 (function -> .) ]
  ! MINUS           [ reduce using rule 32 (function -> .) ]
  ! MULTIPLY        [ reduce using rule 32 (function -> .) ]
  ! DIVISION        [ reduce using rule 32 (function -> .) ]
  ! ELSE            [ reduce using rule 32 (function -> .) ]
  ! BEGIN           [ reduce using rule 32 (function -> .) ]
  ! COLON           [ reduce using rule 34 (cycle -> .) ]
  ! SEMI_COLON      [ reduce using rule 34 (cycle -> .) ]
  ! $end            [ reduce using rule 34 (cycle -> .) ]
  ! FUNCTION        [ reduce using rule 34 (cycle -> .) ]
  ! CYCLE           [ reduce using rule 34 (cycle -> .) ]
  ! CONTINUE        [ reduce using rule 34 (cycle -> .) ]
  ! BREAK           [ reduce using rule 34 (cycle -> .) ]
  ! PRINT           [ reduce using rule 34 (cycle -> .) ]
  ! IF              [ reduce using rule 34 (cycle -> .) ]
  ! CALL            [ reduce using rule 34 (cycle -> .) ]
  ! VARIABLE        [ reduce using rule 34 (cycle -> .) ]
  ! OPEN_PAREN      [ reduce using rule 34 (cycle -> .) ]
  ! FLOAT_DIGIT     [ reduce using rule 34 (cycle -> .) ]
  ! INT_DIGIT       [ reduce using rule 34 (cycle -> .) ]
  ! END             [ reduce using rule 34 (cycle -> .) ]
  ! EQUAL           [ reduce using rule 34 (cycle -> .) ]
  ! SUM             [ reduce using rule 34 (cycle -> .) ]
  ! MINUS           [ reduce using rule 34 (cycle -> .) ]
  ! MULTIPLY        [ reduce using rule 34 (cycle -> .) ]
  ! DIVISION        [ reduce using rule 34 (cycle -> .) ]
  ! ELSE            [ reduce using rule 34 (cycle -> .) ]
  ! BEGIN           [ reduce using rule 34 (cycle -> .) ]
  ! COLON           [ reduce using rule 28 (assign -> .) ]
  ! SEMI_COLON      [ reduce using rule 28 (assign -> .) ]
  ! $end            [ reduce using rule 28 (assign -> .) ]
  ! FUNCTION        [ reduce using rule 28 (assign -> .) ]
  ! CYCLE           [ reduce using rule 28 (assign -> .) ]
  ! CONTINUE        [ reduce using rule 28 (assign -> .) ]
  ! BREAK           [ reduce using rule 28 (assign -> .) ]
  ! PRINT           [ reduce using rule 28 (assign -> .) ]
  ! IF              [ reduce using rule 28 (assign -> .) ]
  ! CALL            [ reduce using rule 28 (assign -> .) ]
  ! VARIABLE        [ reduce using rule 28 (assign -> .) ]
  ! OPEN_PAREN      [ reduce using rule 28 (assign -> .) ]
  ! FLOAT_DIGIT     [ reduce using rule 28 (assign -> .) ]
  ! INT_DIGIT       [ reduce using rule 28 (assign -> .) ]
  ! END             [ reduce using rule 28 (assign -> .) ]
  ! EQUAL           [ reduce using rule 28 (assign -> .) ]
  ! SUM             [ reduce using rule 28 (assign -> .) ]
  ! MINUS           [ reduce using rule 28 (assign -> .) ]
  ! MULTIPLY        [ reduce using rule 28 (assign -> .) ]
  ! DIVISION        [ reduce using rule 28 (assign -> .) ]
  ! ELSE            [ reduce using rule 28 (assign -> .) ]
  ! BEGIN           [ reduce using rule 28 (assign -> .) ]
  ! COLON           [ reduce using rule 53 (expression -> .) ]
  ! SEMI_COLON      [ reduce using rule 53 (expression -> .) ]
  ! $end            [ reduce using rule 53 (expression -> .) ]
  ! FUNCTION        [ reduce using rule 53 (expression -> .) ]
  ! CYCLE           [ reduce using rule 53 (expression -> .) ]
  ! CONTINUE        [ reduce using rule 53 (expression -> .) ]
  ! BREAK           [ reduce using rule 53 (expression -> .) ]
  ! PRINT           [ reduce using rule 53 (expression -> .) ]
  ! IF              [ reduce using rule 53 (expression -> .) ]
  ! CALL            [ reduce using rule 53 (expression -> .) ]
  ! VARIABLE        [ reduce using rule 53 (expression -> .) ]
  ! OPEN_PAREN      [ reduce using rule 53 (expression -> .) ]
  ! FLOAT_DIGIT     [ reduce using rule 53 (expression -> .) ]
  ! INT_DIGIT       [ reduce using rule 53 (expression -> .) ]
  ! END             [ reduce using rule 53 (expression -> .) ]
  ! EQUAL           [ reduce using rule 53 (expression -> .) ]
  ! SUM             [ reduce using rule 53 (expression -> .) ]
  ! MINUS           [ reduce using rule 53 (expression -> .) ]
  ! MULTIPLY        [ reduce using rule 53 (expression -> .) ]
  ! DIVISION        [ reduce using rule 53 (expression -> .) ]
  ! ELSE            [ reduce using rule 53 (expression -> .) ]
  ! BEGIN           [ reduce using rule 53 (expression -> .) ]
  ! COLON           [ reduce using rule 51 (print -> .) ]
  ! SEMI_COLON      [ reduce using rule 51 (print -> .) ]
  ! $end            [ reduce using rule 51 (print -> .) ]
  ! FUNCTION        [ reduce using rule 51 (print -> .) ]
  ! CYCLE           [ reduce using rule 51 (print -> .) ]
  ! CONTINUE        [ reduce using rule 51 (print -> .) ]
  ! BREAK           [ reduce using rule 51 (print -> .) ]
  ! PRINT           [ reduce using rule 51 (print -> .) ]
  ! IF              [ reduce using rule 51 (print -> .) ]
  ! CALL            [ reduce using rule 51 (print -> .) ]
  ! VARIABLE        [ reduce using rule 51 (print -> .) ]
  ! OPEN_PAREN      [ reduce using rule 51 (print -> .) ]
  ! FLOAT_DIGIT     [ reduce using rule 51 (print -> .) ]
  ! INT_DIGIT       [ reduce using rule 51 (print -> .) ]
  ! END             [ reduce using rule 51 (print -> .) ]
  ! EQUAL           [ reduce using rule 51 (print -> .) ]
  ! SUM             [ reduce using rule 51 (print -> .) ]
  ! MINUS           [ reduce using rule 51 (print -> .) ]
  ! MULTIPLY        [ reduce using rule 51 (print -> .) ]
  ! DIVISION        [ reduce using rule 51 (print -> .) ]
  ! ELSE            [ reduce using rule 51 (print -> .) ]
  ! BEGIN           [ reduce using rule 51 (print -> .) ]
  ! COLON           [ reduce using rule 36 (if -> .) ]
  ! SEMI_COLON      [ reduce using rule 36 (if -> .) ]
  ! $end            [ reduce using rule 36 (if -> .) ]
  ! FUNCTION        [ reduce using rule 36 (if -> .) ]
  ! CYCLE           [ reduce using rule 36 (if -> .) ]
  ! CONTINUE        [ reduce using rule 36 (if -> .) ]
  ! BREAK           [ reduce using rule 36 (if -> .) ]
  ! PRINT           [ reduce using rule 36 (if -> .) ]
  ! IF              [ reduce using rule 36 (if -> .) ]
  ! CALL            [ reduce using rule 36 (if -> .) ]
  ! VARIABLE        [ reduce using rule 36 (if -> .) ]
  ! OPEN_PAREN      [ reduce using rule 36 (if -> .) ]
  ! FLOAT_DIGIT     [ reduce using rule 36 (if -> .) ]
  ! INT_DIGIT       [ reduce using rule 36 (if -> .) ]
  ! END             [ reduce using rule 36 (if -> .) ]
  ! EQUAL           [ reduce using rule 36 (if -> .) ]
  ! SUM             [ reduce using rule 36 (if -> .) ]
  ! MINUS           [ reduce using rule 36 (if -> .) ]
  ! MULTIPLY        [ reduce using rule 36 (if -> .) ]
  ! DIVISION        [ reduce using rule 36 (if -> .) ]
  ! ELSE            [ reduce using rule 36 (if -> .) ]
  ! BEGIN           [ reduce using rule 36 (if -> .) ]
  ! COLON           [ reduce using rule 30 (call -> .) ]
  ! SEMI_COLON      [ reduce using rule 30 (call -> .) ]
  ! $end            [ reduce using rule 30 (call -> .) ]
  ! FUNCTION        [ reduce using rule 30 (call -> .) ]
  ! CYCLE           [ reduce using rule 30 (call -> .) ]
  ! CONTINUE        [ reduce using rule 30 (call -> .) ]
  ! BREAK           [ reduce using rule 30 (call -> .) ]
  ! PRINT           [ reduce using rule 30 (call -> .) ]
  ! IF              [ reduce using rule 30 (call -> .) ]
  ! CALL            [ reduce using rule 30 (call -> .) ]
  ! VARIABLE        [ reduce using rule 30 (call -> .) ]
  ! OPEN_PAREN      [ reduce using rule 30 (call -> .) ]
  ! FLOAT_DIGIT     [ reduce using rule 30 (call -> .) ]
  ! INT_DIGIT       [ reduce using rule 30 (call -> .) ]
  ! END             [ reduce using rule 30 (call -> .) ]
  ! EQUAL           [ reduce using rule 30 (call -> .) ]
  ! SUM             [ reduce using rule 30 (call -> .) ]
  ! MINUS           [ reduce using rule 30 (call -> .) ]
  ! MULTIPLY        [ reduce using rule 30 (call -> .) ]
  ! DIVISION        [ reduce using rule 30 (call -> .) ]
  ! ELSE            [ reduce using rule 30 (call -> .) ]
  ! BEGIN           [ reduce using rule 30 (call -> .) ]
  ! SUM             [ reduce using rule 58 (term -> .) ]
  ! MINUS           [ reduce using rule 58 (term -> .) ]
  ! MULTIPLY        [ reduce using rule 61 (factor -> .) ]
  ! DIVISION        [ reduce using rule 61 (factor -> .) ]

    body                           shift and go to state 68
    lines                          shift and go to state 11
    function                       shift and go to state 12
    cycle                          shift and go to state 13
    assign                         shift and go to state 14
    expression                     shift and go to state 15
    print                          shift and go to state 16
    if                             shift and go to state 17
    call                           shift and go to state 18
    variables                      shift and go to state 20
    term                           shift and go to state 22
    factor                         shift and go to state 30

state 49

    (31) call -> CALL NAME_FUNCTION . variables
    (13) variables -> .
    (14) variables -> . VARIABLE
    (15) variables -> . VARIABLE COMMA variables
    (16) variables -> . OPEN_PAREN variables CLOSE_PAREN

  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for OPEN_PAREN resolved as shift
    COLON           reduce using rule 13 (variables -> .)
    SEMI_COLON      reduce using rule 13 (variables -> .)
    $end            reduce using rule 13 (variables -> .)
    FUNCTION        reduce using rule 13 (variables -> .)
    CYCLE           reduce using rule 13 (variables -> .)
    CONTINUE        reduce using rule 13 (variables -> .)
    BREAK           reduce using rule 13 (variables -> .)
    PRINT           reduce using rule 13 (variables -> .)
    IF              reduce using rule 13 (variables -> .)
    CALL            reduce using rule 13 (variables -> .)
    FLOAT_DIGIT     reduce using rule 13 (variables -> .)
    INT_DIGIT       reduce using rule 13 (variables -> .)
    END             reduce using rule 13 (variables -> .)
    EQUAL           reduce using rule 13 (variables -> .)
    SUM             reduce using rule 13 (variables -> .)
    MINUS           reduce using rule 13 (variables -> .)
    MULTIPLY        reduce using rule 13 (variables -> .)
    DIVISION        reduce using rule 13 (variables -> .)
    ELSE            reduce using rule 13 (variables -> .)
    BEGIN           reduce using rule 13 (variables -> .)
    VARIABLE        shift and go to state 34
    OPEN_PAREN      shift and go to state 35

  ! VARIABLE        [ reduce using rule 13 (variables -> .) ]
  ! OPEN_PAREN      [ reduce using rule 13 (variables -> .) ]

    variables                      shift and go to state 69

state 50

    (15) variables -> VARIABLE COMMA . variables
    (13) variables -> .
    (14) variables -> . VARIABLE
    (15) variables -> . VARIABLE COMMA variables
    (16) variables -> . OPEN_PAREN variables CLOSE_PAREN

  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for OPEN_PAREN resolved as shift
    EQUAL           reduce using rule 13 (variables -> .)
    COLON           reduce using rule 13 (variables -> .)
    SEMI_COLON      reduce using rule 13 (variables -> .)
    INTEGER_TYPE    reduce using rule 13 (variables -> .)
    FLOAT_TYPE      reduce using rule 13 (variables -> .)
    BEGIN           reduce using rule 13 (variables -> .)
    FUNCTION        reduce using rule 13 (variables -> .)
    CYCLE           reduce using rule 13 (variables -> .)
    CONTINUE        reduce using rule 13 (variables -> .)
    BREAK           reduce using rule 13 (variables -> .)
    PRINT           reduce using rule 13 (variables -> .)
    IF              reduce using rule 13 (variables -> .)
    CALL            reduce using rule 13 (variables -> .)
    FLOAT_DIGIT     reduce using rule 13 (variables -> .)
    INT_DIGIT       reduce using rule 13 (variables -> .)
    SUM             reduce using rule 13 (variables -> .)
    MINUS           reduce using rule 13 (variables -> .)
    MULTIPLY        reduce using rule 13 (variables -> .)
    DIVISION        reduce using rule 13 (variables -> .)
    $end            reduce using rule 13 (variables -> .)
    CLOSE_PAREN     reduce using rule 13 (variables -> .)
    END             reduce using rule 13 (variables -> .)
    ELSE            reduce using rule 13 (variables -> .)
    VARIABLE        shift and go to state 34
    OPEN_PAREN      shift and go to state 35

  ! VARIABLE        [ reduce using rule 13 (variables -> .) ]
  ! OPEN_PAREN      [ reduce using rule 13 (variables -> .) ]

    variables                      shift and go to state 70

state 51

    (16) variables -> OPEN_PAREN variables . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 71


state 52

    (65) factor -> OPEN_PAREN expression . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 72


state 53

    (59) term -> factor MULTIPLY . factor
    (61) factor -> .
    (62) factor -> . VARIABLE
    (63) factor -> . FLOAT_DIGIT
    (64) factor -> . INT_DIGIT
    (65) factor -> . OPEN_PAREN expression CLOSE_PAREN

  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for FLOAT_DIGIT resolved as shift
  ! shift/reduce conflict for INT_DIGIT resolved as shift
  ! shift/reduce conflict for OPEN_PAREN resolved as shift
    SUM             reduce using rule 61 (factor -> .)
    MINUS           reduce using rule 61 (factor -> .)
    COLON           reduce using rule 61 (factor -> .)
    SEMI_COLON      reduce using rule 61 (factor -> .)
    $end            reduce using rule 61 (factor -> .)
    FUNCTION        reduce using rule 61 (factor -> .)
    CYCLE           reduce using rule 61 (factor -> .)
    CONTINUE        reduce using rule 61 (factor -> .)
    BREAK           reduce using rule 61 (factor -> .)
    PRINT           reduce using rule 61 (factor -> .)
    IF              reduce using rule 61 (factor -> .)
    CALL            reduce using rule 61 (factor -> .)
    END             reduce using rule 61 (factor -> .)
    EQUAL           reduce using rule 61 (factor -> .)
    MULTIPLY        reduce using rule 61 (factor -> .)
    DIVISION        reduce using rule 61 (factor -> .)
    MORE            reduce using rule 61 (factor -> .)
    LESS            reduce using rule 61 (factor -> .)
    LOGIC_EQUAL     reduce using rule 61 (factor -> .)
    BEGIN           reduce using rule 61 (factor -> .)
    ELSE            reduce using rule 61 (factor -> .)
    CLOSE_PAREN     reduce using rule 61 (factor -> .)
    VARIABLE        shift and go to state 43
    FLOAT_DIGIT     shift and go to state 31
    INT_DIGIT       shift and go to state 32
    OPEN_PAREN      shift and go to state 47

  ! VARIABLE        [ reduce using rule 61 (factor -> .) ]
  ! OPEN_PAREN      [ reduce using rule 61 (factor -> .) ]
  ! FLOAT_DIGIT     [ reduce using rule 61 (factor -> .) ]
  ! INT_DIGIT       [ reduce using rule 61 (factor -> .) ]

    factor                         shift and go to state 73

state 54

    (60) term -> factor DIVISION . factor
    (61) factor -> .
    (62) factor -> . VARIABLE
    (63) factor -> . FLOAT_DIGIT
    (64) factor -> . INT_DIGIT
    (65) factor -> . OPEN_PAREN expression CLOSE_PAREN

  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for FLOAT_DIGIT resolved as shift
  ! shift/reduce conflict for INT_DIGIT resolved as shift
  ! shift/reduce conflict for OPEN_PAREN resolved as shift
    SUM             reduce using rule 61 (factor -> .)
    MINUS           reduce using rule 61 (factor -> .)
    COLON           reduce using rule 61 (factor -> .)
    SEMI_COLON      reduce using rule 61 (factor -> .)
    $end            reduce using rule 61 (factor -> .)
    FUNCTION        reduce using rule 61 (factor -> .)
    CYCLE           reduce using rule 61 (factor -> .)
    CONTINUE        reduce using rule 61 (factor -> .)
    BREAK           reduce using rule 61 (factor -> .)
    PRINT           reduce using rule 61 (factor -> .)
    IF              reduce using rule 61 (factor -> .)
    CALL            reduce using rule 61 (factor -> .)
    END             reduce using rule 61 (factor -> .)
    EQUAL           reduce using rule 61 (factor -> .)
    MULTIPLY        reduce using rule 61 (factor -> .)
    DIVISION        reduce using rule 61 (factor -> .)
    MORE            reduce using rule 61 (factor -> .)
    LESS            reduce using rule 61 (factor -> .)
    LOGIC_EQUAL     reduce using rule 61 (factor -> .)
    BEGIN           reduce using rule 61 (factor -> .)
    ELSE            reduce using rule 61 (factor -> .)
    CLOSE_PAREN     reduce using rule 61 (factor -> .)
    VARIABLE        shift and go to state 43
    FLOAT_DIGIT     shift and go to state 31
    INT_DIGIT       shift and go to state 32
    OPEN_PAREN      shift and go to state 47

  ! VARIABLE        [ reduce using rule 61 (factor -> .) ]
  ! OPEN_PAREN      [ reduce using rule 61 (factor -> .) ]
  ! FLOAT_DIGIT     [ reduce using rule 61 (factor -> .) ]
  ! INT_DIGIT       [ reduce using rule 61 (factor -> .) ]

    factor                         shift and go to state 74

state 55

    (6) vars -> VAR vars variables colons . types colons
    (7) types -> .
    (8) types -> . INTEGER_TYPE
    (9) types -> . FLOAT_TYPE

  ! shift/reduce conflict for INTEGER_TYPE resolved as shift
  ! shift/reduce conflict for FLOAT_TYPE resolved as shift
    COLON           reduce using rule 7 (types -> .)
    SEMI_COLON      reduce using rule 7 (types -> .)
    BEGIN           reduce using rule 7 (types -> .)
    FUNCTION        reduce using rule 7 (types -> .)
    CYCLE           reduce using rule 7 (types -> .)
    CONTINUE        reduce using rule 7 (types -> .)
    BREAK           reduce using rule 7 (types -> .)
    PRINT           reduce using rule 7 (types -> .)
    IF              reduce using rule 7 (types -> .)
    CALL            reduce using rule 7 (types -> .)
    VARIABLE        reduce using rule 7 (types -> .)
    OPEN_PAREN      reduce using rule 7 (types -> .)
    FLOAT_DIGIT     reduce using rule 7 (types -> .)
    INT_DIGIT       reduce using rule 7 (types -> .)
    EQUAL           reduce using rule 7 (types -> .)
    SUM             reduce using rule 7 (types -> .)
    MINUS           reduce using rule 7 (types -> .)
    MULTIPLY        reduce using rule 7 (types -> .)
    DIVISION        reduce using rule 7 (types -> .)
    $end            reduce using rule 7 (types -> .)
    INTEGER_TYPE    shift and go to state 76
    FLOAT_TYPE      shift and go to state 77

  ! INTEGER_TYPE    [ reduce using rule 7 (types -> .) ]
  ! FLOAT_TYPE      [ reduce using rule 7 (types -> .) ]

    types                          shift and go to state 75

state 56

    (18) body -> BEGIN body lines . colons END
    (10) colons -> .
    (11) colons -> . COLON
    (12) colons -> . SEMI_COLON

    END             reduce using rule 10 (colons -> .)
    COLON           shift and go to state 6
    SEMI_COLON      shift and go to state 7

    colons                         shift and go to state 78

state 57

    (33) function -> FUNCTION NAME_FUNCTION variables . body
    (17) body -> .
    (18) body -> . BEGIN body lines colons END
    (19) body -> . lines colons
    (20) lines -> .
    (21) lines -> . function
    (22) lines -> . cycle
    (23) lines -> . assign
    (24) lines -> . expression
    (25) lines -> . print
    (26) lines -> . if
    (27) lines -> . call
    (32) function -> .
    (33) function -> . FUNCTION NAME_FUNCTION variables body
    (34) cycle -> .
    (35) cycle -> . CYCLE condition body
    (28) assign -> .
    (29) assign -> . variables EQUAL expression
    (53) expression -> .
    (54) expression -> . term SUM term
    (55) expression -> . term MINUS term
    (56) expression -> . CONTINUE
    (57) expression -> . BREAK
    (51) print -> .
    (52) print -> . PRINT expression
    (36) if -> .
    (37) if -> . IF condition body else body
    (30) call -> .
    (31) call -> . CALL NAME_FUNCTION variables
    (13) variables -> .
    (14) variables -> . VARIABLE
    (15) variables -> . VARIABLE COMMA variables
    (16) variables -> . OPEN_PAREN variables CLOSE_PAREN
    (58) term -> .
    (59) term -> . factor MULTIPLY factor
    (60) term -> . factor DIVISION factor
    (61) factor -> .
    (62) factor -> . VARIABLE
    (63) factor -> . FLOAT_DIGIT
    (64) factor -> . INT_DIGIT
    (65) factor -> . OPEN_PAREN expression CLOSE_PAREN

  ! shift/reduce conflict for BEGIN resolved as shift
  ! reduce/reduce conflict for COLON resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for SEMI_COLON resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for $end resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for CYCLE resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for BREAK resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for PRINT resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for IF resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for CALL resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for OPEN_PAREN resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for FLOAT_DIGIT resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for INT_DIGIT resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for END resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for EQUAL resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for SUM resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for MINUS resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for MULTIPLY resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for DIVISION resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for ELSE resolved using rule 17 (body -> .)
  ! shift/reduce conflict for BEGIN resolved as shift
  ! reduce/reduce conflict for COLON resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for SEMI_COLON resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for $end resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for CYCLE resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for BREAK resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for PRINT resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for IF resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for CALL resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for OPEN_PAREN resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for FLOAT_DIGIT resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for INT_DIGIT resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for END resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for EQUAL resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for SUM resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for MINUS resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for MULTIPLY resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for DIVISION resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for ELSE resolved using rule 17 (body -> .)
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! reduce/reduce conflict for COLON resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for SEMI_COLON resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for $end resolved using rule 17 (body -> .)
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! reduce/reduce conflict for CYCLE resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for BREAK resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for PRINT resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for IF resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for CALL resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for OPEN_PAREN resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for FLOAT_DIGIT resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for INT_DIGIT resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for END resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for EQUAL resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for SUM resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for MINUS resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for MULTIPLY resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for DIVISION resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for ELSE resolved using rule 17 (body -> .)
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for CYCLE resolved as shift
  ! reduce/reduce conflict for COLON resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for SEMI_COLON resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for $end resolved using rule 17 (body -> .)
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for CYCLE resolved as shift
  ! reduce/reduce conflict for CONTINUE resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for BREAK resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for PRINT resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for IF resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for CALL resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for OPEN_PAREN resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for FLOAT_DIGIT resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for INT_DIGIT resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for END resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for EQUAL resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for SUM resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for MINUS resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for MULTIPLY resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for DIVISION resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for ELSE resolved using rule 17 (body -> .)
  ! shift/reduce conflict for BEGIN resolved as shift
  ! reduce/reduce conflict for COLON resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for SEMI_COLON resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for $end resolved using rule 17 (body -> .)
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for CYCLE resolved as shift
  ! reduce/reduce conflict for CONTINUE resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for BREAK resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for PRINT resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for IF resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for CALL resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for OPEN_PAREN resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for FLOAT_DIGIT resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for INT_DIGIT resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for END resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for EQUAL resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for SUM resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for MINUS resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for MULTIPLY resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for DIVISION resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for ELSE resolved using rule 17 (body -> .)
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! reduce/reduce conflict for COLON resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for SEMI_COLON resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for $end resolved using rule 17 (body -> .)
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for CYCLE resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! reduce/reduce conflict for PRINT resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for IF resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for CALL resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for OPEN_PAREN resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for FLOAT_DIGIT resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for INT_DIGIT resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for END resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for EQUAL resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for SUM resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for MINUS resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for MULTIPLY resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for DIVISION resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for ELSE resolved using rule 17 (body -> .)
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! reduce/reduce conflict for COLON resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for SEMI_COLON resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for $end resolved using rule 17 (body -> .)
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for CYCLE resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! reduce/reduce conflict for IF resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for CALL resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for OPEN_PAREN resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for FLOAT_DIGIT resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for INT_DIGIT resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for END resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for EQUAL resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for SUM resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for MINUS resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for MULTIPLY resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for DIVISION resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for ELSE resolved using rule 17 (body -> .)
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! reduce/reduce conflict for COLON resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for SEMI_COLON resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for $end resolved using rule 17 (body -> .)
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for CYCLE resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! reduce/reduce conflict for CALL resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for OPEN_PAREN resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for FLOAT_DIGIT resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for INT_DIGIT resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for END resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for EQUAL resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for SUM resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for MINUS resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for MULTIPLY resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for DIVISION resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for ELSE resolved using rule 17 (body -> .)
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for CALL resolved as shift
  ! reduce/reduce conflict for EQUAL resolved using rule 13 (variables -> .)
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for OPEN_PAREN resolved as shift
  ! reduce/reduce conflict for SUM resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for MINUS resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for MULTIPLY resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for DIVISION resolved using rule 17 (body -> .)
  ! shift/reduce conflict for FLOAT_DIGIT resolved as shift
  ! shift/reduce conflict for INT_DIGIT resolved as shift
    COLON           reduce using rule 17 (body -> .)
    SEMI_COLON      reduce using rule 17 (body -> .)
    $end            reduce using rule 17 (body -> .)
    END             reduce using rule 17 (body -> .)
    SUM             reduce using rule 17 (body -> .)
    MINUS           reduce using rule 17 (body -> .)
    MULTIPLY        reduce using rule 17 (body -> .)
    DIVISION        reduce using rule 17 (body -> .)
    ELSE            reduce using rule 17 (body -> .)
    BEGIN           shift and go to state 10
    FUNCTION        shift and go to state 19
    CYCLE           shift and go to state 21
    CONTINUE        shift and go to state 23
    BREAK           shift and go to state 24
    PRINT           shift and go to state 25
    IF              shift and go to state 26
    CALL            shift and go to state 27
    EQUAL           reduce using rule 13 (variables -> .)
    VARIABLE        shift and go to state 28
    OPEN_PAREN      shift and go to state 29
    FLOAT_DIGIT     shift and go to state 31
    INT_DIGIT       shift and go to state 32

  ! FUNCTION        [ reduce using rule 17 (body -> .) ]
  ! CYCLE           [ reduce using rule 17 (body -> .) ]
  ! CONTINUE        [ reduce using rule 17 (body -> .) ]
  ! BREAK           [ reduce using rule 17 (body -> .) ]
  ! PRINT           [ reduce using rule 17 (body -> .) ]
  ! IF              [ reduce using rule 17 (body -> .) ]
  ! CALL            [ reduce using rule 17 (body -> .) ]
  ! VARIABLE        [ reduce using rule 17 (body -> .) ]
  ! OPEN_PAREN      [ reduce using rule 17 (body -> .) ]
  ! FLOAT_DIGIT     [ reduce using rule 17 (body -> .) ]
  ! INT_DIGIT       [ reduce using rule 17 (body -> .) ]
  ! EQUAL           [ reduce using rule 17 (body -> .) ]
  ! BEGIN           [ reduce using rule 17 (body -> .) ]
  ! COLON           [ reduce using rule 20 (lines -> .) ]
  ! SEMI_COLON      [ reduce using rule 20 (lines -> .) ]
  ! $end            [ reduce using rule 20 (lines -> .) ]
  ! FUNCTION        [ reduce using rule 20 (lines -> .) ]
  ! CYCLE           [ reduce using rule 20 (lines -> .) ]
  ! CONTINUE        [ reduce using rule 20 (lines -> .) ]
  ! BREAK           [ reduce using rule 20 (lines -> .) ]
  ! PRINT           [ reduce using rule 20 (lines -> .) ]
  ! IF              [ reduce using rule 20 (lines -> .) ]
  ! CALL            [ reduce using rule 20 (lines -> .) ]
  ! VARIABLE        [ reduce using rule 20 (lines -> .) ]
  ! OPEN_PAREN      [ reduce using rule 20 (lines -> .) ]
  ! FLOAT_DIGIT     [ reduce using rule 20 (lines -> .) ]
  ! INT_DIGIT       [ reduce using rule 20 (lines -> .) ]
  ! END             [ reduce using rule 20 (lines -> .) ]
  ! EQUAL           [ reduce using rule 20 (lines -> .) ]
  ! SUM             [ reduce using rule 20 (lines -> .) ]
  ! MINUS           [ reduce using rule 20 (lines -> .) ]
  ! MULTIPLY        [ reduce using rule 20 (lines -> .) ]
  ! DIVISION        [ reduce using rule 20 (lines -> .) ]
  ! ELSE            [ reduce using rule 20 (lines -> .) ]
  ! BEGIN           [ reduce using rule 20 (lines -> .) ]
  ! COLON           [ reduce using rule 32 (function -> .) ]
  ! SEMI_COLON      [ reduce using rule 32 (function -> .) ]
  ! $end            [ reduce using rule 32 (function -> .) ]
  ! FUNCTION        [ reduce using rule 32 (function -> .) ]
  ! CYCLE           [ reduce using rule 32 (function -> .) ]
  ! CONTINUE        [ reduce using rule 32 (function -> .) ]
  ! BREAK           [ reduce using rule 32 (function -> .) ]
  ! PRINT           [ reduce using rule 32 (function -> .) ]
  ! IF              [ reduce using rule 32 (function -> .) ]
  ! CALL            [ reduce using rule 32 (function -> .) ]
  ! VARIABLE        [ reduce using rule 32 (function -> .) ]
  ! OPEN_PAREN      [ reduce using rule 32 (function -> .) ]
  ! FLOAT_DIGIT     [ reduce using rule 32 (function -> .) ]
  ! INT_DIGIT       [ reduce using rule 32 (function -> .) ]
  ! END             [ reduce using rule 32 (function -> .) ]
  ! EQUAL           [ reduce using rule 32 (function -> .) ]
  ! SUM             [ reduce using rule 32 (function -> .) ]
  ! MINUS           [ reduce using rule 32 (function -> .) ]
  ! MULTIPLY        [ reduce using rule 32 (function -> .) ]
  ! DIVISION        [ reduce using rule 32 (function -> .) ]
  ! ELSE            [ reduce using rule 32 (function -> .) ]
  ! BEGIN           [ reduce using rule 32 (function -> .) ]
  ! COLON           [ reduce using rule 34 (cycle -> .) ]
  ! SEMI_COLON      [ reduce using rule 34 (cycle -> .) ]
  ! $end            [ reduce using rule 34 (cycle -> .) ]
  ! FUNCTION        [ reduce using rule 34 (cycle -> .) ]
  ! CYCLE           [ reduce using rule 34 (cycle -> .) ]
  ! CONTINUE        [ reduce using rule 34 (cycle -> .) ]
  ! BREAK           [ reduce using rule 34 (cycle -> .) ]
  ! PRINT           [ reduce using rule 34 (cycle -> .) ]
  ! IF              [ reduce using rule 34 (cycle -> .) ]
  ! CALL            [ reduce using rule 34 (cycle -> .) ]
  ! VARIABLE        [ reduce using rule 34 (cycle -> .) ]
  ! OPEN_PAREN      [ reduce using rule 34 (cycle -> .) ]
  ! FLOAT_DIGIT     [ reduce using rule 34 (cycle -> .) ]
  ! INT_DIGIT       [ reduce using rule 34 (cycle -> .) ]
  ! END             [ reduce using rule 34 (cycle -> .) ]
  ! EQUAL           [ reduce using rule 34 (cycle -> .) ]
  ! SUM             [ reduce using rule 34 (cycle -> .) ]
  ! MINUS           [ reduce using rule 34 (cycle -> .) ]
  ! MULTIPLY        [ reduce using rule 34 (cycle -> .) ]
  ! DIVISION        [ reduce using rule 34 (cycle -> .) ]
  ! ELSE            [ reduce using rule 34 (cycle -> .) ]
  ! BEGIN           [ reduce using rule 34 (cycle -> .) ]
  ! COLON           [ reduce using rule 28 (assign -> .) ]
  ! SEMI_COLON      [ reduce using rule 28 (assign -> .) ]
  ! $end            [ reduce using rule 28 (assign -> .) ]
  ! FUNCTION        [ reduce using rule 28 (assign -> .) ]
  ! CYCLE           [ reduce using rule 28 (assign -> .) ]
  ! CONTINUE        [ reduce using rule 28 (assign -> .) ]
  ! BREAK           [ reduce using rule 28 (assign -> .) ]
  ! PRINT           [ reduce using rule 28 (assign -> .) ]
  ! IF              [ reduce using rule 28 (assign -> .) ]
  ! CALL            [ reduce using rule 28 (assign -> .) ]
  ! VARIABLE        [ reduce using rule 28 (assign -> .) ]
  ! OPEN_PAREN      [ reduce using rule 28 (assign -> .) ]
  ! FLOAT_DIGIT     [ reduce using rule 28 (assign -> .) ]
  ! INT_DIGIT       [ reduce using rule 28 (assign -> .) ]
  ! END             [ reduce using rule 28 (assign -> .) ]
  ! EQUAL           [ reduce using rule 28 (assign -> .) ]
  ! SUM             [ reduce using rule 28 (assign -> .) ]
  ! MINUS           [ reduce using rule 28 (assign -> .) ]
  ! MULTIPLY        [ reduce using rule 28 (assign -> .) ]
  ! DIVISION        [ reduce using rule 28 (assign -> .) ]
  ! ELSE            [ reduce using rule 28 (assign -> .) ]
  ! BEGIN           [ reduce using rule 28 (assign -> .) ]
  ! COLON           [ reduce using rule 53 (expression -> .) ]
  ! SEMI_COLON      [ reduce using rule 53 (expression -> .) ]
  ! $end            [ reduce using rule 53 (expression -> .) ]
  ! FUNCTION        [ reduce using rule 53 (expression -> .) ]
  ! CYCLE           [ reduce using rule 53 (expression -> .) ]
  ! CONTINUE        [ reduce using rule 53 (expression -> .) ]
  ! BREAK           [ reduce using rule 53 (expression -> .) ]
  ! PRINT           [ reduce using rule 53 (expression -> .) ]
  ! IF              [ reduce using rule 53 (expression -> .) ]
  ! CALL            [ reduce using rule 53 (expression -> .) ]
  ! VARIABLE        [ reduce using rule 53 (expression -> .) ]
  ! OPEN_PAREN      [ reduce using rule 53 (expression -> .) ]
  ! FLOAT_DIGIT     [ reduce using rule 53 (expression -> .) ]
  ! INT_DIGIT       [ reduce using rule 53 (expression -> .) ]
  ! END             [ reduce using rule 53 (expression -> .) ]
  ! EQUAL           [ reduce using rule 53 (expression -> .) ]
  ! SUM             [ reduce using rule 53 (expression -> .) ]
  ! MINUS           [ reduce using rule 53 (expression -> .) ]
  ! MULTIPLY        [ reduce using rule 53 (expression -> .) ]
  ! DIVISION        [ reduce using rule 53 (expression -> .) ]
  ! ELSE            [ reduce using rule 53 (expression -> .) ]
  ! BEGIN           [ reduce using rule 53 (expression -> .) ]
  ! COLON           [ reduce using rule 51 (print -> .) ]
  ! SEMI_COLON      [ reduce using rule 51 (print -> .) ]
  ! $end            [ reduce using rule 51 (print -> .) ]
  ! FUNCTION        [ reduce using rule 51 (print -> .) ]
  ! CYCLE           [ reduce using rule 51 (print -> .) ]
  ! CONTINUE        [ reduce using rule 51 (print -> .) ]
  ! BREAK           [ reduce using rule 51 (print -> .) ]
  ! PRINT           [ reduce using rule 51 (print -> .) ]
  ! IF              [ reduce using rule 51 (print -> .) ]
  ! CALL            [ reduce using rule 51 (print -> .) ]
  ! VARIABLE        [ reduce using rule 51 (print -> .) ]
  ! OPEN_PAREN      [ reduce using rule 51 (print -> .) ]
  ! FLOAT_DIGIT     [ reduce using rule 51 (print -> .) ]
  ! INT_DIGIT       [ reduce using rule 51 (print -> .) ]
  ! END             [ reduce using rule 51 (print -> .) ]
  ! EQUAL           [ reduce using rule 51 (print -> .) ]
  ! SUM             [ reduce using rule 51 (print -> .) ]
  ! MINUS           [ reduce using rule 51 (print -> .) ]
  ! MULTIPLY        [ reduce using rule 51 (print -> .) ]
  ! DIVISION        [ reduce using rule 51 (print -> .) ]
  ! ELSE            [ reduce using rule 51 (print -> .) ]
  ! BEGIN           [ reduce using rule 51 (print -> .) ]
  ! COLON           [ reduce using rule 36 (if -> .) ]
  ! SEMI_COLON      [ reduce using rule 36 (if -> .) ]
  ! $end            [ reduce using rule 36 (if -> .) ]
  ! FUNCTION        [ reduce using rule 36 (if -> .) ]
  ! CYCLE           [ reduce using rule 36 (if -> .) ]
  ! CONTINUE        [ reduce using rule 36 (if -> .) ]
  ! BREAK           [ reduce using rule 36 (if -> .) ]
  ! PRINT           [ reduce using rule 36 (if -> .) ]
  ! IF              [ reduce using rule 36 (if -> .) ]
  ! CALL            [ reduce using rule 36 (if -> .) ]
  ! VARIABLE        [ reduce using rule 36 (if -> .) ]
  ! OPEN_PAREN      [ reduce using rule 36 (if -> .) ]
  ! FLOAT_DIGIT     [ reduce using rule 36 (if -> .) ]
  ! INT_DIGIT       [ reduce using rule 36 (if -> .) ]
  ! END             [ reduce using rule 36 (if -> .) ]
  ! EQUAL           [ reduce using rule 36 (if -> .) ]
  ! SUM             [ reduce using rule 36 (if -> .) ]
  ! MINUS           [ reduce using rule 36 (if -> .) ]
  ! MULTIPLY        [ reduce using rule 36 (if -> .) ]
  ! DIVISION        [ reduce using rule 36 (if -> .) ]
  ! ELSE            [ reduce using rule 36 (if -> .) ]
  ! BEGIN           [ reduce using rule 36 (if -> .) ]
  ! COLON           [ reduce using rule 30 (call -> .) ]
  ! SEMI_COLON      [ reduce using rule 30 (call -> .) ]
  ! $end            [ reduce using rule 30 (call -> .) ]
  ! FUNCTION        [ reduce using rule 30 (call -> .) ]
  ! CYCLE           [ reduce using rule 30 (call -> .) ]
  ! CONTINUE        [ reduce using rule 30 (call -> .) ]
  ! BREAK           [ reduce using rule 30 (call -> .) ]
  ! PRINT           [ reduce using rule 30 (call -> .) ]
  ! IF              [ reduce using rule 30 (call -> .) ]
  ! CALL            [ reduce using rule 30 (call -> .) ]
  ! VARIABLE        [ reduce using rule 30 (call -> .) ]
  ! OPEN_PAREN      [ reduce using rule 30 (call -> .) ]
  ! FLOAT_DIGIT     [ reduce using rule 30 (call -> .) ]
  ! INT_DIGIT       [ reduce using rule 30 (call -> .) ]
  ! END             [ reduce using rule 30 (call -> .) ]
  ! EQUAL           [ reduce using rule 30 (call -> .) ]
  ! SUM             [ reduce using rule 30 (call -> .) ]
  ! MINUS           [ reduce using rule 30 (call -> .) ]
  ! MULTIPLY        [ reduce using rule 30 (call -> .) ]
  ! DIVISION        [ reduce using rule 30 (call -> .) ]
  ! ELSE            [ reduce using rule 30 (call -> .) ]
  ! BEGIN           [ reduce using rule 30 (call -> .) ]
  ! SUM             [ reduce using rule 58 (term -> .) ]
  ! MINUS           [ reduce using rule 58 (term -> .) ]
  ! MULTIPLY        [ reduce using rule 61 (factor -> .) ]
  ! DIVISION        [ reduce using rule 61 (factor -> .) ]

    variables                      shift and go to state 20
    body                           shift and go to state 79
    lines                          shift and go to state 11
    function                       shift and go to state 12
    cycle                          shift and go to state 13
    assign                         shift and go to state 14
    expression                     shift and go to state 15
    print                          shift and go to state 16
    if                             shift and go to state 17
    call                           shift and go to state 18
    term                           shift and go to state 22
    factor                         shift and go to state 30

state 58

    (29) assign -> variables EQUAL expression .

    COLON           reduce using rule 29 (assign -> variables EQUAL expression .)
    SEMI_COLON      reduce using rule 29 (assign -> variables EQUAL expression .)
    $end            reduce using rule 29 (assign -> variables EQUAL expression .)
    FUNCTION        reduce using rule 29 (assign -> variables EQUAL expression .)
    CYCLE           reduce using rule 29 (assign -> variables EQUAL expression .)
    CONTINUE        reduce using rule 29 (assign -> variables EQUAL expression .)
    BREAK           reduce using rule 29 (assign -> variables EQUAL expression .)
    PRINT           reduce using rule 29 (assign -> variables EQUAL expression .)
    IF              reduce using rule 29 (assign -> variables EQUAL expression .)
    CALL            reduce using rule 29 (assign -> variables EQUAL expression .)
    VARIABLE        reduce using rule 29 (assign -> variables EQUAL expression .)
    OPEN_PAREN      reduce using rule 29 (assign -> variables EQUAL expression .)
    FLOAT_DIGIT     reduce using rule 29 (assign -> variables EQUAL expression .)
    INT_DIGIT       reduce using rule 29 (assign -> variables EQUAL expression .)
    END             reduce using rule 29 (assign -> variables EQUAL expression .)
    EQUAL           reduce using rule 29 (assign -> variables EQUAL expression .)
    SUM             reduce using rule 29 (assign -> variables EQUAL expression .)
    MINUS           reduce using rule 29 (assign -> variables EQUAL expression .)
    MULTIPLY        reduce using rule 29 (assign -> variables EQUAL expression .)
    DIVISION        reduce using rule 29 (assign -> variables EQUAL expression .)
    ELSE            reduce using rule 29 (assign -> variables EQUAL expression .)
    BEGIN           reduce using rule 29 (assign -> variables EQUAL expression .)


state 59

    (35) cycle -> CYCLE condition body .

    COLON           reduce using rule 35 (cycle -> CYCLE condition body .)
    SEMI_COLON      reduce using rule 35 (cycle -> CYCLE condition body .)
    $end            reduce using rule 35 (cycle -> CYCLE condition body .)
    FUNCTION        reduce using rule 35 (cycle -> CYCLE condition body .)
    CYCLE           reduce using rule 35 (cycle -> CYCLE condition body .)
    CONTINUE        reduce using rule 35 (cycle -> CYCLE condition body .)
    BREAK           reduce using rule 35 (cycle -> CYCLE condition body .)
    PRINT           reduce using rule 35 (cycle -> CYCLE condition body .)
    IF              reduce using rule 35 (cycle -> CYCLE condition body .)
    CALL            reduce using rule 35 (cycle -> CYCLE condition body .)
    VARIABLE        reduce using rule 35 (cycle -> CYCLE condition body .)
    OPEN_PAREN      reduce using rule 35 (cycle -> CYCLE condition body .)
    FLOAT_DIGIT     reduce using rule 35 (cycle -> CYCLE condition body .)
    INT_DIGIT       reduce using rule 35 (cycle -> CYCLE condition body .)
    END             reduce using rule 35 (cycle -> CYCLE condition body .)
    EQUAL           reduce using rule 35 (cycle -> CYCLE condition body .)
    SUM             reduce using rule 35 (cycle -> CYCLE condition body .)
    MINUS           reduce using rule 35 (cycle -> CYCLE condition body .)
    MULTIPLY        reduce using rule 35 (cycle -> CYCLE condition body .)
    DIVISION        reduce using rule 35 (cycle -> CYCLE condition body .)
    ELSE            reduce using rule 35 (cycle -> CYCLE condition body .)
    BEGIN           reduce using rule 35 (cycle -> CYCLE condition body .)


state 60

    (41) condition -> expression comparison . expression
    (53) expression -> .
    (54) expression -> . term SUM term
    (55) expression -> . term MINUS term
    (56) expression -> . CONTINUE
    (57) expression -> . BREAK
    (58) term -> .
    (59) term -> . factor MULTIPLY factor
    (60) term -> . factor DIVISION factor
    (61) factor -> .
    (62) factor -> . VARIABLE
    (63) factor -> . FLOAT_DIGIT
    (64) factor -> . INT_DIGIT
    (65) factor -> . OPEN_PAREN expression CLOSE_PAREN

  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! reduce/reduce conflict for SUM resolved using rule 53 (expression -> .)
  ! reduce/reduce conflict for MINUS resolved using rule 53 (expression -> .)
  ! reduce/reduce conflict for MULTIPLY resolved using rule 53 (expression -> .)
  ! reduce/reduce conflict for DIVISION resolved using rule 53 (expression -> .)
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for FLOAT_DIGIT resolved as shift
  ! shift/reduce conflict for INT_DIGIT resolved as shift
  ! shift/reduce conflict for OPEN_PAREN resolved as shift
    BEGIN           reduce using rule 53 (expression -> .)
    FUNCTION        reduce using rule 53 (expression -> .)
    CYCLE           reduce using rule 53 (expression -> .)
    PRINT           reduce using rule 53 (expression -> .)
    IF              reduce using rule 53 (expression -> .)
    CALL            reduce using rule 53 (expression -> .)
    COLON           reduce using rule 53 (expression -> .)
    SEMI_COLON      reduce using rule 53 (expression -> .)
    EQUAL           reduce using rule 53 (expression -> .)
    SUM             reduce using rule 53 (expression -> .)
    MINUS           reduce using rule 53 (expression -> .)
    MULTIPLY        reduce using rule 53 (expression -> .)
    DIVISION        reduce using rule 53 (expression -> .)
    $end            reduce using rule 53 (expression -> .)
    END             reduce using rule 53 (expression -> .)
    ELSE            reduce using rule 53 (expression -> .)
    CLOSE_PAREN     reduce using rule 53 (expression -> .)
    CONTINUE        shift and go to state 23
    BREAK           shift and go to state 24
    VARIABLE        shift and go to state 43
    FLOAT_DIGIT     shift and go to state 31
    INT_DIGIT       shift and go to state 32
    OPEN_PAREN      shift and go to state 47

  ! CONTINUE        [ reduce using rule 53 (expression -> .) ]
  ! BREAK           [ reduce using rule 53 (expression -> .) ]
  ! VARIABLE        [ reduce using rule 53 (expression -> .) ]
  ! OPEN_PAREN      [ reduce using rule 53 (expression -> .) ]
  ! FLOAT_DIGIT     [ reduce using rule 53 (expression -> .) ]
  ! INT_DIGIT       [ reduce using rule 53 (expression -> .) ]
  ! SUM             [ reduce using rule 58 (term -> .) ]
  ! MINUS           [ reduce using rule 58 (term -> .) ]
  ! MULTIPLY        [ reduce using rule 61 (factor -> .) ]
  ! DIVISION        [ reduce using rule 61 (factor -> .) ]

    expression                     shift and go to state 80
    term                           shift and go to state 22
    factor                         shift and go to state 30

state 61

    (48) comparison -> MORE .

    CONTINUE        reduce using rule 48 (comparison -> MORE .)
    BREAK           reduce using rule 48 (comparison -> MORE .)
    VARIABLE        reduce using rule 48 (comparison -> MORE .)
    FLOAT_DIGIT     reduce using rule 48 (comparison -> MORE .)
    INT_DIGIT       reduce using rule 48 (comparison -> MORE .)
    OPEN_PAREN      reduce using rule 48 (comparison -> MORE .)
    SUM             reduce using rule 48 (comparison -> MORE .)
    MINUS           reduce using rule 48 (comparison -> MORE .)
    MULTIPLY        reduce using rule 48 (comparison -> MORE .)
    DIVISION        reduce using rule 48 (comparison -> MORE .)
    BEGIN           reduce using rule 48 (comparison -> MORE .)
    FUNCTION        reduce using rule 48 (comparison -> MORE .)
    CYCLE           reduce using rule 48 (comparison -> MORE .)
    PRINT           reduce using rule 48 (comparison -> MORE .)
    IF              reduce using rule 48 (comparison -> MORE .)
    CALL            reduce using rule 48 (comparison -> MORE .)
    COLON           reduce using rule 48 (comparison -> MORE .)
    SEMI_COLON      reduce using rule 48 (comparison -> MORE .)
    EQUAL           reduce using rule 48 (comparison -> MORE .)
    $end            reduce using rule 48 (comparison -> MORE .)
    END             reduce using rule 48 (comparison -> MORE .)
    ELSE            reduce using rule 48 (comparison -> MORE .)
    CLOSE_PAREN     reduce using rule 48 (comparison -> MORE .)


state 62

    (49) comparison -> LESS .

    CONTINUE        reduce using rule 49 (comparison -> LESS .)
    BREAK           reduce using rule 49 (comparison -> LESS .)
    VARIABLE        reduce using rule 49 (comparison -> LESS .)
    FLOAT_DIGIT     reduce using rule 49 (comparison -> LESS .)
    INT_DIGIT       reduce using rule 49 (comparison -> LESS .)
    OPEN_PAREN      reduce using rule 49 (comparison -> LESS .)
    SUM             reduce using rule 49 (comparison -> LESS .)
    MINUS           reduce using rule 49 (comparison -> LESS .)
    MULTIPLY        reduce using rule 49 (comparison -> LESS .)
    DIVISION        reduce using rule 49 (comparison -> LESS .)
    BEGIN           reduce using rule 49 (comparison -> LESS .)
    FUNCTION        reduce using rule 49 (comparison -> LESS .)
    CYCLE           reduce using rule 49 (comparison -> LESS .)
    PRINT           reduce using rule 49 (comparison -> LESS .)
    IF              reduce using rule 49 (comparison -> LESS .)
    CALL            reduce using rule 49 (comparison -> LESS .)
    COLON           reduce using rule 49 (comparison -> LESS .)
    SEMI_COLON      reduce using rule 49 (comparison -> LESS .)
    EQUAL           reduce using rule 49 (comparison -> LESS .)
    $end            reduce using rule 49 (comparison -> LESS .)
    END             reduce using rule 49 (comparison -> LESS .)
    ELSE            reduce using rule 49 (comparison -> LESS .)
    CLOSE_PAREN     reduce using rule 49 (comparison -> LESS .)


state 63

    (50) comparison -> LOGIC_EQUAL .

    CONTINUE        reduce using rule 50 (comparison -> LOGIC_EQUAL .)
    BREAK           reduce using rule 50 (comparison -> LOGIC_EQUAL .)
    VARIABLE        reduce using rule 50 (comparison -> LOGIC_EQUAL .)
    FLOAT_DIGIT     reduce using rule 50 (comparison -> LOGIC_EQUAL .)
    INT_DIGIT       reduce using rule 50 (comparison -> LOGIC_EQUAL .)
    OPEN_PAREN      reduce using rule 50 (comparison -> LOGIC_EQUAL .)
    SUM             reduce using rule 50 (comparison -> LOGIC_EQUAL .)
    MINUS           reduce using rule 50 (comparison -> LOGIC_EQUAL .)
    MULTIPLY        reduce using rule 50 (comparison -> LOGIC_EQUAL .)
    DIVISION        reduce using rule 50 (comparison -> LOGIC_EQUAL .)
    BEGIN           reduce using rule 50 (comparison -> LOGIC_EQUAL .)
    FUNCTION        reduce using rule 50 (comparison -> LOGIC_EQUAL .)
    CYCLE           reduce using rule 50 (comparison -> LOGIC_EQUAL .)
    PRINT           reduce using rule 50 (comparison -> LOGIC_EQUAL .)
    IF              reduce using rule 50 (comparison -> LOGIC_EQUAL .)
    CALL            reduce using rule 50 (comparison -> LOGIC_EQUAL .)
    COLON           reduce using rule 50 (comparison -> LOGIC_EQUAL .)
    SEMI_COLON      reduce using rule 50 (comparison -> LOGIC_EQUAL .)
    EQUAL           reduce using rule 50 (comparison -> LOGIC_EQUAL .)
    $end            reduce using rule 50 (comparison -> LOGIC_EQUAL .)
    END             reduce using rule 50 (comparison -> LOGIC_EQUAL .)
    ELSE            reduce using rule 50 (comparison -> LOGIC_EQUAL .)
    CLOSE_PAREN     reduce using rule 50 (comparison -> LOGIC_EQUAL .)


state 64

    (42) condition -> OPEN_PAREN condition . CLOSE_PAREN logic_op

    CLOSE_PAREN     shift and go to state 81


state 65

    (65) factor -> OPEN_PAREN expression . CLOSE_PAREN
    (41) condition -> expression . comparison expression
    (47) comparison -> .
    (48) comparison -> . MORE
    (49) comparison -> . LESS
    (50) comparison -> . LOGIC_EQUAL

  ! shift/reduce conflict for CLOSE_PAREN resolved as shift
    CLOSE_PAREN     shift and go to state 72
    CONTINUE        reduce using rule 47 (comparison -> .)
    BREAK           reduce using rule 47 (comparison -> .)
    VARIABLE        reduce using rule 47 (comparison -> .)
    FLOAT_DIGIT     reduce using rule 47 (comparison -> .)
    INT_DIGIT       reduce using rule 47 (comparison -> .)
    OPEN_PAREN      reduce using rule 47 (comparison -> .)
    SUM             reduce using rule 47 (comparison -> .)
    MINUS           reduce using rule 47 (comparison -> .)
    MULTIPLY        reduce using rule 47 (comparison -> .)
    DIVISION        reduce using rule 47 (comparison -> .)
    MORE            shift and go to state 61
    LESS            shift and go to state 62
    LOGIC_EQUAL     shift and go to state 63

  ! CLOSE_PAREN     [ reduce using rule 47 (comparison -> .) ]

    comparison                     shift and go to state 60

state 66

    (54) expression -> term SUM term .

    COLON           reduce using rule 54 (expression -> term SUM term .)
    SEMI_COLON      reduce using rule 54 (expression -> term SUM term .)
    $end            reduce using rule 54 (expression -> term SUM term .)
    FUNCTION        reduce using rule 54 (expression -> term SUM term .)
    CYCLE           reduce using rule 54 (expression -> term SUM term .)
    CONTINUE        reduce using rule 54 (expression -> term SUM term .)
    BREAK           reduce using rule 54 (expression -> term SUM term .)
    PRINT           reduce using rule 54 (expression -> term SUM term .)
    IF              reduce using rule 54 (expression -> term SUM term .)
    CALL            reduce using rule 54 (expression -> term SUM term .)
    VARIABLE        reduce using rule 54 (expression -> term SUM term .)
    OPEN_PAREN      reduce using rule 54 (expression -> term SUM term .)
    FLOAT_DIGIT     reduce using rule 54 (expression -> term SUM term .)
    INT_DIGIT       reduce using rule 54 (expression -> term SUM term .)
    END             reduce using rule 54 (expression -> term SUM term .)
    EQUAL           reduce using rule 54 (expression -> term SUM term .)
    SUM             reduce using rule 54 (expression -> term SUM term .)
    MINUS           reduce using rule 54 (expression -> term SUM term .)
    MULTIPLY        reduce using rule 54 (expression -> term SUM term .)
    DIVISION        reduce using rule 54 (expression -> term SUM term .)
    MORE            reduce using rule 54 (expression -> term SUM term .)
    LESS            reduce using rule 54 (expression -> term SUM term .)
    LOGIC_EQUAL     reduce using rule 54 (expression -> term SUM term .)
    BEGIN           reduce using rule 54 (expression -> term SUM term .)
    ELSE            reduce using rule 54 (expression -> term SUM term .)
    CLOSE_PAREN     reduce using rule 54 (expression -> term SUM term .)


state 67

    (55) expression -> term MINUS term .

    COLON           reduce using rule 55 (expression -> term MINUS term .)
    SEMI_COLON      reduce using rule 55 (expression -> term MINUS term .)
    $end            reduce using rule 55 (expression -> term MINUS term .)
    FUNCTION        reduce using rule 55 (expression -> term MINUS term .)
    CYCLE           reduce using rule 55 (expression -> term MINUS term .)
    CONTINUE        reduce using rule 55 (expression -> term MINUS term .)
    BREAK           reduce using rule 55 (expression -> term MINUS term .)
    PRINT           reduce using rule 55 (expression -> term MINUS term .)
    IF              reduce using rule 55 (expression -> term MINUS term .)
    CALL            reduce using rule 55 (expression -> term MINUS term .)
    VARIABLE        reduce using rule 55 (expression -> term MINUS term .)
    OPEN_PAREN      reduce using rule 55 (expression -> term MINUS term .)
    FLOAT_DIGIT     reduce using rule 55 (expression -> term MINUS term .)
    INT_DIGIT       reduce using rule 55 (expression -> term MINUS term .)
    END             reduce using rule 55 (expression -> term MINUS term .)
    EQUAL           reduce using rule 55 (expression -> term MINUS term .)
    SUM             reduce using rule 55 (expression -> term MINUS term .)
    MINUS           reduce using rule 55 (expression -> term MINUS term .)
    MULTIPLY        reduce using rule 55 (expression -> term MINUS term .)
    DIVISION        reduce using rule 55 (expression -> term MINUS term .)
    MORE            reduce using rule 55 (expression -> term MINUS term .)
    LESS            reduce using rule 55 (expression -> term MINUS term .)
    LOGIC_EQUAL     reduce using rule 55 (expression -> term MINUS term .)
    BEGIN           reduce using rule 55 (expression -> term MINUS term .)
    ELSE            reduce using rule 55 (expression -> term MINUS term .)
    CLOSE_PAREN     reduce using rule 55 (expression -> term MINUS term .)


state 68

    (37) if -> IF condition body . else body
    (38) else -> .
    (39) else -> . ELSE

  ! shift/reduce conflict for ELSE resolved as shift
    BEGIN           reduce using rule 38 (else -> .)
    FUNCTION        reduce using rule 38 (else -> .)
    CYCLE           reduce using rule 38 (else -> .)
    CONTINUE        reduce using rule 38 (else -> .)
    BREAK           reduce using rule 38 (else -> .)
    PRINT           reduce using rule 38 (else -> .)
    IF              reduce using rule 38 (else -> .)
    CALL            reduce using rule 38 (else -> .)
    VARIABLE        reduce using rule 38 (else -> .)
    OPEN_PAREN      reduce using rule 38 (else -> .)
    FLOAT_DIGIT     reduce using rule 38 (else -> .)
    INT_DIGIT       reduce using rule 38 (else -> .)
    COLON           reduce using rule 38 (else -> .)
    SEMI_COLON      reduce using rule 38 (else -> .)
    EQUAL           reduce using rule 38 (else -> .)
    SUM             reduce using rule 38 (else -> .)
    MINUS           reduce using rule 38 (else -> .)
    MULTIPLY        reduce using rule 38 (else -> .)
    DIVISION        reduce using rule 38 (else -> .)
    $end            reduce using rule 38 (else -> .)
    END             reduce using rule 38 (else -> .)
    ELSE            shift and go to state 83

  ! ELSE            [ reduce using rule 38 (else -> .) ]

    else                           shift and go to state 82

state 69

    (31) call -> CALL NAME_FUNCTION variables .

    COLON           reduce using rule 31 (call -> CALL NAME_FUNCTION variables .)
    SEMI_COLON      reduce using rule 31 (call -> CALL NAME_FUNCTION variables .)
    $end            reduce using rule 31 (call -> CALL NAME_FUNCTION variables .)
    FUNCTION        reduce using rule 31 (call -> CALL NAME_FUNCTION variables .)
    CYCLE           reduce using rule 31 (call -> CALL NAME_FUNCTION variables .)
    CONTINUE        reduce using rule 31 (call -> CALL NAME_FUNCTION variables .)
    BREAK           reduce using rule 31 (call -> CALL NAME_FUNCTION variables .)
    PRINT           reduce using rule 31 (call -> CALL NAME_FUNCTION variables .)
    IF              reduce using rule 31 (call -> CALL NAME_FUNCTION variables .)
    CALL            reduce using rule 31 (call -> CALL NAME_FUNCTION variables .)
    VARIABLE        reduce using rule 31 (call -> CALL NAME_FUNCTION variables .)
    OPEN_PAREN      reduce using rule 31 (call -> CALL NAME_FUNCTION variables .)
    FLOAT_DIGIT     reduce using rule 31 (call -> CALL NAME_FUNCTION variables .)
    INT_DIGIT       reduce using rule 31 (call -> CALL NAME_FUNCTION variables .)
    END             reduce using rule 31 (call -> CALL NAME_FUNCTION variables .)
    EQUAL           reduce using rule 31 (call -> CALL NAME_FUNCTION variables .)
    SUM             reduce using rule 31 (call -> CALL NAME_FUNCTION variables .)
    MINUS           reduce using rule 31 (call -> CALL NAME_FUNCTION variables .)
    MULTIPLY        reduce using rule 31 (call -> CALL NAME_FUNCTION variables .)
    DIVISION        reduce using rule 31 (call -> CALL NAME_FUNCTION variables .)
    ELSE            reduce using rule 31 (call -> CALL NAME_FUNCTION variables .)
    BEGIN           reduce using rule 31 (call -> CALL NAME_FUNCTION variables .)


state 70

    (15) variables -> VARIABLE COMMA variables .

    EQUAL           reduce using rule 15 (variables -> VARIABLE COMMA variables .)
    COLON           reduce using rule 15 (variables -> VARIABLE COMMA variables .)
    SEMI_COLON      reduce using rule 15 (variables -> VARIABLE COMMA variables .)
    INTEGER_TYPE    reduce using rule 15 (variables -> VARIABLE COMMA variables .)
    FLOAT_TYPE      reduce using rule 15 (variables -> VARIABLE COMMA variables .)
    BEGIN           reduce using rule 15 (variables -> VARIABLE COMMA variables .)
    FUNCTION        reduce using rule 15 (variables -> VARIABLE COMMA variables .)
    CYCLE           reduce using rule 15 (variables -> VARIABLE COMMA variables .)
    CONTINUE        reduce using rule 15 (variables -> VARIABLE COMMA variables .)
    BREAK           reduce using rule 15 (variables -> VARIABLE COMMA variables .)
    PRINT           reduce using rule 15 (variables -> VARIABLE COMMA variables .)
    IF              reduce using rule 15 (variables -> VARIABLE COMMA variables .)
    CALL            reduce using rule 15 (variables -> VARIABLE COMMA variables .)
    VARIABLE        reduce using rule 15 (variables -> VARIABLE COMMA variables .)
    OPEN_PAREN      reduce using rule 15 (variables -> VARIABLE COMMA variables .)
    FLOAT_DIGIT     reduce using rule 15 (variables -> VARIABLE COMMA variables .)
    INT_DIGIT       reduce using rule 15 (variables -> VARIABLE COMMA variables .)
    SUM             reduce using rule 15 (variables -> VARIABLE COMMA variables .)
    MINUS           reduce using rule 15 (variables -> VARIABLE COMMA variables .)
    MULTIPLY        reduce using rule 15 (variables -> VARIABLE COMMA variables .)
    DIVISION        reduce using rule 15 (variables -> VARIABLE COMMA variables .)
    $end            reduce using rule 15 (variables -> VARIABLE COMMA variables .)
    CLOSE_PAREN     reduce using rule 15 (variables -> VARIABLE COMMA variables .)
    END             reduce using rule 15 (variables -> VARIABLE COMMA variables .)
    ELSE            reduce using rule 15 (variables -> VARIABLE COMMA variables .)


state 71

    (16) variables -> OPEN_PAREN variables CLOSE_PAREN .

    EQUAL           reduce using rule 16 (variables -> OPEN_PAREN variables CLOSE_PAREN .)
    COLON           reduce using rule 16 (variables -> OPEN_PAREN variables CLOSE_PAREN .)
    SEMI_COLON      reduce using rule 16 (variables -> OPEN_PAREN variables CLOSE_PAREN .)
    INTEGER_TYPE    reduce using rule 16 (variables -> OPEN_PAREN variables CLOSE_PAREN .)
    FLOAT_TYPE      reduce using rule 16 (variables -> OPEN_PAREN variables CLOSE_PAREN .)
    BEGIN           reduce using rule 16 (variables -> OPEN_PAREN variables CLOSE_PAREN .)
    FUNCTION        reduce using rule 16 (variables -> OPEN_PAREN variables CLOSE_PAREN .)
    CYCLE           reduce using rule 16 (variables -> OPEN_PAREN variables CLOSE_PAREN .)
    CONTINUE        reduce using rule 16 (variables -> OPEN_PAREN variables CLOSE_PAREN .)
    BREAK           reduce using rule 16 (variables -> OPEN_PAREN variables CLOSE_PAREN .)
    PRINT           reduce using rule 16 (variables -> OPEN_PAREN variables CLOSE_PAREN .)
    IF              reduce using rule 16 (variables -> OPEN_PAREN variables CLOSE_PAREN .)
    CALL            reduce using rule 16 (variables -> OPEN_PAREN variables CLOSE_PAREN .)
    VARIABLE        reduce using rule 16 (variables -> OPEN_PAREN variables CLOSE_PAREN .)
    OPEN_PAREN      reduce using rule 16 (variables -> OPEN_PAREN variables CLOSE_PAREN .)
    FLOAT_DIGIT     reduce using rule 16 (variables -> OPEN_PAREN variables CLOSE_PAREN .)
    INT_DIGIT       reduce using rule 16 (variables -> OPEN_PAREN variables CLOSE_PAREN .)
    SUM             reduce using rule 16 (variables -> OPEN_PAREN variables CLOSE_PAREN .)
    MINUS           reduce using rule 16 (variables -> OPEN_PAREN variables CLOSE_PAREN .)
    MULTIPLY        reduce using rule 16 (variables -> OPEN_PAREN variables CLOSE_PAREN .)
    DIVISION        reduce using rule 16 (variables -> OPEN_PAREN variables CLOSE_PAREN .)
    $end            reduce using rule 16 (variables -> OPEN_PAREN variables CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 16 (variables -> OPEN_PAREN variables CLOSE_PAREN .)
    END             reduce using rule 16 (variables -> OPEN_PAREN variables CLOSE_PAREN .)
    ELSE            reduce using rule 16 (variables -> OPEN_PAREN variables CLOSE_PAREN .)


state 72

    (65) factor -> OPEN_PAREN expression CLOSE_PAREN .

    MULTIPLY        reduce using rule 65 (factor -> OPEN_PAREN expression CLOSE_PAREN .)
    DIVISION        reduce using rule 65 (factor -> OPEN_PAREN expression CLOSE_PAREN .)
    SUM             reduce using rule 65 (factor -> OPEN_PAREN expression CLOSE_PAREN .)
    MINUS           reduce using rule 65 (factor -> OPEN_PAREN expression CLOSE_PAREN .)
    COLON           reduce using rule 65 (factor -> OPEN_PAREN expression CLOSE_PAREN .)
    SEMI_COLON      reduce using rule 65 (factor -> OPEN_PAREN expression CLOSE_PAREN .)
    $end            reduce using rule 65 (factor -> OPEN_PAREN expression CLOSE_PAREN .)
    FUNCTION        reduce using rule 65 (factor -> OPEN_PAREN expression CLOSE_PAREN .)
    CYCLE           reduce using rule 65 (factor -> OPEN_PAREN expression CLOSE_PAREN .)
    CONTINUE        reduce using rule 65 (factor -> OPEN_PAREN expression CLOSE_PAREN .)
    BREAK           reduce using rule 65 (factor -> OPEN_PAREN expression CLOSE_PAREN .)
    PRINT           reduce using rule 65 (factor -> OPEN_PAREN expression CLOSE_PAREN .)
    IF              reduce using rule 65 (factor -> OPEN_PAREN expression CLOSE_PAREN .)
    CALL            reduce using rule 65 (factor -> OPEN_PAREN expression CLOSE_PAREN .)
    VARIABLE        reduce using rule 65 (factor -> OPEN_PAREN expression CLOSE_PAREN .)
    OPEN_PAREN      reduce using rule 65 (factor -> OPEN_PAREN expression CLOSE_PAREN .)
    FLOAT_DIGIT     reduce using rule 65 (factor -> OPEN_PAREN expression CLOSE_PAREN .)
    INT_DIGIT       reduce using rule 65 (factor -> OPEN_PAREN expression CLOSE_PAREN .)
    END             reduce using rule 65 (factor -> OPEN_PAREN expression CLOSE_PAREN .)
    EQUAL           reduce using rule 65 (factor -> OPEN_PAREN expression CLOSE_PAREN .)
    MORE            reduce using rule 65 (factor -> OPEN_PAREN expression CLOSE_PAREN .)
    LESS            reduce using rule 65 (factor -> OPEN_PAREN expression CLOSE_PAREN .)
    LOGIC_EQUAL     reduce using rule 65 (factor -> OPEN_PAREN expression CLOSE_PAREN .)
    BEGIN           reduce using rule 65 (factor -> OPEN_PAREN expression CLOSE_PAREN .)
    ELSE            reduce using rule 65 (factor -> OPEN_PAREN expression CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 65 (factor -> OPEN_PAREN expression CLOSE_PAREN .)


state 73

    (59) term -> factor MULTIPLY factor .

    SUM             reduce using rule 59 (term -> factor MULTIPLY factor .)
    MINUS           reduce using rule 59 (term -> factor MULTIPLY factor .)
    COLON           reduce using rule 59 (term -> factor MULTIPLY factor .)
    SEMI_COLON      reduce using rule 59 (term -> factor MULTIPLY factor .)
    $end            reduce using rule 59 (term -> factor MULTIPLY factor .)
    FUNCTION        reduce using rule 59 (term -> factor MULTIPLY factor .)
    CYCLE           reduce using rule 59 (term -> factor MULTIPLY factor .)
    CONTINUE        reduce using rule 59 (term -> factor MULTIPLY factor .)
    BREAK           reduce using rule 59 (term -> factor MULTIPLY factor .)
    PRINT           reduce using rule 59 (term -> factor MULTIPLY factor .)
    IF              reduce using rule 59 (term -> factor MULTIPLY factor .)
    CALL            reduce using rule 59 (term -> factor MULTIPLY factor .)
    VARIABLE        reduce using rule 59 (term -> factor MULTIPLY factor .)
    OPEN_PAREN      reduce using rule 59 (term -> factor MULTIPLY factor .)
    FLOAT_DIGIT     reduce using rule 59 (term -> factor MULTIPLY factor .)
    INT_DIGIT       reduce using rule 59 (term -> factor MULTIPLY factor .)
    END             reduce using rule 59 (term -> factor MULTIPLY factor .)
    EQUAL           reduce using rule 59 (term -> factor MULTIPLY factor .)
    MULTIPLY        reduce using rule 59 (term -> factor MULTIPLY factor .)
    DIVISION        reduce using rule 59 (term -> factor MULTIPLY factor .)
    MORE            reduce using rule 59 (term -> factor MULTIPLY factor .)
    LESS            reduce using rule 59 (term -> factor MULTIPLY factor .)
    LOGIC_EQUAL     reduce using rule 59 (term -> factor MULTIPLY factor .)
    BEGIN           reduce using rule 59 (term -> factor MULTIPLY factor .)
    ELSE            reduce using rule 59 (term -> factor MULTIPLY factor .)
    CLOSE_PAREN     reduce using rule 59 (term -> factor MULTIPLY factor .)


state 74

    (60) term -> factor DIVISION factor .

    SUM             reduce using rule 60 (term -> factor DIVISION factor .)
    MINUS           reduce using rule 60 (term -> factor DIVISION factor .)
    COLON           reduce using rule 60 (term -> factor DIVISION factor .)
    SEMI_COLON      reduce using rule 60 (term -> factor DIVISION factor .)
    $end            reduce using rule 60 (term -> factor DIVISION factor .)
    FUNCTION        reduce using rule 60 (term -> factor DIVISION factor .)
    CYCLE           reduce using rule 60 (term -> factor DIVISION factor .)
    CONTINUE        reduce using rule 60 (term -> factor DIVISION factor .)
    BREAK           reduce using rule 60 (term -> factor DIVISION factor .)
    PRINT           reduce using rule 60 (term -> factor DIVISION factor .)
    IF              reduce using rule 60 (term -> factor DIVISION factor .)
    CALL            reduce using rule 60 (term -> factor DIVISION factor .)
    VARIABLE        reduce using rule 60 (term -> factor DIVISION factor .)
    OPEN_PAREN      reduce using rule 60 (term -> factor DIVISION factor .)
    FLOAT_DIGIT     reduce using rule 60 (term -> factor DIVISION factor .)
    INT_DIGIT       reduce using rule 60 (term -> factor DIVISION factor .)
    END             reduce using rule 60 (term -> factor DIVISION factor .)
    EQUAL           reduce using rule 60 (term -> factor DIVISION factor .)
    MULTIPLY        reduce using rule 60 (term -> factor DIVISION factor .)
    DIVISION        reduce using rule 60 (term -> factor DIVISION factor .)
    MORE            reduce using rule 60 (term -> factor DIVISION factor .)
    LESS            reduce using rule 60 (term -> factor DIVISION factor .)
    LOGIC_EQUAL     reduce using rule 60 (term -> factor DIVISION factor .)
    BEGIN           reduce using rule 60 (term -> factor DIVISION factor .)
    ELSE            reduce using rule 60 (term -> factor DIVISION factor .)
    CLOSE_PAREN     reduce using rule 60 (term -> factor DIVISION factor .)


state 75

    (6) vars -> VAR vars variables colons types . colons
    (10) colons -> .
    (11) colons -> . COLON
    (12) colons -> . SEMI_COLON

  ! shift/reduce conflict for COLON resolved as shift
  ! shift/reduce conflict for SEMI_COLON resolved as shift
    BEGIN           reduce using rule 10 (colons -> .)
    FUNCTION        reduce using rule 10 (colons -> .)
    CYCLE           reduce using rule 10 (colons -> .)
    CONTINUE        reduce using rule 10 (colons -> .)
    BREAK           reduce using rule 10 (colons -> .)
    PRINT           reduce using rule 10 (colons -> .)
    IF              reduce using rule 10 (colons -> .)
    CALL            reduce using rule 10 (colons -> .)
    VARIABLE        reduce using rule 10 (colons -> .)
    OPEN_PAREN      reduce using rule 10 (colons -> .)
    FLOAT_DIGIT     reduce using rule 10 (colons -> .)
    INT_DIGIT       reduce using rule 10 (colons -> .)
    EQUAL           reduce using rule 10 (colons -> .)
    SUM             reduce using rule 10 (colons -> .)
    MINUS           reduce using rule 10 (colons -> .)
    MULTIPLY        reduce using rule 10 (colons -> .)
    DIVISION        reduce using rule 10 (colons -> .)
    $end            reduce using rule 10 (colons -> .)
    INTEGER_TYPE    reduce using rule 10 (colons -> .)
    FLOAT_TYPE      reduce using rule 10 (colons -> .)
    COLON           shift and go to state 6
    SEMI_COLON      shift and go to state 7

  ! COLON           [ reduce using rule 10 (colons -> .) ]
  ! SEMI_COLON      [ reduce using rule 10 (colons -> .) ]

    colons                         shift and go to state 84

state 76

    (8) types -> INTEGER_TYPE .

    COLON           reduce using rule 8 (types -> INTEGER_TYPE .)
    SEMI_COLON      reduce using rule 8 (types -> INTEGER_TYPE .)
    BEGIN           reduce using rule 8 (types -> INTEGER_TYPE .)
    FUNCTION        reduce using rule 8 (types -> INTEGER_TYPE .)
    CYCLE           reduce using rule 8 (types -> INTEGER_TYPE .)
    CONTINUE        reduce using rule 8 (types -> INTEGER_TYPE .)
    BREAK           reduce using rule 8 (types -> INTEGER_TYPE .)
    PRINT           reduce using rule 8 (types -> INTEGER_TYPE .)
    IF              reduce using rule 8 (types -> INTEGER_TYPE .)
    CALL            reduce using rule 8 (types -> INTEGER_TYPE .)
    VARIABLE        reduce using rule 8 (types -> INTEGER_TYPE .)
    OPEN_PAREN      reduce using rule 8 (types -> INTEGER_TYPE .)
    FLOAT_DIGIT     reduce using rule 8 (types -> INTEGER_TYPE .)
    INT_DIGIT       reduce using rule 8 (types -> INTEGER_TYPE .)
    EQUAL           reduce using rule 8 (types -> INTEGER_TYPE .)
    SUM             reduce using rule 8 (types -> INTEGER_TYPE .)
    MINUS           reduce using rule 8 (types -> INTEGER_TYPE .)
    MULTIPLY        reduce using rule 8 (types -> INTEGER_TYPE .)
    DIVISION        reduce using rule 8 (types -> INTEGER_TYPE .)
    $end            reduce using rule 8 (types -> INTEGER_TYPE .)
    INTEGER_TYPE    reduce using rule 8 (types -> INTEGER_TYPE .)
    FLOAT_TYPE      reduce using rule 8 (types -> INTEGER_TYPE .)


state 77

    (9) types -> FLOAT_TYPE .

    COLON           reduce using rule 9 (types -> FLOAT_TYPE .)
    SEMI_COLON      reduce using rule 9 (types -> FLOAT_TYPE .)
    BEGIN           reduce using rule 9 (types -> FLOAT_TYPE .)
    FUNCTION        reduce using rule 9 (types -> FLOAT_TYPE .)
    CYCLE           reduce using rule 9 (types -> FLOAT_TYPE .)
    CONTINUE        reduce using rule 9 (types -> FLOAT_TYPE .)
    BREAK           reduce using rule 9 (types -> FLOAT_TYPE .)
    PRINT           reduce using rule 9 (types -> FLOAT_TYPE .)
    IF              reduce using rule 9 (types -> FLOAT_TYPE .)
    CALL            reduce using rule 9 (types -> FLOAT_TYPE .)
    VARIABLE        reduce using rule 9 (types -> FLOAT_TYPE .)
    OPEN_PAREN      reduce using rule 9 (types -> FLOAT_TYPE .)
    FLOAT_DIGIT     reduce using rule 9 (types -> FLOAT_TYPE .)
    INT_DIGIT       reduce using rule 9 (types -> FLOAT_TYPE .)
    EQUAL           reduce using rule 9 (types -> FLOAT_TYPE .)
    SUM             reduce using rule 9 (types -> FLOAT_TYPE .)
    MINUS           reduce using rule 9 (types -> FLOAT_TYPE .)
    MULTIPLY        reduce using rule 9 (types -> FLOAT_TYPE .)
    DIVISION        reduce using rule 9 (types -> FLOAT_TYPE .)
    $end            reduce using rule 9 (types -> FLOAT_TYPE .)
    INTEGER_TYPE    reduce using rule 9 (types -> FLOAT_TYPE .)
    FLOAT_TYPE      reduce using rule 9 (types -> FLOAT_TYPE .)


state 78

    (18) body -> BEGIN body lines colons . END

    END             shift and go to state 85


state 79

    (33) function -> FUNCTION NAME_FUNCTION variables body .

    COLON           reduce using rule 33 (function -> FUNCTION NAME_FUNCTION variables body .)
    SEMI_COLON      reduce using rule 33 (function -> FUNCTION NAME_FUNCTION variables body .)
    $end            reduce using rule 33 (function -> FUNCTION NAME_FUNCTION variables body .)
    FUNCTION        reduce using rule 33 (function -> FUNCTION NAME_FUNCTION variables body .)
    CYCLE           reduce using rule 33 (function -> FUNCTION NAME_FUNCTION variables body .)
    CONTINUE        reduce using rule 33 (function -> FUNCTION NAME_FUNCTION variables body .)
    BREAK           reduce using rule 33 (function -> FUNCTION NAME_FUNCTION variables body .)
    PRINT           reduce using rule 33 (function -> FUNCTION NAME_FUNCTION variables body .)
    IF              reduce using rule 33 (function -> FUNCTION NAME_FUNCTION variables body .)
    CALL            reduce using rule 33 (function -> FUNCTION NAME_FUNCTION variables body .)
    VARIABLE        reduce using rule 33 (function -> FUNCTION NAME_FUNCTION variables body .)
    OPEN_PAREN      reduce using rule 33 (function -> FUNCTION NAME_FUNCTION variables body .)
    FLOAT_DIGIT     reduce using rule 33 (function -> FUNCTION NAME_FUNCTION variables body .)
    INT_DIGIT       reduce using rule 33 (function -> FUNCTION NAME_FUNCTION variables body .)
    END             reduce using rule 33 (function -> FUNCTION NAME_FUNCTION variables body .)
    EQUAL           reduce using rule 33 (function -> FUNCTION NAME_FUNCTION variables body .)
    SUM             reduce using rule 33 (function -> FUNCTION NAME_FUNCTION variables body .)
    MINUS           reduce using rule 33 (function -> FUNCTION NAME_FUNCTION variables body .)
    MULTIPLY        reduce using rule 33 (function -> FUNCTION NAME_FUNCTION variables body .)
    DIVISION        reduce using rule 33 (function -> FUNCTION NAME_FUNCTION variables body .)
    ELSE            reduce using rule 33 (function -> FUNCTION NAME_FUNCTION variables body .)
    BEGIN           reduce using rule 33 (function -> FUNCTION NAME_FUNCTION variables body .)


state 80

    (41) condition -> expression comparison expression .

    BEGIN           reduce using rule 41 (condition -> expression comparison expression .)
    FUNCTION        reduce using rule 41 (condition -> expression comparison expression .)
    CYCLE           reduce using rule 41 (condition -> expression comparison expression .)
    CONTINUE        reduce using rule 41 (condition -> expression comparison expression .)
    BREAK           reduce using rule 41 (condition -> expression comparison expression .)
    PRINT           reduce using rule 41 (condition -> expression comparison expression .)
    IF              reduce using rule 41 (condition -> expression comparison expression .)
    CALL            reduce using rule 41 (condition -> expression comparison expression .)
    VARIABLE        reduce using rule 41 (condition -> expression comparison expression .)
    OPEN_PAREN      reduce using rule 41 (condition -> expression comparison expression .)
    FLOAT_DIGIT     reduce using rule 41 (condition -> expression comparison expression .)
    INT_DIGIT       reduce using rule 41 (condition -> expression comparison expression .)
    COLON           reduce using rule 41 (condition -> expression comparison expression .)
    SEMI_COLON      reduce using rule 41 (condition -> expression comparison expression .)
    EQUAL           reduce using rule 41 (condition -> expression comparison expression .)
    SUM             reduce using rule 41 (condition -> expression comparison expression .)
    MINUS           reduce using rule 41 (condition -> expression comparison expression .)
    MULTIPLY        reduce using rule 41 (condition -> expression comparison expression .)
    DIVISION        reduce using rule 41 (condition -> expression comparison expression .)
    $end            reduce using rule 41 (condition -> expression comparison expression .)
    END             reduce using rule 41 (condition -> expression comparison expression .)
    ELSE            reduce using rule 41 (condition -> expression comparison expression .)
    CLOSE_PAREN     reduce using rule 41 (condition -> expression comparison expression .)


state 81

    (42) condition -> OPEN_PAREN condition CLOSE_PAREN . logic_op
    (43) logic_op -> .
    (44) logic_op -> . AND
    (45) logic_op -> . OR
    (46) logic_op -> . NEGATION

    BEGIN           reduce using rule 43 (logic_op -> .)
    FUNCTION        reduce using rule 43 (logic_op -> .)
    CYCLE           reduce using rule 43 (logic_op -> .)
    CONTINUE        reduce using rule 43 (logic_op -> .)
    BREAK           reduce using rule 43 (logic_op -> .)
    PRINT           reduce using rule 43 (logic_op -> .)
    IF              reduce using rule 43 (logic_op -> .)
    CALL            reduce using rule 43 (logic_op -> .)
    VARIABLE        reduce using rule 43 (logic_op -> .)
    OPEN_PAREN      reduce using rule 43 (logic_op -> .)
    FLOAT_DIGIT     reduce using rule 43 (logic_op -> .)
    INT_DIGIT       reduce using rule 43 (logic_op -> .)
    COLON           reduce using rule 43 (logic_op -> .)
    SEMI_COLON      reduce using rule 43 (logic_op -> .)
    EQUAL           reduce using rule 43 (logic_op -> .)
    SUM             reduce using rule 43 (logic_op -> .)
    MINUS           reduce using rule 43 (logic_op -> .)
    MULTIPLY        reduce using rule 43 (logic_op -> .)
    DIVISION        reduce using rule 43 (logic_op -> .)
    $end            reduce using rule 43 (logic_op -> .)
    END             reduce using rule 43 (logic_op -> .)
    ELSE            reduce using rule 43 (logic_op -> .)
    CLOSE_PAREN     reduce using rule 43 (logic_op -> .)
    AND             shift and go to state 87
    OR              shift and go to state 88
    NEGATION        shift and go to state 89

    logic_op                       shift and go to state 86

state 82

    (37) if -> IF condition body else . body
    (17) body -> .
    (18) body -> . BEGIN body lines colons END
    (19) body -> . lines colons
    (20) lines -> .
    (21) lines -> . function
    (22) lines -> . cycle
    (23) lines -> . assign
    (24) lines -> . expression
    (25) lines -> . print
    (26) lines -> . if
    (27) lines -> . call
    (32) function -> .
    (33) function -> . FUNCTION NAME_FUNCTION variables body
    (34) cycle -> .
    (35) cycle -> . CYCLE condition body
    (28) assign -> .
    (29) assign -> . variables EQUAL expression
    (53) expression -> .
    (54) expression -> . term SUM term
    (55) expression -> . term MINUS term
    (56) expression -> . CONTINUE
    (57) expression -> . BREAK
    (51) print -> .
    (52) print -> . PRINT expression
    (36) if -> .
    (37) if -> . IF condition body else body
    (30) call -> .
    (31) call -> . CALL NAME_FUNCTION variables
    (13) variables -> .
    (14) variables -> . VARIABLE
    (15) variables -> . VARIABLE COMMA variables
    (16) variables -> . OPEN_PAREN variables CLOSE_PAREN
    (58) term -> .
    (59) term -> . factor MULTIPLY factor
    (60) term -> . factor DIVISION factor
    (61) factor -> .
    (62) factor -> . VARIABLE
    (63) factor -> . FLOAT_DIGIT
    (64) factor -> . INT_DIGIT
    (65) factor -> . OPEN_PAREN expression CLOSE_PAREN

  ! shift/reduce conflict for BEGIN resolved as shift
  ! reduce/reduce conflict for COLON resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for SEMI_COLON resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for $end resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for CYCLE resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for BREAK resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for PRINT resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for IF resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for CALL resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for OPEN_PAREN resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for FLOAT_DIGIT resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for INT_DIGIT resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for END resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for EQUAL resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for SUM resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for MINUS resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for MULTIPLY resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for DIVISION resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for ELSE resolved using rule 17 (body -> .)
  ! shift/reduce conflict for BEGIN resolved as shift
  ! reduce/reduce conflict for COLON resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for SEMI_COLON resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for $end resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for CYCLE resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for BREAK resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for PRINT resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for IF resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for CALL resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for OPEN_PAREN resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for FLOAT_DIGIT resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for INT_DIGIT resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for END resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for EQUAL resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for SUM resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for MINUS resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for MULTIPLY resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for DIVISION resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for ELSE resolved using rule 17 (body -> .)
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! reduce/reduce conflict for COLON resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for SEMI_COLON resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for $end resolved using rule 17 (body -> .)
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! reduce/reduce conflict for CYCLE resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for BREAK resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for PRINT resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for IF resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for CALL resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for OPEN_PAREN resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for FLOAT_DIGIT resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for INT_DIGIT resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for END resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for EQUAL resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for SUM resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for MINUS resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for MULTIPLY resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for DIVISION resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for ELSE resolved using rule 17 (body -> .)
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for CYCLE resolved as shift
  ! reduce/reduce conflict for COLON resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for SEMI_COLON resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for $end resolved using rule 17 (body -> .)
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for CYCLE resolved as shift
  ! reduce/reduce conflict for CONTINUE resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for BREAK resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for PRINT resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for IF resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for CALL resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for OPEN_PAREN resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for FLOAT_DIGIT resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for INT_DIGIT resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for END resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for EQUAL resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for SUM resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for MINUS resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for MULTIPLY resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for DIVISION resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for ELSE resolved using rule 17 (body -> .)
  ! shift/reduce conflict for BEGIN resolved as shift
  ! reduce/reduce conflict for COLON resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for SEMI_COLON resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for $end resolved using rule 17 (body -> .)
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for CYCLE resolved as shift
  ! reduce/reduce conflict for CONTINUE resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for BREAK resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for PRINT resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for IF resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for CALL resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for OPEN_PAREN resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for FLOAT_DIGIT resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for INT_DIGIT resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for END resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for EQUAL resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for SUM resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for MINUS resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for MULTIPLY resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for DIVISION resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for ELSE resolved using rule 17 (body -> .)
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! reduce/reduce conflict for COLON resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for SEMI_COLON resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for $end resolved using rule 17 (body -> .)
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for CYCLE resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! reduce/reduce conflict for PRINT resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for IF resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for CALL resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for OPEN_PAREN resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for FLOAT_DIGIT resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for INT_DIGIT resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for END resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for EQUAL resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for SUM resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for MINUS resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for MULTIPLY resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for DIVISION resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for ELSE resolved using rule 17 (body -> .)
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! reduce/reduce conflict for COLON resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for SEMI_COLON resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for $end resolved using rule 17 (body -> .)
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for CYCLE resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! reduce/reduce conflict for IF resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for CALL resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for OPEN_PAREN resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for FLOAT_DIGIT resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for INT_DIGIT resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for END resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for EQUAL resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for SUM resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for MINUS resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for MULTIPLY resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for DIVISION resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for ELSE resolved using rule 17 (body -> .)
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! reduce/reduce conflict for COLON resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for SEMI_COLON resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for $end resolved using rule 17 (body -> .)
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for CYCLE resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! reduce/reduce conflict for CALL resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for OPEN_PAREN resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for FLOAT_DIGIT resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for INT_DIGIT resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for END resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for EQUAL resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for SUM resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for MINUS resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for MULTIPLY resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for DIVISION resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for ELSE resolved using rule 17 (body -> .)
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for CALL resolved as shift
  ! reduce/reduce conflict for EQUAL resolved using rule 13 (variables -> .)
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for OPEN_PAREN resolved as shift
  ! reduce/reduce conflict for SUM resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for MINUS resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for MULTIPLY resolved using rule 17 (body -> .)
  ! reduce/reduce conflict for DIVISION resolved using rule 17 (body -> .)
  ! shift/reduce conflict for FLOAT_DIGIT resolved as shift
  ! shift/reduce conflict for INT_DIGIT resolved as shift
    COLON           reduce using rule 17 (body -> .)
    SEMI_COLON      reduce using rule 17 (body -> .)
    $end            reduce using rule 17 (body -> .)
    END             reduce using rule 17 (body -> .)
    SUM             reduce using rule 17 (body -> .)
    MINUS           reduce using rule 17 (body -> .)
    MULTIPLY        reduce using rule 17 (body -> .)
    DIVISION        reduce using rule 17 (body -> .)
    ELSE            reduce using rule 17 (body -> .)
    BEGIN           shift and go to state 10
    FUNCTION        shift and go to state 19
    CYCLE           shift and go to state 21
    CONTINUE        shift and go to state 23
    BREAK           shift and go to state 24
    PRINT           shift and go to state 25
    IF              shift and go to state 26
    CALL            shift and go to state 27
    EQUAL           reduce using rule 13 (variables -> .)
    VARIABLE        shift and go to state 28
    OPEN_PAREN      shift and go to state 29
    FLOAT_DIGIT     shift and go to state 31
    INT_DIGIT       shift and go to state 32

  ! FUNCTION        [ reduce using rule 17 (body -> .) ]
  ! CYCLE           [ reduce using rule 17 (body -> .) ]
  ! CONTINUE        [ reduce using rule 17 (body -> .) ]
  ! BREAK           [ reduce using rule 17 (body -> .) ]
  ! PRINT           [ reduce using rule 17 (body -> .) ]
  ! IF              [ reduce using rule 17 (body -> .) ]
  ! CALL            [ reduce using rule 17 (body -> .) ]
  ! VARIABLE        [ reduce using rule 17 (body -> .) ]
  ! OPEN_PAREN      [ reduce using rule 17 (body -> .) ]
  ! FLOAT_DIGIT     [ reduce using rule 17 (body -> .) ]
  ! INT_DIGIT       [ reduce using rule 17 (body -> .) ]
  ! EQUAL           [ reduce using rule 17 (body -> .) ]
  ! BEGIN           [ reduce using rule 17 (body -> .) ]
  ! COLON           [ reduce using rule 20 (lines -> .) ]
  ! SEMI_COLON      [ reduce using rule 20 (lines -> .) ]
  ! $end            [ reduce using rule 20 (lines -> .) ]
  ! FUNCTION        [ reduce using rule 20 (lines -> .) ]
  ! CYCLE           [ reduce using rule 20 (lines -> .) ]
  ! CONTINUE        [ reduce using rule 20 (lines -> .) ]
  ! BREAK           [ reduce using rule 20 (lines -> .) ]
  ! PRINT           [ reduce using rule 20 (lines -> .) ]
  ! IF              [ reduce using rule 20 (lines -> .) ]
  ! CALL            [ reduce using rule 20 (lines -> .) ]
  ! VARIABLE        [ reduce using rule 20 (lines -> .) ]
  ! OPEN_PAREN      [ reduce using rule 20 (lines -> .) ]
  ! FLOAT_DIGIT     [ reduce using rule 20 (lines -> .) ]
  ! INT_DIGIT       [ reduce using rule 20 (lines -> .) ]
  ! END             [ reduce using rule 20 (lines -> .) ]
  ! EQUAL           [ reduce using rule 20 (lines -> .) ]
  ! SUM             [ reduce using rule 20 (lines -> .) ]
  ! MINUS           [ reduce using rule 20 (lines -> .) ]
  ! MULTIPLY        [ reduce using rule 20 (lines -> .) ]
  ! DIVISION        [ reduce using rule 20 (lines -> .) ]
  ! ELSE            [ reduce using rule 20 (lines -> .) ]
  ! BEGIN           [ reduce using rule 20 (lines -> .) ]
  ! COLON           [ reduce using rule 32 (function -> .) ]
  ! SEMI_COLON      [ reduce using rule 32 (function -> .) ]
  ! $end            [ reduce using rule 32 (function -> .) ]
  ! FUNCTION        [ reduce using rule 32 (function -> .) ]
  ! CYCLE           [ reduce using rule 32 (function -> .) ]
  ! CONTINUE        [ reduce using rule 32 (function -> .) ]
  ! BREAK           [ reduce using rule 32 (function -> .) ]
  ! PRINT           [ reduce using rule 32 (function -> .) ]
  ! IF              [ reduce using rule 32 (function -> .) ]
  ! CALL            [ reduce using rule 32 (function -> .) ]
  ! VARIABLE        [ reduce using rule 32 (function -> .) ]
  ! OPEN_PAREN      [ reduce using rule 32 (function -> .) ]
  ! FLOAT_DIGIT     [ reduce using rule 32 (function -> .) ]
  ! INT_DIGIT       [ reduce using rule 32 (function -> .) ]
  ! END             [ reduce using rule 32 (function -> .) ]
  ! EQUAL           [ reduce using rule 32 (function -> .) ]
  ! SUM             [ reduce using rule 32 (function -> .) ]
  ! MINUS           [ reduce using rule 32 (function -> .) ]
  ! MULTIPLY        [ reduce using rule 32 (function -> .) ]
  ! DIVISION        [ reduce using rule 32 (function -> .) ]
  ! ELSE            [ reduce using rule 32 (function -> .) ]
  ! BEGIN           [ reduce using rule 32 (function -> .) ]
  ! COLON           [ reduce using rule 34 (cycle -> .) ]
  ! SEMI_COLON      [ reduce using rule 34 (cycle -> .) ]
  ! $end            [ reduce using rule 34 (cycle -> .) ]
  ! FUNCTION        [ reduce using rule 34 (cycle -> .) ]
  ! CYCLE           [ reduce using rule 34 (cycle -> .) ]
  ! CONTINUE        [ reduce using rule 34 (cycle -> .) ]
  ! BREAK           [ reduce using rule 34 (cycle -> .) ]
  ! PRINT           [ reduce using rule 34 (cycle -> .) ]
  ! IF              [ reduce using rule 34 (cycle -> .) ]
  ! CALL            [ reduce using rule 34 (cycle -> .) ]
  ! VARIABLE        [ reduce using rule 34 (cycle -> .) ]
  ! OPEN_PAREN      [ reduce using rule 34 (cycle -> .) ]
  ! FLOAT_DIGIT     [ reduce using rule 34 (cycle -> .) ]
  ! INT_DIGIT       [ reduce using rule 34 (cycle -> .) ]
  ! END             [ reduce using rule 34 (cycle -> .) ]
  ! EQUAL           [ reduce using rule 34 (cycle -> .) ]
  ! SUM             [ reduce using rule 34 (cycle -> .) ]
  ! MINUS           [ reduce using rule 34 (cycle -> .) ]
  ! MULTIPLY        [ reduce using rule 34 (cycle -> .) ]
  ! DIVISION        [ reduce using rule 34 (cycle -> .) ]
  ! ELSE            [ reduce using rule 34 (cycle -> .) ]
  ! BEGIN           [ reduce using rule 34 (cycle -> .) ]
  ! COLON           [ reduce using rule 28 (assign -> .) ]
  ! SEMI_COLON      [ reduce using rule 28 (assign -> .) ]
  ! $end            [ reduce using rule 28 (assign -> .) ]
  ! FUNCTION        [ reduce using rule 28 (assign -> .) ]
  ! CYCLE           [ reduce using rule 28 (assign -> .) ]
  ! CONTINUE        [ reduce using rule 28 (assign -> .) ]
  ! BREAK           [ reduce using rule 28 (assign -> .) ]
  ! PRINT           [ reduce using rule 28 (assign -> .) ]
  ! IF              [ reduce using rule 28 (assign -> .) ]
  ! CALL            [ reduce using rule 28 (assign -> .) ]
  ! VARIABLE        [ reduce using rule 28 (assign -> .) ]
  ! OPEN_PAREN      [ reduce using rule 28 (assign -> .) ]
  ! FLOAT_DIGIT     [ reduce using rule 28 (assign -> .) ]
  ! INT_DIGIT       [ reduce using rule 28 (assign -> .) ]
  ! END             [ reduce using rule 28 (assign -> .) ]
  ! EQUAL           [ reduce using rule 28 (assign -> .) ]
  ! SUM             [ reduce using rule 28 (assign -> .) ]
  ! MINUS           [ reduce using rule 28 (assign -> .) ]
  ! MULTIPLY        [ reduce using rule 28 (assign -> .) ]
  ! DIVISION        [ reduce using rule 28 (assign -> .) ]
  ! ELSE            [ reduce using rule 28 (assign -> .) ]
  ! BEGIN           [ reduce using rule 28 (assign -> .) ]
  ! COLON           [ reduce using rule 53 (expression -> .) ]
  ! SEMI_COLON      [ reduce using rule 53 (expression -> .) ]
  ! $end            [ reduce using rule 53 (expression -> .) ]
  ! FUNCTION        [ reduce using rule 53 (expression -> .) ]
  ! CYCLE           [ reduce using rule 53 (expression -> .) ]
  ! CONTINUE        [ reduce using rule 53 (expression -> .) ]
  ! BREAK           [ reduce using rule 53 (expression -> .) ]
  ! PRINT           [ reduce using rule 53 (expression -> .) ]
  ! IF              [ reduce using rule 53 (expression -> .) ]
  ! CALL            [ reduce using rule 53 (expression -> .) ]
  ! VARIABLE        [ reduce using rule 53 (expression -> .) ]
  ! OPEN_PAREN      [ reduce using rule 53 (expression -> .) ]
  ! FLOAT_DIGIT     [ reduce using rule 53 (expression -> .) ]
  ! INT_DIGIT       [ reduce using rule 53 (expression -> .) ]
  ! END             [ reduce using rule 53 (expression -> .) ]
  ! EQUAL           [ reduce using rule 53 (expression -> .) ]
  ! SUM             [ reduce using rule 53 (expression -> .) ]
  ! MINUS           [ reduce using rule 53 (expression -> .) ]
  ! MULTIPLY        [ reduce using rule 53 (expression -> .) ]
  ! DIVISION        [ reduce using rule 53 (expression -> .) ]
  ! ELSE            [ reduce using rule 53 (expression -> .) ]
  ! BEGIN           [ reduce using rule 53 (expression -> .) ]
  ! COLON           [ reduce using rule 51 (print -> .) ]
  ! SEMI_COLON      [ reduce using rule 51 (print -> .) ]
  ! $end            [ reduce using rule 51 (print -> .) ]
  ! FUNCTION        [ reduce using rule 51 (print -> .) ]
  ! CYCLE           [ reduce using rule 51 (print -> .) ]
  ! CONTINUE        [ reduce using rule 51 (print -> .) ]
  ! BREAK           [ reduce using rule 51 (print -> .) ]
  ! PRINT           [ reduce using rule 51 (print -> .) ]
  ! IF              [ reduce using rule 51 (print -> .) ]
  ! CALL            [ reduce using rule 51 (print -> .) ]
  ! VARIABLE        [ reduce using rule 51 (print -> .) ]
  ! OPEN_PAREN      [ reduce using rule 51 (print -> .) ]
  ! FLOAT_DIGIT     [ reduce using rule 51 (print -> .) ]
  ! INT_DIGIT       [ reduce using rule 51 (print -> .) ]
  ! END             [ reduce using rule 51 (print -> .) ]
  ! EQUAL           [ reduce using rule 51 (print -> .) ]
  ! SUM             [ reduce using rule 51 (print -> .) ]
  ! MINUS           [ reduce using rule 51 (print -> .) ]
  ! MULTIPLY        [ reduce using rule 51 (print -> .) ]
  ! DIVISION        [ reduce using rule 51 (print -> .) ]
  ! ELSE            [ reduce using rule 51 (print -> .) ]
  ! BEGIN           [ reduce using rule 51 (print -> .) ]
  ! COLON           [ reduce using rule 36 (if -> .) ]
  ! SEMI_COLON      [ reduce using rule 36 (if -> .) ]
  ! $end            [ reduce using rule 36 (if -> .) ]
  ! FUNCTION        [ reduce using rule 36 (if -> .) ]
  ! CYCLE           [ reduce using rule 36 (if -> .) ]
  ! CONTINUE        [ reduce using rule 36 (if -> .) ]
  ! BREAK           [ reduce using rule 36 (if -> .) ]
  ! PRINT           [ reduce using rule 36 (if -> .) ]
  ! IF              [ reduce using rule 36 (if -> .) ]
  ! CALL            [ reduce using rule 36 (if -> .) ]
  ! VARIABLE        [ reduce using rule 36 (if -> .) ]
  ! OPEN_PAREN      [ reduce using rule 36 (if -> .) ]
  ! FLOAT_DIGIT     [ reduce using rule 36 (if -> .) ]
  ! INT_DIGIT       [ reduce using rule 36 (if -> .) ]
  ! END             [ reduce using rule 36 (if -> .) ]
  ! EQUAL           [ reduce using rule 36 (if -> .) ]
  ! SUM             [ reduce using rule 36 (if -> .) ]
  ! MINUS           [ reduce using rule 36 (if -> .) ]
  ! MULTIPLY        [ reduce using rule 36 (if -> .) ]
  ! DIVISION        [ reduce using rule 36 (if -> .) ]
  ! ELSE            [ reduce using rule 36 (if -> .) ]
  ! BEGIN           [ reduce using rule 36 (if -> .) ]
  ! COLON           [ reduce using rule 30 (call -> .) ]
  ! SEMI_COLON      [ reduce using rule 30 (call -> .) ]
  ! $end            [ reduce using rule 30 (call -> .) ]
  ! FUNCTION        [ reduce using rule 30 (call -> .) ]
  ! CYCLE           [ reduce using rule 30 (call -> .) ]
  ! CONTINUE        [ reduce using rule 30 (call -> .) ]
  ! BREAK           [ reduce using rule 30 (call -> .) ]
  ! PRINT           [ reduce using rule 30 (call -> .) ]
  ! IF              [ reduce using rule 30 (call -> .) ]
  ! CALL            [ reduce using rule 30 (call -> .) ]
  ! VARIABLE        [ reduce using rule 30 (call -> .) ]
  ! OPEN_PAREN      [ reduce using rule 30 (call -> .) ]
  ! FLOAT_DIGIT     [ reduce using rule 30 (call -> .) ]
  ! INT_DIGIT       [ reduce using rule 30 (call -> .) ]
  ! END             [ reduce using rule 30 (call -> .) ]
  ! EQUAL           [ reduce using rule 30 (call -> .) ]
  ! SUM             [ reduce using rule 30 (call -> .) ]
  ! MINUS           [ reduce using rule 30 (call -> .) ]
  ! MULTIPLY        [ reduce using rule 30 (call -> .) ]
  ! DIVISION        [ reduce using rule 30 (call -> .) ]
  ! ELSE            [ reduce using rule 30 (call -> .) ]
  ! BEGIN           [ reduce using rule 30 (call -> .) ]
  ! SUM             [ reduce using rule 58 (term -> .) ]
  ! MINUS           [ reduce using rule 58 (term -> .) ]
  ! MULTIPLY        [ reduce using rule 61 (factor -> .) ]
  ! DIVISION        [ reduce using rule 61 (factor -> .) ]

    body                           shift and go to state 90
    lines                          shift and go to state 11
    function                       shift and go to state 12
    cycle                          shift and go to state 13
    assign                         shift and go to state 14
    expression                     shift and go to state 15
    print                          shift and go to state 16
    if                             shift and go to state 17
    call                           shift and go to state 18
    variables                      shift and go to state 20
    term                           shift and go to state 22
    factor                         shift and go to state 30

state 83

    (39) else -> ELSE .

    BEGIN           reduce using rule 39 (else -> ELSE .)
    FUNCTION        reduce using rule 39 (else -> ELSE .)
    CYCLE           reduce using rule 39 (else -> ELSE .)
    CONTINUE        reduce using rule 39 (else -> ELSE .)
    BREAK           reduce using rule 39 (else -> ELSE .)
    PRINT           reduce using rule 39 (else -> ELSE .)
    IF              reduce using rule 39 (else -> ELSE .)
    CALL            reduce using rule 39 (else -> ELSE .)
    VARIABLE        reduce using rule 39 (else -> ELSE .)
    OPEN_PAREN      reduce using rule 39 (else -> ELSE .)
    FLOAT_DIGIT     reduce using rule 39 (else -> ELSE .)
    INT_DIGIT       reduce using rule 39 (else -> ELSE .)
    COLON           reduce using rule 39 (else -> ELSE .)
    SEMI_COLON      reduce using rule 39 (else -> ELSE .)
    EQUAL           reduce using rule 39 (else -> ELSE .)
    SUM             reduce using rule 39 (else -> ELSE .)
    MINUS           reduce using rule 39 (else -> ELSE .)
    MULTIPLY        reduce using rule 39 (else -> ELSE .)
    DIVISION        reduce using rule 39 (else -> ELSE .)
    $end            reduce using rule 39 (else -> ELSE .)
    END             reduce using rule 39 (else -> ELSE .)
    ELSE            reduce using rule 39 (else -> ELSE .)


state 84

    (6) vars -> VAR vars variables colons types colons .

    COLON           reduce using rule 6 (vars -> VAR vars variables colons types colons .)
    SEMI_COLON      reduce using rule 6 (vars -> VAR vars variables colons types colons .)
    BEGIN           reduce using rule 6 (vars -> VAR vars variables colons types colons .)
    FUNCTION        reduce using rule 6 (vars -> VAR vars variables colons types colons .)
    CYCLE           reduce using rule 6 (vars -> VAR vars variables colons types colons .)
    CONTINUE        reduce using rule 6 (vars -> VAR vars variables colons types colons .)
    BREAK           reduce using rule 6 (vars -> VAR vars variables colons types colons .)
    PRINT           reduce using rule 6 (vars -> VAR vars variables colons types colons .)
    IF              reduce using rule 6 (vars -> VAR vars variables colons types colons .)
    CALL            reduce using rule 6 (vars -> VAR vars variables colons types colons .)
    VARIABLE        reduce using rule 6 (vars -> VAR vars variables colons types colons .)
    OPEN_PAREN      reduce using rule 6 (vars -> VAR vars variables colons types colons .)
    FLOAT_DIGIT     reduce using rule 6 (vars -> VAR vars variables colons types colons .)
    INT_DIGIT       reduce using rule 6 (vars -> VAR vars variables colons types colons .)
    EQUAL           reduce using rule 6 (vars -> VAR vars variables colons types colons .)
    SUM             reduce using rule 6 (vars -> VAR vars variables colons types colons .)
    MINUS           reduce using rule 6 (vars -> VAR vars variables colons types colons .)
    MULTIPLY        reduce using rule 6 (vars -> VAR vars variables colons types colons .)
    DIVISION        reduce using rule 6 (vars -> VAR vars variables colons types colons .)
    $end            reduce using rule 6 (vars -> VAR vars variables colons types colons .)
    INTEGER_TYPE    reduce using rule 6 (vars -> VAR vars variables colons types colons .)
    FLOAT_TYPE      reduce using rule 6 (vars -> VAR vars variables colons types colons .)


state 85

    (18) body -> BEGIN body lines colons END .

    $end            reduce using rule 18 (body -> BEGIN body lines colons END .)
    FUNCTION        reduce using rule 18 (body -> BEGIN body lines colons END .)
    CYCLE           reduce using rule 18 (body -> BEGIN body lines colons END .)
    CONTINUE        reduce using rule 18 (body -> BEGIN body lines colons END .)
    BREAK           reduce using rule 18 (body -> BEGIN body lines colons END .)
    PRINT           reduce using rule 18 (body -> BEGIN body lines colons END .)
    IF              reduce using rule 18 (body -> BEGIN body lines colons END .)
    CALL            reduce using rule 18 (body -> BEGIN body lines colons END .)
    VARIABLE        reduce using rule 18 (body -> BEGIN body lines colons END .)
    OPEN_PAREN      reduce using rule 18 (body -> BEGIN body lines colons END .)
    FLOAT_DIGIT     reduce using rule 18 (body -> BEGIN body lines colons END .)
    INT_DIGIT       reduce using rule 18 (body -> BEGIN body lines colons END .)
    COLON           reduce using rule 18 (body -> BEGIN body lines colons END .)
    SEMI_COLON      reduce using rule 18 (body -> BEGIN body lines colons END .)
    END             reduce using rule 18 (body -> BEGIN body lines colons END .)
    EQUAL           reduce using rule 18 (body -> BEGIN body lines colons END .)
    SUM             reduce using rule 18 (body -> BEGIN body lines colons END .)
    MINUS           reduce using rule 18 (body -> BEGIN body lines colons END .)
    MULTIPLY        reduce using rule 18 (body -> BEGIN body lines colons END .)
    DIVISION        reduce using rule 18 (body -> BEGIN body lines colons END .)
    ELSE            reduce using rule 18 (body -> BEGIN body lines colons END .)
    BEGIN           reduce using rule 18 (body -> BEGIN body lines colons END .)


state 86

    (42) condition -> OPEN_PAREN condition CLOSE_PAREN logic_op .

    BEGIN           reduce using rule 42 (condition -> OPEN_PAREN condition CLOSE_PAREN logic_op .)
    FUNCTION        reduce using rule 42 (condition -> OPEN_PAREN condition CLOSE_PAREN logic_op .)
    CYCLE           reduce using rule 42 (condition -> OPEN_PAREN condition CLOSE_PAREN logic_op .)
    CONTINUE        reduce using rule 42 (condition -> OPEN_PAREN condition CLOSE_PAREN logic_op .)
    BREAK           reduce using rule 42 (condition -> OPEN_PAREN condition CLOSE_PAREN logic_op .)
    PRINT           reduce using rule 42 (condition -> OPEN_PAREN condition CLOSE_PAREN logic_op .)
    IF              reduce using rule 42 (condition -> OPEN_PAREN condition CLOSE_PAREN logic_op .)
    CALL            reduce using rule 42 (condition -> OPEN_PAREN condition CLOSE_PAREN logic_op .)
    VARIABLE        reduce using rule 42 (condition -> OPEN_PAREN condition CLOSE_PAREN logic_op .)
    OPEN_PAREN      reduce using rule 42 (condition -> OPEN_PAREN condition CLOSE_PAREN logic_op .)
    FLOAT_DIGIT     reduce using rule 42 (condition -> OPEN_PAREN condition CLOSE_PAREN logic_op .)
    INT_DIGIT       reduce using rule 42 (condition -> OPEN_PAREN condition CLOSE_PAREN logic_op .)
    COLON           reduce using rule 42 (condition -> OPEN_PAREN condition CLOSE_PAREN logic_op .)
    SEMI_COLON      reduce using rule 42 (condition -> OPEN_PAREN condition CLOSE_PAREN logic_op .)
    EQUAL           reduce using rule 42 (condition -> OPEN_PAREN condition CLOSE_PAREN logic_op .)
    SUM             reduce using rule 42 (condition -> OPEN_PAREN condition CLOSE_PAREN logic_op .)
    MINUS           reduce using rule 42 (condition -> OPEN_PAREN condition CLOSE_PAREN logic_op .)
    MULTIPLY        reduce using rule 42 (condition -> OPEN_PAREN condition CLOSE_PAREN logic_op .)
    DIVISION        reduce using rule 42 (condition -> OPEN_PAREN condition CLOSE_PAREN logic_op .)
    $end            reduce using rule 42 (condition -> OPEN_PAREN condition CLOSE_PAREN logic_op .)
    END             reduce using rule 42 (condition -> OPEN_PAREN condition CLOSE_PAREN logic_op .)
    ELSE            reduce using rule 42 (condition -> OPEN_PAREN condition CLOSE_PAREN logic_op .)
    CLOSE_PAREN     reduce using rule 42 (condition -> OPEN_PAREN condition CLOSE_PAREN logic_op .)


state 87

    (44) logic_op -> AND .

    BEGIN           reduce using rule 44 (logic_op -> AND .)
    FUNCTION        reduce using rule 44 (logic_op -> AND .)
    CYCLE           reduce using rule 44 (logic_op -> AND .)
    CONTINUE        reduce using rule 44 (logic_op -> AND .)
    BREAK           reduce using rule 44 (logic_op -> AND .)
    PRINT           reduce using rule 44 (logic_op -> AND .)
    IF              reduce using rule 44 (logic_op -> AND .)
    CALL            reduce using rule 44 (logic_op -> AND .)
    VARIABLE        reduce using rule 44 (logic_op -> AND .)
    OPEN_PAREN      reduce using rule 44 (logic_op -> AND .)
    FLOAT_DIGIT     reduce using rule 44 (logic_op -> AND .)
    INT_DIGIT       reduce using rule 44 (logic_op -> AND .)
    COLON           reduce using rule 44 (logic_op -> AND .)
    SEMI_COLON      reduce using rule 44 (logic_op -> AND .)
    EQUAL           reduce using rule 44 (logic_op -> AND .)
    SUM             reduce using rule 44 (logic_op -> AND .)
    MINUS           reduce using rule 44 (logic_op -> AND .)
    MULTIPLY        reduce using rule 44 (logic_op -> AND .)
    DIVISION        reduce using rule 44 (logic_op -> AND .)
    $end            reduce using rule 44 (logic_op -> AND .)
    END             reduce using rule 44 (logic_op -> AND .)
    ELSE            reduce using rule 44 (logic_op -> AND .)
    CLOSE_PAREN     reduce using rule 44 (logic_op -> AND .)


state 88

    (45) logic_op -> OR .

    BEGIN           reduce using rule 45 (logic_op -> OR .)
    FUNCTION        reduce using rule 45 (logic_op -> OR .)
    CYCLE           reduce using rule 45 (logic_op -> OR .)
    CONTINUE        reduce using rule 45 (logic_op -> OR .)
    BREAK           reduce using rule 45 (logic_op -> OR .)
    PRINT           reduce using rule 45 (logic_op -> OR .)
    IF              reduce using rule 45 (logic_op -> OR .)
    CALL            reduce using rule 45 (logic_op -> OR .)
    VARIABLE        reduce using rule 45 (logic_op -> OR .)
    OPEN_PAREN      reduce using rule 45 (logic_op -> OR .)
    FLOAT_DIGIT     reduce using rule 45 (logic_op -> OR .)
    INT_DIGIT       reduce using rule 45 (logic_op -> OR .)
    COLON           reduce using rule 45 (logic_op -> OR .)
    SEMI_COLON      reduce using rule 45 (logic_op -> OR .)
    EQUAL           reduce using rule 45 (logic_op -> OR .)
    SUM             reduce using rule 45 (logic_op -> OR .)
    MINUS           reduce using rule 45 (logic_op -> OR .)
    MULTIPLY        reduce using rule 45 (logic_op -> OR .)
    DIVISION        reduce using rule 45 (logic_op -> OR .)
    $end            reduce using rule 45 (logic_op -> OR .)
    END             reduce using rule 45 (logic_op -> OR .)
    ELSE            reduce using rule 45 (logic_op -> OR .)
    CLOSE_PAREN     reduce using rule 45 (logic_op -> OR .)


state 89

    (46) logic_op -> NEGATION .

    BEGIN           reduce using rule 46 (logic_op -> NEGATION .)
    FUNCTION        reduce using rule 46 (logic_op -> NEGATION .)
    CYCLE           reduce using rule 46 (logic_op -> NEGATION .)
    CONTINUE        reduce using rule 46 (logic_op -> NEGATION .)
    BREAK           reduce using rule 46 (logic_op -> NEGATION .)
    PRINT           reduce using rule 46 (logic_op -> NEGATION .)
    IF              reduce using rule 46 (logic_op -> NEGATION .)
    CALL            reduce using rule 46 (logic_op -> NEGATION .)
    VARIABLE        reduce using rule 46 (logic_op -> NEGATION .)
    OPEN_PAREN      reduce using rule 46 (logic_op -> NEGATION .)
    FLOAT_DIGIT     reduce using rule 46 (logic_op -> NEGATION .)
    INT_DIGIT       reduce using rule 46 (logic_op -> NEGATION .)
    COLON           reduce using rule 46 (logic_op -> NEGATION .)
    SEMI_COLON      reduce using rule 46 (logic_op -> NEGATION .)
    EQUAL           reduce using rule 46 (logic_op -> NEGATION .)
    SUM             reduce using rule 46 (logic_op -> NEGATION .)
    MINUS           reduce using rule 46 (logic_op -> NEGATION .)
    MULTIPLY        reduce using rule 46 (logic_op -> NEGATION .)
    DIVISION        reduce using rule 46 (logic_op -> NEGATION .)
    $end            reduce using rule 46 (logic_op -> NEGATION .)
    END             reduce using rule 46 (logic_op -> NEGATION .)
    ELSE            reduce using rule 46 (logic_op -> NEGATION .)
    CLOSE_PAREN     reduce using rule 46 (logic_op -> NEGATION .)


state 90

    (37) if -> IF condition body else body .

    COLON           reduce using rule 37 (if -> IF condition body else body .)
    SEMI_COLON      reduce using rule 37 (if -> IF condition body else body .)
    $end            reduce using rule 37 (if -> IF condition body else body .)
    FUNCTION        reduce using rule 37 (if -> IF condition body else body .)
    CYCLE           reduce using rule 37 (if -> IF condition body else body .)
    CONTINUE        reduce using rule 37 (if -> IF condition body else body .)
    BREAK           reduce using rule 37 (if -> IF condition body else body .)
    PRINT           reduce using rule 37 (if -> IF condition body else body .)
    IF              reduce using rule 37 (if -> IF condition body else body .)
    CALL            reduce using rule 37 (if -> IF condition body else body .)
    VARIABLE        reduce using rule 37 (if -> IF condition body else body .)
    OPEN_PAREN      reduce using rule 37 (if -> IF condition body else body .)
    FLOAT_DIGIT     reduce using rule 37 (if -> IF condition body else body .)
    INT_DIGIT       reduce using rule 37 (if -> IF condition body else body .)
    END             reduce using rule 37 (if -> IF condition body else body .)
    EQUAL           reduce using rule 37 (if -> IF condition body else body .)
    SUM             reduce using rule 37 (if -> IF condition body else body .)
    MINUS           reduce using rule 37 (if -> IF condition body else body .)
    MULTIPLY        reduce using rule 37 (if -> IF condition body else body .)
    DIVISION        reduce using rule 37 (if -> IF condition body else body .)
    ELSE            reduce using rule 37 (if -> IF condition body else body .)
    BEGIN           reduce using rule 37 (if -> IF condition body else body .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for COLON in state 2 resolved as shift
WARNING: shift/reduce conflict for SEMI_COLON in state 2 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 8 resolved as shift
WARNING: shift/reduce conflict for OPEN_PAREN in state 8 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 10 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 10 resolved as shift
WARNING: shift/reduce conflict for CYCLE in state 10 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 10 resolved as shift
WARNING: shift/reduce conflict for CYCLE in state 10 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 10 resolved as shift
WARNING: shift/reduce conflict for CYCLE in state 10 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 10 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 10 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 10 resolved as shift
WARNING: shift/reduce conflict for CYCLE in state 10 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 10 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 10 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 10 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 10 resolved as shift
WARNING: shift/reduce conflict for CYCLE in state 10 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 10 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 10 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 10 resolved as shift
WARNING: shift/reduce conflict for IF in state 10 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 10 resolved as shift
WARNING: shift/reduce conflict for CYCLE in state 10 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 10 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 10 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 10 resolved as shift
WARNING: shift/reduce conflict for IF in state 10 resolved as shift
WARNING: shift/reduce conflict for CALL in state 10 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 10 resolved as shift
WARNING: shift/reduce conflict for OPEN_PAREN in state 10 resolved as shift
WARNING: shift/reduce conflict for FLOAT_DIGIT in state 10 resolved as shift
WARNING: shift/reduce conflict for INT_DIGIT in state 10 resolved as shift
WARNING: shift/reduce conflict for COLON in state 11 resolved as shift
WARNING: shift/reduce conflict for SEMI_COLON in state 11 resolved as shift
WARNING: shift/reduce conflict for OPEN_PAREN in state 21 resolved as shift
WARNING: shift/reduce conflict for OPEN_PAREN in state 21 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 21 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 21 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 21 resolved as shift
WARNING: shift/reduce conflict for FLOAT_DIGIT in state 21 resolved as shift
WARNING: shift/reduce conflict for INT_DIGIT in state 21 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 25 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 25 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 25 resolved as shift
WARNING: shift/reduce conflict for FLOAT_DIGIT in state 25 resolved as shift
WARNING: shift/reduce conflict for INT_DIGIT in state 25 resolved as shift
WARNING: shift/reduce conflict for OPEN_PAREN in state 25 resolved as shift
WARNING: shift/reduce conflict for OPEN_PAREN in state 26 resolved as shift
WARNING: shift/reduce conflict for OPEN_PAREN in state 26 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 26 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 26 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 26 resolved as shift
WARNING: shift/reduce conflict for FLOAT_DIGIT in state 26 resolved as shift
WARNING: shift/reduce conflict for INT_DIGIT in state 26 resolved as shift
WARNING: shift/reduce conflict for COLON in state 33 resolved as shift
WARNING: shift/reduce conflict for SEMI_COLON in state 33 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 38 resolved as shift
WARNING: shift/reduce conflict for OPEN_PAREN in state 38 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 39 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 39 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 39 resolved as shift
WARNING: shift/reduce conflict for FLOAT_DIGIT in state 39 resolved as shift
WARNING: shift/reduce conflict for INT_DIGIT in state 39 resolved as shift
WARNING: shift/reduce conflict for OPEN_PAREN in state 39 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 40 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 40 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 40 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 40 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 40 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 40 resolved as shift
WARNING: shift/reduce conflict for CYCLE in state 40 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 40 resolved as shift
WARNING: shift/reduce conflict for CYCLE in state 40 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 40 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 40 resolved as shift
WARNING: shift/reduce conflict for CYCLE in state 40 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 40 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 40 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 40 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 40 resolved as shift
WARNING: shift/reduce conflict for CYCLE in state 40 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 40 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 40 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 40 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 40 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 40 resolved as shift
WARNING: shift/reduce conflict for CYCLE in state 40 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 40 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 40 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 40 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 40 resolved as shift
WARNING: shift/reduce conflict for IF in state 40 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 40 resolved as shift
WARNING: shift/reduce conflict for CYCLE in state 40 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 40 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 40 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 40 resolved as shift
WARNING: shift/reduce conflict for IF in state 40 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 40 resolved as shift
WARNING: shift/reduce conflict for CALL in state 40 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 40 resolved as shift
WARNING: shift/reduce conflict for OPEN_PAREN in state 40 resolved as shift
WARNING: shift/reduce conflict for FLOAT_DIGIT in state 40 resolved as shift
WARNING: shift/reduce conflict for INT_DIGIT in state 40 resolved as shift
WARNING: shift/reduce conflict for OPEN_PAREN in state 42 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 42 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 42 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 42 resolved as shift
WARNING: shift/reduce conflict for FLOAT_DIGIT in state 42 resolved as shift
WARNING: shift/reduce conflict for INT_DIGIT in state 42 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 44 resolved as shift
WARNING: shift/reduce conflict for FLOAT_DIGIT in state 44 resolved as shift
WARNING: shift/reduce conflict for INT_DIGIT in state 44 resolved as shift
WARNING: shift/reduce conflict for OPEN_PAREN in state 44 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 45 resolved as shift
WARNING: shift/reduce conflict for FLOAT_DIGIT in state 45 resolved as shift
WARNING: shift/reduce conflict for INT_DIGIT in state 45 resolved as shift
WARNING: shift/reduce conflict for OPEN_PAREN in state 45 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 48 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 48 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 48 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 48 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 48 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 48 resolved as shift
WARNING: shift/reduce conflict for CYCLE in state 48 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 48 resolved as shift
WARNING: shift/reduce conflict for CYCLE in state 48 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 48 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 48 resolved as shift
WARNING: shift/reduce conflict for CYCLE in state 48 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 48 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 48 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 48 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 48 resolved as shift
WARNING: shift/reduce conflict for CYCLE in state 48 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 48 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 48 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 48 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 48 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 48 resolved as shift
WARNING: shift/reduce conflict for CYCLE in state 48 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 48 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 48 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 48 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 48 resolved as shift
WARNING: shift/reduce conflict for IF in state 48 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 48 resolved as shift
WARNING: shift/reduce conflict for CYCLE in state 48 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 48 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 48 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 48 resolved as shift
WARNING: shift/reduce conflict for IF in state 48 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 48 resolved as shift
WARNING: shift/reduce conflict for CALL in state 48 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 48 resolved as shift
WARNING: shift/reduce conflict for OPEN_PAREN in state 48 resolved as shift
WARNING: shift/reduce conflict for FLOAT_DIGIT in state 48 resolved as shift
WARNING: shift/reduce conflict for INT_DIGIT in state 48 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 49 resolved as shift
WARNING: shift/reduce conflict for OPEN_PAREN in state 49 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 50 resolved as shift
WARNING: shift/reduce conflict for OPEN_PAREN in state 50 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 53 resolved as shift
WARNING: shift/reduce conflict for FLOAT_DIGIT in state 53 resolved as shift
WARNING: shift/reduce conflict for INT_DIGIT in state 53 resolved as shift
WARNING: shift/reduce conflict for OPEN_PAREN in state 53 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 54 resolved as shift
WARNING: shift/reduce conflict for FLOAT_DIGIT in state 54 resolved as shift
WARNING: shift/reduce conflict for INT_DIGIT in state 54 resolved as shift
WARNING: shift/reduce conflict for OPEN_PAREN in state 54 resolved as shift
WARNING: shift/reduce conflict for INTEGER_TYPE in state 55 resolved as shift
WARNING: shift/reduce conflict for FLOAT_TYPE in state 55 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 57 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 57 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 57 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 57 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 57 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 57 resolved as shift
WARNING: shift/reduce conflict for CYCLE in state 57 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 57 resolved as shift
WARNING: shift/reduce conflict for CYCLE in state 57 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 57 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 57 resolved as shift
WARNING: shift/reduce conflict for CYCLE in state 57 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 57 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 57 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 57 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 57 resolved as shift
WARNING: shift/reduce conflict for CYCLE in state 57 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 57 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 57 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 57 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 57 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 57 resolved as shift
WARNING: shift/reduce conflict for CYCLE in state 57 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 57 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 57 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 57 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 57 resolved as shift
WARNING: shift/reduce conflict for IF in state 57 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 57 resolved as shift
WARNING: shift/reduce conflict for CYCLE in state 57 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 57 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 57 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 57 resolved as shift
WARNING: shift/reduce conflict for IF in state 57 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 57 resolved as shift
WARNING: shift/reduce conflict for CALL in state 57 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 57 resolved as shift
WARNING: shift/reduce conflict for OPEN_PAREN in state 57 resolved as shift
WARNING: shift/reduce conflict for FLOAT_DIGIT in state 57 resolved as shift
WARNING: shift/reduce conflict for INT_DIGIT in state 57 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 60 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 60 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 60 resolved as shift
WARNING: shift/reduce conflict for FLOAT_DIGIT in state 60 resolved as shift
WARNING: shift/reduce conflict for INT_DIGIT in state 60 resolved as shift
WARNING: shift/reduce conflict for OPEN_PAREN in state 60 resolved as shift
WARNING: shift/reduce conflict for CLOSE_PAREN in state 65 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 68 resolved as shift
WARNING: shift/reduce conflict for COLON in state 75 resolved as shift
WARNING: shift/reduce conflict for SEMI_COLON in state 75 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 82 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 82 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 82 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 82 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 82 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 82 resolved as shift
WARNING: shift/reduce conflict for CYCLE in state 82 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 82 resolved as shift
WARNING: shift/reduce conflict for CYCLE in state 82 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 82 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 82 resolved as shift
WARNING: shift/reduce conflict for CYCLE in state 82 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 82 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 82 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 82 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 82 resolved as shift
WARNING: shift/reduce conflict for CYCLE in state 82 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 82 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 82 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 82 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 82 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 82 resolved as shift
WARNING: shift/reduce conflict for CYCLE in state 82 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 82 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 82 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 82 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 82 resolved as shift
WARNING: shift/reduce conflict for IF in state 82 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 82 resolved as shift
WARNING: shift/reduce conflict for CYCLE in state 82 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 82 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 82 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 82 resolved as shift
WARNING: shift/reduce conflict for IF in state 82 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 82 resolved as shift
WARNING: shift/reduce conflict for CALL in state 82 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 82 resolved as shift
WARNING: shift/reduce conflict for OPEN_PAREN in state 82 resolved as shift
WARNING: shift/reduce conflict for FLOAT_DIGIT in state 82 resolved as shift
WARNING: shift/reduce conflict for INT_DIGIT in state 82 resolved as shift
WARNING: reduce/reduce conflict in state 0 resolved using rule (program -> <empty>)
WARNING: rejected rule (block -> <empty>) in state 0
WARNING: reduce/reduce conflict in state 0 resolved using rule (block -> <empty>)
WARNING: rejected rule (vars -> <empty>) in state 0
WARNING: reduce/reduce conflict in state 0 resolved using rule (program -> <empty>)
WARNING: rejected rule (vars -> <empty>) in state 0
WARNING: reduce/reduce conflict in state 5 resolved using rule (body -> <empty>)
WARNING: rejected rule (lines -> <empty>) in state 5
WARNING: reduce/reduce conflict in state 5 resolved using rule (lines -> <empty>)
WARNING: rejected rule (function -> <empty>) in state 5
WARNING: reduce/reduce conflict in state 5 resolved using rule (body -> <empty>)
WARNING: rejected rule (function -> <empty>) in state 5
WARNING: reduce/reduce conflict in state 5 resolved using rule (lines -> <empty>)
WARNING: rejected rule (cycle -> <empty>) in state 5
WARNING: reduce/reduce conflict in state 5 resolved using rule (body -> <empty>)
WARNING: rejected rule (cycle -> <empty>) in state 5
WARNING: reduce/reduce conflict in state 5 resolved using rule (lines -> <empty>)
WARNING: rejected rule (assign -> <empty>) in state 5
WARNING: reduce/reduce conflict in state 5 resolved using rule (body -> <empty>)
WARNING: rejected rule (assign -> <empty>) in state 5
WARNING: reduce/reduce conflict in state 5 resolved using rule (lines -> <empty>)
WARNING: rejected rule (expression -> <empty>) in state 5
WARNING: reduce/reduce conflict in state 5 resolved using rule (body -> <empty>)
WARNING: rejected rule (expression -> <empty>) in state 5
WARNING: reduce/reduce conflict in state 5 resolved using rule (lines -> <empty>)
WARNING: rejected rule (print -> <empty>) in state 5
WARNING: reduce/reduce conflict in state 5 resolved using rule (body -> <empty>)
WARNING: rejected rule (print -> <empty>) in state 5
WARNING: reduce/reduce conflict in state 5 resolved using rule (lines -> <empty>)
WARNING: rejected rule (if -> <empty>) in state 5
WARNING: reduce/reduce conflict in state 5 resolved using rule (body -> <empty>)
WARNING: rejected rule (if -> <empty>) in state 5
WARNING: reduce/reduce conflict in state 5 resolved using rule (lines -> <empty>)
WARNING: rejected rule (call -> <empty>) in state 5
WARNING: reduce/reduce conflict in state 5 resolved using rule (body -> <empty>)
WARNING: rejected rule (call -> <empty>) in state 5
WARNING: reduce/reduce conflict in state 10 resolved using rule (body -> <empty>)
WARNING: rejected rule (lines -> <empty>) in state 10
WARNING: reduce/reduce conflict in state 10 resolved using rule (body -> <empty>)
WARNING: rejected rule (function -> <empty>) in state 10
WARNING: reduce/reduce conflict in state 10 resolved using rule (body -> <empty>)
WARNING: rejected rule (cycle -> <empty>) in state 10
WARNING: reduce/reduce conflict in state 10 resolved using rule (body -> <empty>)
WARNING: rejected rule (assign -> <empty>) in state 10
WARNING: reduce/reduce conflict in state 10 resolved using rule (body -> <empty>)
WARNING: rejected rule (expression -> <empty>) in state 10
WARNING: reduce/reduce conflict in state 10 resolved using rule (body -> <empty>)
WARNING: rejected rule (print -> <empty>) in state 10
WARNING: reduce/reduce conflict in state 10 resolved using rule (body -> <empty>)
WARNING: rejected rule (if -> <empty>) in state 10
WARNING: reduce/reduce conflict in state 10 resolved using rule (body -> <empty>)
WARNING: rejected rule (call -> <empty>) in state 10
WARNING: reduce/reduce conflict in state 10 resolved using rule (variables -> <empty>)
WARNING: rejected rule (body -> <empty>) in state 10
WARNING: reduce/reduce conflict in state 10 resolved using rule (body -> <empty>)
WARNING: rejected rule (term -> <empty>) in state 10
WARNING: reduce/reduce conflict in state 10 resolved using rule (body -> <empty>)
WARNING: rejected rule (factor -> <empty>) in state 10
WARNING: reduce/reduce conflict in state 21 resolved using rule (condition -> <empty>)
WARNING: rejected rule (expression -> <empty>) in state 21
WARNING: reduce/reduce conflict in state 21 resolved using rule (condition -> <empty>)
WARNING: rejected rule (term -> <empty>) in state 21
WARNING: reduce/reduce conflict in state 21 resolved using rule (condition -> <empty>)
WARNING: rejected rule (factor -> <empty>) in state 21
WARNING: reduce/reduce conflict in state 25 resolved using rule (expression -> <empty>)
WARNING: rejected rule (term -> <empty>) in state 25
WARNING: reduce/reduce conflict in state 25 resolved using rule (expression -> <empty>)
WARNING: rejected rule (factor -> <empty>) in state 25
WARNING: reduce/reduce conflict in state 26 resolved using rule (condition -> <empty>)
WARNING: rejected rule (expression -> <empty>) in state 26
WARNING: reduce/reduce conflict in state 26 resolved using rule (condition -> <empty>)
WARNING: rejected rule (term -> <empty>) in state 26
WARNING: reduce/reduce conflict in state 26 resolved using rule (condition -> <empty>)
WARNING: rejected rule (factor -> <empty>) in state 26
WARNING: reduce/reduce conflict in state 29 resolved using rule (variables -> <empty>)
WARNING: rejected rule (expression -> <empty>) in state 29
WARNING: reduce/reduce conflict in state 36 resolved using rule (lines -> <empty>)
WARNING: rejected rule (function -> <empty>) in state 36
WARNING: reduce/reduce conflict in state 36 resolved using rule (lines -> <empty>)
WARNING: rejected rule (cycle -> <empty>) in state 36
WARNING: reduce/reduce conflict in state 36 resolved using rule (lines -> <empty>)
WARNING: rejected rule (assign -> <empty>) in state 36
WARNING: reduce/reduce conflict in state 36 resolved using rule (lines -> <empty>)
WARNING: rejected rule (expression -> <empty>) in state 36
WARNING: reduce/reduce conflict in state 36 resolved using rule (lines -> <empty>)
WARNING: rejected rule (print -> <empty>) in state 36
WARNING: reduce/reduce conflict in state 36 resolved using rule (lines -> <empty>)
WARNING: rejected rule (if -> <empty>) in state 36
WARNING: reduce/reduce conflict in state 36 resolved using rule (lines -> <empty>)
WARNING: rejected rule (call -> <empty>) in state 36
WARNING: reduce/reduce conflict in state 39 resolved using rule (expression -> <empty>)
WARNING: rejected rule (term -> <empty>) in state 39
WARNING: reduce/reduce conflict in state 39 resolved using rule (expression -> <empty>)
WARNING: rejected rule (factor -> <empty>) in state 39
WARNING: reduce/reduce conflict in state 40 resolved using rule (body -> <empty>)
WARNING: rejected rule (lines -> <empty>) in state 40
WARNING: reduce/reduce conflict in state 40 resolved using rule (body -> <empty>)
WARNING: rejected rule (function -> <empty>) in state 40
WARNING: reduce/reduce conflict in state 40 resolved using rule (body -> <empty>)
WARNING: rejected rule (cycle -> <empty>) in state 40
WARNING: reduce/reduce conflict in state 40 resolved using rule (body -> <empty>)
WARNING: rejected rule (assign -> <empty>) in state 40
WARNING: reduce/reduce conflict in state 40 resolved using rule (body -> <empty>)
WARNING: rejected rule (expression -> <empty>) in state 40
WARNING: reduce/reduce conflict in state 40 resolved using rule (body -> <empty>)
WARNING: rejected rule (print -> <empty>) in state 40
WARNING: reduce/reduce conflict in state 40 resolved using rule (body -> <empty>)
WARNING: rejected rule (if -> <empty>) in state 40
WARNING: reduce/reduce conflict in state 40 resolved using rule (body -> <empty>)
WARNING: rejected rule (call -> <empty>) in state 40
WARNING: reduce/reduce conflict in state 40 resolved using rule (variables -> <empty>)
WARNING: rejected rule (body -> <empty>) in state 40
WARNING: reduce/reduce conflict in state 40 resolved using rule (body -> <empty>)
WARNING: rejected rule (term -> <empty>) in state 40
WARNING: reduce/reduce conflict in state 40 resolved using rule (body -> <empty>)
WARNING: rejected rule (factor -> <empty>) in state 40
WARNING: reduce/reduce conflict in state 42 resolved using rule (condition -> <empty>)
WARNING: rejected rule (expression -> <empty>) in state 42
WARNING: reduce/reduce conflict in state 42 resolved using rule (expression -> <empty>)
WARNING: rejected rule (term -> <empty>) in state 42
WARNING: reduce/reduce conflict in state 42 resolved using rule (expression -> <empty>)
WARNING: rejected rule (factor -> <empty>) in state 42
WARNING: reduce/reduce conflict in state 44 resolved using rule (term -> <empty>)
WARNING: rejected rule (factor -> <empty>) in state 44
WARNING: reduce/reduce conflict in state 45 resolved using rule (term -> <empty>)
WARNING: rejected rule (factor -> <empty>) in state 45
WARNING: reduce/reduce conflict in state 48 resolved using rule (body -> <empty>)
WARNING: rejected rule (lines -> <empty>) in state 48
WARNING: reduce/reduce conflict in state 48 resolved using rule (body -> <empty>)
WARNING: rejected rule (function -> <empty>) in state 48
WARNING: reduce/reduce conflict in state 48 resolved using rule (body -> <empty>)
WARNING: rejected rule (cycle -> <empty>) in state 48
WARNING: reduce/reduce conflict in state 48 resolved using rule (body -> <empty>)
WARNING: rejected rule (assign -> <empty>) in state 48
WARNING: reduce/reduce conflict in state 48 resolved using rule (body -> <empty>)
WARNING: rejected rule (expression -> <empty>) in state 48
WARNING: reduce/reduce conflict in state 48 resolved using rule (body -> <empty>)
WARNING: rejected rule (print -> <empty>) in state 48
WARNING: reduce/reduce conflict in state 48 resolved using rule (body -> <empty>)
WARNING: rejected rule (if -> <empty>) in state 48
WARNING: reduce/reduce conflict in state 48 resolved using rule (body -> <empty>)
WARNING: rejected rule (call -> <empty>) in state 48
WARNING: reduce/reduce conflict in state 48 resolved using rule (variables -> <empty>)
WARNING: rejected rule (body -> <empty>) in state 48
WARNING: reduce/reduce conflict in state 48 resolved using rule (body -> <empty>)
WARNING: rejected rule (term -> <empty>) in state 48
WARNING: reduce/reduce conflict in state 48 resolved using rule (body -> <empty>)
WARNING: rejected rule (factor -> <empty>) in state 48
WARNING: reduce/reduce conflict in state 57 resolved using rule (body -> <empty>)
WARNING: rejected rule (lines -> <empty>) in state 57
WARNING: reduce/reduce conflict in state 57 resolved using rule (body -> <empty>)
WARNING: rejected rule (function -> <empty>) in state 57
WARNING: reduce/reduce conflict in state 57 resolved using rule (body -> <empty>)
WARNING: rejected rule (cycle -> <empty>) in state 57
WARNING: reduce/reduce conflict in state 57 resolved using rule (body -> <empty>)
WARNING: rejected rule (assign -> <empty>) in state 57
WARNING: reduce/reduce conflict in state 57 resolved using rule (body -> <empty>)
WARNING: rejected rule (expression -> <empty>) in state 57
WARNING: reduce/reduce conflict in state 57 resolved using rule (body -> <empty>)
WARNING: rejected rule (print -> <empty>) in state 57
WARNING: reduce/reduce conflict in state 57 resolved using rule (body -> <empty>)
WARNING: rejected rule (if -> <empty>) in state 57
WARNING: reduce/reduce conflict in state 57 resolved using rule (body -> <empty>)
WARNING: rejected rule (call -> <empty>) in state 57
WARNING: reduce/reduce conflict in state 57 resolved using rule (variables -> <empty>)
WARNING: rejected rule (body -> <empty>) in state 57
WARNING: reduce/reduce conflict in state 57 resolved using rule (body -> <empty>)
WARNING: rejected rule (term -> <empty>) in state 57
WARNING: reduce/reduce conflict in state 57 resolved using rule (body -> <empty>)
WARNING: rejected rule (factor -> <empty>) in state 57
WARNING: reduce/reduce conflict in state 60 resolved using rule (expression -> <empty>)
WARNING: rejected rule (term -> <empty>) in state 60
WARNING: reduce/reduce conflict in state 60 resolved using rule (expression -> <empty>)
WARNING: rejected rule (factor -> <empty>) in state 60
WARNING: reduce/reduce conflict in state 82 resolved using rule (body -> <empty>)
WARNING: rejected rule (lines -> <empty>) in state 82
WARNING: reduce/reduce conflict in state 82 resolved using rule (body -> <empty>)
WARNING: rejected rule (function -> <empty>) in state 82
WARNING: reduce/reduce conflict in state 82 resolved using rule (body -> <empty>)
WARNING: rejected rule (cycle -> <empty>) in state 82
WARNING: reduce/reduce conflict in state 82 resolved using rule (body -> <empty>)
WARNING: rejected rule (assign -> <empty>) in state 82
WARNING: reduce/reduce conflict in state 82 resolved using rule (body -> <empty>)
WARNING: rejected rule (expression -> <empty>) in state 82
WARNING: reduce/reduce conflict in state 82 resolved using rule (body -> <empty>)
WARNING: rejected rule (print -> <empty>) in state 82
WARNING: reduce/reduce conflict in state 82 resolved using rule (body -> <empty>)
WARNING: rejected rule (if -> <empty>) in state 82
WARNING: reduce/reduce conflict in state 82 resolved using rule (body -> <empty>)
WARNING: rejected rule (call -> <empty>) in state 82
WARNING: reduce/reduce conflict in state 82 resolved using rule (variables -> <empty>)
WARNING: rejected rule (body -> <empty>) in state 82
WARNING: reduce/reduce conflict in state 82 resolved using rule (body -> <empty>)
WARNING: rejected rule (term -> <empty>) in state 82
WARNING: reduce/reduce conflict in state 82 resolved using rule (body -> <empty>)
WARNING: rejected rule (factor -> <empty>) in state 82
WARNING: Rule (function -> <empty>) is never reduced
WARNING: Rule (cycle -> <empty>) is never reduced
WARNING: Rule (assign -> <empty>) is never reduced
WARNING: Rule (print -> <empty>) is never reduced
WARNING: Rule (if -> <empty>) is never reduced
WARNING: Rule (call -> <empty>) is never reduced
