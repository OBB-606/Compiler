Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    NEGATION

Grammar

Rule 0     S' -> var
Rule 1     var -> VAR variable COLON type SEMI_COLON body
Rule 2     type -> INTEGER_TYPE
Rule 3     type -> FLOAT_TYPE
Rule 4     body -> <empty>
Rule 5     body -> body lines colons
Rule 6     body -> BEGIN lines colons END
Rule 7     colons -> SEMI_COLON
Rule 8     colons -> colons SEMI_COLON
Rule 9     lines -> assign
Rule 10    lines -> while
Rule 11    lines -> PRINT args
Rule 12    assign -> VARIABLE EQUAL expr
Rule 13    expr -> fact
Rule 14    expr -> expr SUM fact
Rule 15    expr -> expr MINUS fact
Rule 16    fact -> term
Rule 17    term -> arg
Rule 18    term -> OPEN_PAREN expr CLOSE_PAREN
Rule 19    while -> CYCLE OPEN_PAREN args CLOSE_PAREN BEGIN lines END
Rule 20    args -> <empty>
Rule 21    args -> expr
Rule 22    args -> args COMMA expr
Rule 23    arg -> variable
Rule 24    arg -> FLOAT_DIGIT
Rule 25    arg -> INT_DIGIT
Rule 26    variable -> VARIABLE
Rule 27    variable -> VARIABLE COMMA variable
Rule 28    variable -> <empty>

Terminals, with rules where they appear

BEGIN                : 6 19
CLOSE_PAREN          : 18 19
COLON                : 1
COMMA                : 22 27
CYCLE                : 19
END                  : 6 19
EQUAL                : 12
FLOAT_DIGIT          : 24
FLOAT_TYPE           : 3
INTEGER_TYPE         : 2
INT_DIGIT            : 25
MINUS                : 15
NEGATION             : 
OPEN_PAREN           : 18 19
PRINT                : 11
SEMI_COLON           : 1 7 8
SUM                  : 14
VAR                  : 1
VARIABLE             : 12 26 27
error                : 

Nonterminals, with rules where they appear

arg                  : 17
args                 : 11 19 22
assign               : 9
body                 : 1 5
colons               : 5 6 8
expr                 : 12 14 15 18 21 22
fact                 : 13 14 15
lines                : 5 6 19
term                 : 16
type                 : 1
var                  : 0
variable             : 1 23 27
while                : 10

Parsing method: LALR

state 0

    (0) S' -> . var
    (1) var -> . VAR variable COLON type SEMI_COLON body

    VAR             shift and go to state 2

    var                            shift and go to state 1

state 1

    (0) S' -> var .



state 2

    (1) var -> VAR . variable COLON type SEMI_COLON body
    (26) variable -> . VARIABLE
    (27) variable -> . VARIABLE COMMA variable
    (28) variable -> .

    VARIABLE        shift and go to state 4
    COLON           reduce using rule 28 (variable -> .)

    variable                       shift and go to state 3

state 3

    (1) var -> VAR variable . COLON type SEMI_COLON body

    COLON           shift and go to state 5


state 4

    (26) variable -> VARIABLE .
    (27) variable -> VARIABLE . COMMA variable

  ! shift/reduce conflict for COMMA resolved as shift
    COLON           reduce using rule 26 (variable -> VARIABLE .)
    SUM             reduce using rule 26 (variable -> VARIABLE .)
    MINUS           reduce using rule 26 (variable -> VARIABLE .)
    SEMI_COLON      reduce using rule 26 (variable -> VARIABLE .)
    END             reduce using rule 26 (variable -> VARIABLE .)
    CLOSE_PAREN     reduce using rule 26 (variable -> VARIABLE .)
    COMMA           shift and go to state 6

  ! COMMA           [ reduce using rule 26 (variable -> VARIABLE .) ]


state 5

    (1) var -> VAR variable COLON . type SEMI_COLON body
    (2) type -> . INTEGER_TYPE
    (3) type -> . FLOAT_TYPE

    INTEGER_TYPE    shift and go to state 8
    FLOAT_TYPE      shift and go to state 9

    type                           shift and go to state 7

state 6

    (27) variable -> VARIABLE COMMA . variable
    (26) variable -> . VARIABLE
    (27) variable -> . VARIABLE COMMA variable
    (28) variable -> .

    VARIABLE        shift and go to state 4
    COLON           reduce using rule 28 (variable -> .)
    SUM             reduce using rule 28 (variable -> .)
    MINUS           reduce using rule 28 (variable -> .)
    COMMA           reduce using rule 28 (variable -> .)
    SEMI_COLON      reduce using rule 28 (variable -> .)
    END             reduce using rule 28 (variable -> .)
    CLOSE_PAREN     reduce using rule 28 (variable -> .)

    variable                       shift and go to state 10

state 7

    (1) var -> VAR variable COLON type . SEMI_COLON body

    SEMI_COLON      shift and go to state 11


state 8

    (2) type -> INTEGER_TYPE .

    SEMI_COLON      reduce using rule 2 (type -> INTEGER_TYPE .)


state 9

    (3) type -> FLOAT_TYPE .

    SEMI_COLON      reduce using rule 3 (type -> FLOAT_TYPE .)


state 10

    (27) variable -> VARIABLE COMMA variable .

    COLON           reduce using rule 27 (variable -> VARIABLE COMMA variable .)
    SUM             reduce using rule 27 (variable -> VARIABLE COMMA variable .)
    MINUS           reduce using rule 27 (variable -> VARIABLE COMMA variable .)
    COMMA           reduce using rule 27 (variable -> VARIABLE COMMA variable .)
    SEMI_COLON      reduce using rule 27 (variable -> VARIABLE COMMA variable .)
    END             reduce using rule 27 (variable -> VARIABLE COMMA variable .)
    CLOSE_PAREN     reduce using rule 27 (variable -> VARIABLE COMMA variable .)


state 11

    (1) var -> VAR variable COLON type SEMI_COLON . body
    (4) body -> .
    (5) body -> . body lines colons
    (6) body -> . BEGIN lines colons END

    PRINT           reduce using rule 4 (body -> .)
    VARIABLE        reduce using rule 4 (body -> .)
    CYCLE           reduce using rule 4 (body -> .)
    $end            reduce using rule 4 (body -> .)
    BEGIN           shift and go to state 13

    body                           shift and go to state 12

state 12

    (1) var -> VAR variable COLON type SEMI_COLON body .
    (5) body -> body . lines colons
    (9) lines -> . assign
    (10) lines -> . while
    (11) lines -> . PRINT args
    (12) assign -> . VARIABLE EQUAL expr
    (19) while -> . CYCLE OPEN_PAREN args CLOSE_PAREN BEGIN lines END

    $end            reduce using rule 1 (var -> VAR variable COLON type SEMI_COLON body .)
    PRINT           shift and go to state 17
    VARIABLE        shift and go to state 18
    CYCLE           shift and go to state 19

    lines                          shift and go to state 14
    assign                         shift and go to state 15
    while                          shift and go to state 16

state 13

    (6) body -> BEGIN . lines colons END
    (9) lines -> . assign
    (10) lines -> . while
    (11) lines -> . PRINT args
    (12) assign -> . VARIABLE EQUAL expr
    (19) while -> . CYCLE OPEN_PAREN args CLOSE_PAREN BEGIN lines END

    PRINT           shift and go to state 17
    VARIABLE        shift and go to state 18
    CYCLE           shift and go to state 19

    lines                          shift and go to state 20
    assign                         shift and go to state 15
    while                          shift and go to state 16

state 14

    (5) body -> body lines . colons
    (7) colons -> . SEMI_COLON
    (8) colons -> . colons SEMI_COLON

    SEMI_COLON      shift and go to state 22

    colons                         shift and go to state 21

state 15

    (9) lines -> assign .

    SEMI_COLON      reduce using rule 9 (lines -> assign .)
    END             reduce using rule 9 (lines -> assign .)


state 16

    (10) lines -> while .

    SEMI_COLON      reduce using rule 10 (lines -> while .)
    END             reduce using rule 10 (lines -> while .)


state 17

    (11) lines -> PRINT . args
    (20) args -> .
    (21) args -> . expr
    (22) args -> . args COMMA expr
    (13) expr -> . fact
    (14) expr -> . expr SUM fact
    (15) expr -> . expr MINUS fact
    (16) fact -> . term
    (17) term -> . arg
    (18) term -> . OPEN_PAREN expr CLOSE_PAREN
    (23) arg -> . variable
    (24) arg -> . FLOAT_DIGIT
    (25) arg -> . INT_DIGIT
    (26) variable -> . VARIABLE
    (27) variable -> . VARIABLE COMMA variable
    (28) variable -> .

  ! reduce/reduce conflict for COMMA resolved using rule 20 (args -> .)
  ! reduce/reduce conflict for SEMI_COLON resolved using rule 20 (args -> .)
  ! reduce/reduce conflict for END resolved using rule 20 (args -> .)
    COMMA           reduce using rule 20 (args -> .)
    SEMI_COLON      reduce using rule 20 (args -> .)
    END             reduce using rule 20 (args -> .)
    OPEN_PAREN      shift and go to state 28
    FLOAT_DIGIT     shift and go to state 30
    INT_DIGIT       shift and go to state 31
    VARIABLE        shift and go to state 4
    SUM             reduce using rule 28 (variable -> .)
    MINUS           reduce using rule 28 (variable -> .)

  ! COMMA           [ reduce using rule 28 (variable -> .) ]
  ! SEMI_COLON      [ reduce using rule 28 (variable -> .) ]
  ! END             [ reduce using rule 28 (variable -> .) ]

    args                           shift and go to state 23
    expr                           shift and go to state 24
    fact                           shift and go to state 25
    term                           shift and go to state 26
    arg                            shift and go to state 27
    variable                       shift and go to state 29

state 18

    (12) assign -> VARIABLE . EQUAL expr

    EQUAL           shift and go to state 32


state 19

    (19) while -> CYCLE . OPEN_PAREN args CLOSE_PAREN BEGIN lines END

    OPEN_PAREN      shift and go to state 33


state 20

    (6) body -> BEGIN lines . colons END
    (7) colons -> . SEMI_COLON
    (8) colons -> . colons SEMI_COLON

    SEMI_COLON      shift and go to state 22

    colons                         shift and go to state 34

state 21

    (5) body -> body lines colons .
    (8) colons -> colons . SEMI_COLON

    PRINT           reduce using rule 5 (body -> body lines colons .)
    VARIABLE        reduce using rule 5 (body -> body lines colons .)
    CYCLE           reduce using rule 5 (body -> body lines colons .)
    $end            reduce using rule 5 (body -> body lines colons .)
    SEMI_COLON      shift and go to state 35


state 22

    (7) colons -> SEMI_COLON .

    SEMI_COLON      reduce using rule 7 (colons -> SEMI_COLON .)
    PRINT           reduce using rule 7 (colons -> SEMI_COLON .)
    VARIABLE        reduce using rule 7 (colons -> SEMI_COLON .)
    CYCLE           reduce using rule 7 (colons -> SEMI_COLON .)
    $end            reduce using rule 7 (colons -> SEMI_COLON .)
    END             reduce using rule 7 (colons -> SEMI_COLON .)


state 23

    (11) lines -> PRINT args .
    (22) args -> args . COMMA expr

    SEMI_COLON      reduce using rule 11 (lines -> PRINT args .)
    END             reduce using rule 11 (lines -> PRINT args .)
    COMMA           shift and go to state 36


state 24

    (21) args -> expr .
    (14) expr -> expr . SUM fact
    (15) expr -> expr . MINUS fact

    COMMA           reduce using rule 21 (args -> expr .)
    SEMI_COLON      reduce using rule 21 (args -> expr .)
    END             reduce using rule 21 (args -> expr .)
    CLOSE_PAREN     reduce using rule 21 (args -> expr .)
    SUM             shift and go to state 37
    MINUS           shift and go to state 38


state 25

    (13) expr -> fact .

    SUM             reduce using rule 13 (expr -> fact .)
    MINUS           reduce using rule 13 (expr -> fact .)
    COMMA           reduce using rule 13 (expr -> fact .)
    SEMI_COLON      reduce using rule 13 (expr -> fact .)
    END             reduce using rule 13 (expr -> fact .)
    CLOSE_PAREN     reduce using rule 13 (expr -> fact .)


state 26

    (16) fact -> term .

    SUM             reduce using rule 16 (fact -> term .)
    MINUS           reduce using rule 16 (fact -> term .)
    COMMA           reduce using rule 16 (fact -> term .)
    SEMI_COLON      reduce using rule 16 (fact -> term .)
    END             reduce using rule 16 (fact -> term .)
    CLOSE_PAREN     reduce using rule 16 (fact -> term .)


state 27

    (17) term -> arg .

    SUM             reduce using rule 17 (term -> arg .)
    MINUS           reduce using rule 17 (term -> arg .)
    COMMA           reduce using rule 17 (term -> arg .)
    SEMI_COLON      reduce using rule 17 (term -> arg .)
    END             reduce using rule 17 (term -> arg .)
    CLOSE_PAREN     reduce using rule 17 (term -> arg .)


state 28

    (18) term -> OPEN_PAREN . expr CLOSE_PAREN
    (13) expr -> . fact
    (14) expr -> . expr SUM fact
    (15) expr -> . expr MINUS fact
    (16) fact -> . term
    (17) term -> . arg
    (18) term -> . OPEN_PAREN expr CLOSE_PAREN
    (23) arg -> . variable
    (24) arg -> . FLOAT_DIGIT
    (25) arg -> . INT_DIGIT
    (26) variable -> . VARIABLE
    (27) variable -> . VARIABLE COMMA variable
    (28) variable -> .

    OPEN_PAREN      shift and go to state 28
    FLOAT_DIGIT     shift and go to state 30
    INT_DIGIT       shift and go to state 31
    VARIABLE        shift and go to state 4
    CLOSE_PAREN     reduce using rule 28 (variable -> .)
    SUM             reduce using rule 28 (variable -> .)
    MINUS           reduce using rule 28 (variable -> .)

    expr                           shift and go to state 39
    fact                           shift and go to state 25
    term                           shift and go to state 26
    arg                            shift and go to state 27
    variable                       shift and go to state 29

state 29

    (23) arg -> variable .

    SUM             reduce using rule 23 (arg -> variable .)
    MINUS           reduce using rule 23 (arg -> variable .)
    COMMA           reduce using rule 23 (arg -> variable .)
    SEMI_COLON      reduce using rule 23 (arg -> variable .)
    END             reduce using rule 23 (arg -> variable .)
    CLOSE_PAREN     reduce using rule 23 (arg -> variable .)


state 30

    (24) arg -> FLOAT_DIGIT .

    SUM             reduce using rule 24 (arg -> FLOAT_DIGIT .)
    MINUS           reduce using rule 24 (arg -> FLOAT_DIGIT .)
    COMMA           reduce using rule 24 (arg -> FLOAT_DIGIT .)
    SEMI_COLON      reduce using rule 24 (arg -> FLOAT_DIGIT .)
    END             reduce using rule 24 (arg -> FLOAT_DIGIT .)
    CLOSE_PAREN     reduce using rule 24 (arg -> FLOAT_DIGIT .)


state 31

    (25) arg -> INT_DIGIT .

    SUM             reduce using rule 25 (arg -> INT_DIGIT .)
    MINUS           reduce using rule 25 (arg -> INT_DIGIT .)
    COMMA           reduce using rule 25 (arg -> INT_DIGIT .)
    SEMI_COLON      reduce using rule 25 (arg -> INT_DIGIT .)
    END             reduce using rule 25 (arg -> INT_DIGIT .)
    CLOSE_PAREN     reduce using rule 25 (arg -> INT_DIGIT .)


state 32

    (12) assign -> VARIABLE EQUAL . expr
    (13) expr -> . fact
    (14) expr -> . expr SUM fact
    (15) expr -> . expr MINUS fact
    (16) fact -> . term
    (17) term -> . arg
    (18) term -> . OPEN_PAREN expr CLOSE_PAREN
    (23) arg -> . variable
    (24) arg -> . FLOAT_DIGIT
    (25) arg -> . INT_DIGIT
    (26) variable -> . VARIABLE
    (27) variable -> . VARIABLE COMMA variable
    (28) variable -> .

    OPEN_PAREN      shift and go to state 28
    FLOAT_DIGIT     shift and go to state 30
    INT_DIGIT       shift and go to state 31
    VARIABLE        shift and go to state 4
    SUM             reduce using rule 28 (variable -> .)
    MINUS           reduce using rule 28 (variable -> .)
    SEMI_COLON      reduce using rule 28 (variable -> .)
    END             reduce using rule 28 (variable -> .)

    expr                           shift and go to state 40
    fact                           shift and go to state 25
    term                           shift and go to state 26
    arg                            shift and go to state 27
    variable                       shift and go to state 29

state 33

    (19) while -> CYCLE OPEN_PAREN . args CLOSE_PAREN BEGIN lines END
    (20) args -> .
    (21) args -> . expr
    (22) args -> . args COMMA expr
    (13) expr -> . fact
    (14) expr -> . expr SUM fact
    (15) expr -> . expr MINUS fact
    (16) fact -> . term
    (17) term -> . arg
    (18) term -> . OPEN_PAREN expr CLOSE_PAREN
    (23) arg -> . variable
    (24) arg -> . FLOAT_DIGIT
    (25) arg -> . INT_DIGIT
    (26) variable -> . VARIABLE
    (27) variable -> . VARIABLE COMMA variable
    (28) variable -> .

  ! reduce/reduce conflict for CLOSE_PAREN resolved using rule 20 (args -> .)
  ! reduce/reduce conflict for COMMA resolved using rule 20 (args -> .)
    CLOSE_PAREN     reduce using rule 20 (args -> .)
    COMMA           reduce using rule 20 (args -> .)
    OPEN_PAREN      shift and go to state 28
    FLOAT_DIGIT     shift and go to state 30
    INT_DIGIT       shift and go to state 31
    VARIABLE        shift and go to state 4
    SUM             reduce using rule 28 (variable -> .)
    MINUS           reduce using rule 28 (variable -> .)

  ! CLOSE_PAREN     [ reduce using rule 28 (variable -> .) ]
  ! COMMA           [ reduce using rule 28 (variable -> .) ]

    args                           shift and go to state 41
    expr                           shift and go to state 24
    fact                           shift and go to state 25
    term                           shift and go to state 26
    arg                            shift and go to state 27
    variable                       shift and go to state 29

state 34

    (6) body -> BEGIN lines colons . END
    (8) colons -> colons . SEMI_COLON

    END             shift and go to state 42
    SEMI_COLON      shift and go to state 35


state 35

    (8) colons -> colons SEMI_COLON .

    SEMI_COLON      reduce using rule 8 (colons -> colons SEMI_COLON .)
    PRINT           reduce using rule 8 (colons -> colons SEMI_COLON .)
    VARIABLE        reduce using rule 8 (colons -> colons SEMI_COLON .)
    CYCLE           reduce using rule 8 (colons -> colons SEMI_COLON .)
    $end            reduce using rule 8 (colons -> colons SEMI_COLON .)
    END             reduce using rule 8 (colons -> colons SEMI_COLON .)


state 36

    (22) args -> args COMMA . expr
    (13) expr -> . fact
    (14) expr -> . expr SUM fact
    (15) expr -> . expr MINUS fact
    (16) fact -> . term
    (17) term -> . arg
    (18) term -> . OPEN_PAREN expr CLOSE_PAREN
    (23) arg -> . variable
    (24) arg -> . FLOAT_DIGIT
    (25) arg -> . INT_DIGIT
    (26) variable -> . VARIABLE
    (27) variable -> . VARIABLE COMMA variable
    (28) variable -> .

    OPEN_PAREN      shift and go to state 28
    FLOAT_DIGIT     shift and go to state 30
    INT_DIGIT       shift and go to state 31
    VARIABLE        shift and go to state 4
    SUM             reduce using rule 28 (variable -> .)
    MINUS           reduce using rule 28 (variable -> .)
    COMMA           reduce using rule 28 (variable -> .)
    SEMI_COLON      reduce using rule 28 (variable -> .)
    END             reduce using rule 28 (variable -> .)
    CLOSE_PAREN     reduce using rule 28 (variable -> .)

    expr                           shift and go to state 43
    fact                           shift and go to state 25
    term                           shift and go to state 26
    arg                            shift and go to state 27
    variable                       shift and go to state 29

state 37

    (14) expr -> expr SUM . fact
    (16) fact -> . term
    (17) term -> . arg
    (18) term -> . OPEN_PAREN expr CLOSE_PAREN
    (23) arg -> . variable
    (24) arg -> . FLOAT_DIGIT
    (25) arg -> . INT_DIGIT
    (26) variable -> . VARIABLE
    (27) variable -> . VARIABLE COMMA variable
    (28) variable -> .

    OPEN_PAREN      shift and go to state 28
    FLOAT_DIGIT     shift and go to state 30
    INT_DIGIT       shift and go to state 31
    VARIABLE        shift and go to state 4
    SUM             reduce using rule 28 (variable -> .)
    MINUS           reduce using rule 28 (variable -> .)
    COMMA           reduce using rule 28 (variable -> .)
    SEMI_COLON      reduce using rule 28 (variable -> .)
    END             reduce using rule 28 (variable -> .)
    CLOSE_PAREN     reduce using rule 28 (variable -> .)

    fact                           shift and go to state 44
    term                           shift and go to state 26
    arg                            shift and go to state 27
    variable                       shift and go to state 29

state 38

    (15) expr -> expr MINUS . fact
    (16) fact -> . term
    (17) term -> . arg
    (18) term -> . OPEN_PAREN expr CLOSE_PAREN
    (23) arg -> . variable
    (24) arg -> . FLOAT_DIGIT
    (25) arg -> . INT_DIGIT
    (26) variable -> . VARIABLE
    (27) variable -> . VARIABLE COMMA variable
    (28) variable -> .

    OPEN_PAREN      shift and go to state 28
    FLOAT_DIGIT     shift and go to state 30
    INT_DIGIT       shift and go to state 31
    VARIABLE        shift and go to state 4
    SUM             reduce using rule 28 (variable -> .)
    MINUS           reduce using rule 28 (variable -> .)
    COMMA           reduce using rule 28 (variable -> .)
    SEMI_COLON      reduce using rule 28 (variable -> .)
    END             reduce using rule 28 (variable -> .)
    CLOSE_PAREN     reduce using rule 28 (variable -> .)

    fact                           shift and go to state 45
    term                           shift and go to state 26
    arg                            shift and go to state 27
    variable                       shift and go to state 29

state 39

    (18) term -> OPEN_PAREN expr . CLOSE_PAREN
    (14) expr -> expr . SUM fact
    (15) expr -> expr . MINUS fact

    CLOSE_PAREN     shift and go to state 46
    SUM             shift and go to state 37
    MINUS           shift and go to state 38


state 40

    (12) assign -> VARIABLE EQUAL expr .
    (14) expr -> expr . SUM fact
    (15) expr -> expr . MINUS fact

    SEMI_COLON      reduce using rule 12 (assign -> VARIABLE EQUAL expr .)
    END             reduce using rule 12 (assign -> VARIABLE EQUAL expr .)
    SUM             shift and go to state 37
    MINUS           shift and go to state 38


state 41

    (19) while -> CYCLE OPEN_PAREN args . CLOSE_PAREN BEGIN lines END
    (22) args -> args . COMMA expr

    CLOSE_PAREN     shift and go to state 47
    COMMA           shift and go to state 36


state 42

    (6) body -> BEGIN lines colons END .

    PRINT           reduce using rule 6 (body -> BEGIN lines colons END .)
    VARIABLE        reduce using rule 6 (body -> BEGIN lines colons END .)
    CYCLE           reduce using rule 6 (body -> BEGIN lines colons END .)
    $end            reduce using rule 6 (body -> BEGIN lines colons END .)


state 43

    (22) args -> args COMMA expr .
    (14) expr -> expr . SUM fact
    (15) expr -> expr . MINUS fact

    COMMA           reduce using rule 22 (args -> args COMMA expr .)
    SEMI_COLON      reduce using rule 22 (args -> args COMMA expr .)
    END             reduce using rule 22 (args -> args COMMA expr .)
    CLOSE_PAREN     reduce using rule 22 (args -> args COMMA expr .)
    SUM             shift and go to state 37
    MINUS           shift and go to state 38


state 44

    (14) expr -> expr SUM fact .

    SUM             reduce using rule 14 (expr -> expr SUM fact .)
    MINUS           reduce using rule 14 (expr -> expr SUM fact .)
    COMMA           reduce using rule 14 (expr -> expr SUM fact .)
    SEMI_COLON      reduce using rule 14 (expr -> expr SUM fact .)
    END             reduce using rule 14 (expr -> expr SUM fact .)
    CLOSE_PAREN     reduce using rule 14 (expr -> expr SUM fact .)


state 45

    (15) expr -> expr MINUS fact .

    SUM             reduce using rule 15 (expr -> expr MINUS fact .)
    MINUS           reduce using rule 15 (expr -> expr MINUS fact .)
    COMMA           reduce using rule 15 (expr -> expr MINUS fact .)
    SEMI_COLON      reduce using rule 15 (expr -> expr MINUS fact .)
    END             reduce using rule 15 (expr -> expr MINUS fact .)
    CLOSE_PAREN     reduce using rule 15 (expr -> expr MINUS fact .)


state 46

    (18) term -> OPEN_PAREN expr CLOSE_PAREN .

    SUM             reduce using rule 18 (term -> OPEN_PAREN expr CLOSE_PAREN .)
    MINUS           reduce using rule 18 (term -> OPEN_PAREN expr CLOSE_PAREN .)
    COMMA           reduce using rule 18 (term -> OPEN_PAREN expr CLOSE_PAREN .)
    SEMI_COLON      reduce using rule 18 (term -> OPEN_PAREN expr CLOSE_PAREN .)
    END             reduce using rule 18 (term -> OPEN_PAREN expr CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 18 (term -> OPEN_PAREN expr CLOSE_PAREN .)


state 47

    (19) while -> CYCLE OPEN_PAREN args CLOSE_PAREN . BEGIN lines END

    BEGIN           shift and go to state 48


state 48

    (19) while -> CYCLE OPEN_PAREN args CLOSE_PAREN BEGIN . lines END
    (9) lines -> . assign
    (10) lines -> . while
    (11) lines -> . PRINT args
    (12) assign -> . VARIABLE EQUAL expr
    (19) while -> . CYCLE OPEN_PAREN args CLOSE_PAREN BEGIN lines END

    PRINT           shift and go to state 17
    VARIABLE        shift and go to state 18
    CYCLE           shift and go to state 19

    lines                          shift and go to state 49
    assign                         shift and go to state 15
    while                          shift and go to state 16

state 49

    (19) while -> CYCLE OPEN_PAREN args CLOSE_PAREN BEGIN lines . END

    END             shift and go to state 50


state 50

    (19) while -> CYCLE OPEN_PAREN args CLOSE_PAREN BEGIN lines END .

    SEMI_COLON      reduce using rule 19 (while -> CYCLE OPEN_PAREN args CLOSE_PAREN BEGIN lines END .)
    END             reduce using rule 19 (while -> CYCLE OPEN_PAREN args CLOSE_PAREN BEGIN lines END .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for COMMA in state 4 resolved as shift
WARNING: reduce/reduce conflict in state 17 resolved using rule (args -> <empty>)
WARNING: rejected rule (variable -> <empty>) in state 17
WARNING: reduce/reduce conflict in state 33 resolved using rule (args -> <empty>)
WARNING: rejected rule (variable -> <empty>) in state 33
