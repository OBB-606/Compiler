
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'BEGIN CLOSE_PAREN COLON COMMA CYCLE END EQUAL FLOAT_DIGIT FLOAT_TYPE INTEGER_TYPE INT_DIGIT MINUS NEGATION OPEN_PAREN PRINT SEMI_COLON SUM VAR VARIABLEvar : VAR variable COLON type SEMI_COLON bodytype : INTEGER_TYPE\n            | FLOAT_TYPEbody :\n            | body lines colons\n            | BEGIN lines colons ENDcolons : SEMI_COLON\n              | colons SEMI_COLONlines : assign\n             | while\n             | PRINT argsassign : VARIABLE EQUAL exprexpr : fact\n            | expr SUM fact\n            | expr MINUS factfact : termterm : arg\n            | OPEN_PAREN expr CLOSE_PARENwhile : CYCLE OPEN_PAREN args CLOSE_PAREN BEGIN lines ENDargs :\n            | expr\n            | args COMMA exprarg : variable\n           | FLOAT_DIGIT\n           | INT_DIGITvariable : VARIABLE\n           | VARIABLE COMMA variable\n           |'
    
_lr_action_items = {'VAR':([0,],[2,]),'$end':([1,11,12,21,22,35,42,],[0,-4,-1,-5,-7,-8,-6,]),'VARIABLE':([2,6,11,12,13,17,21,22,28,32,33,35,36,37,38,42,48,],[4,4,-4,18,18,4,-5,-7,4,4,4,-8,4,4,4,-6,18,]),'COLON':([2,3,4,6,10,],[-28,5,-26,-28,-27,]),'SUM':([4,6,10,17,24,25,26,27,28,29,30,31,32,33,36,37,38,39,40,43,44,45,46,],[-26,-28,-27,-28,37,-13,-16,-17,-28,-23,-24,-25,-28,-28,-28,-28,-28,37,37,37,-14,-15,-18,]),'MINUS':([4,6,10,17,24,25,26,27,28,29,30,31,32,33,36,37,38,39,40,43,44,45,46,],[-26,-28,-27,-28,38,-13,-16,-17,-28,-23,-24,-25,-28,-28,-28,-28,-28,38,38,38,-14,-15,-18,]),'COMMA':([4,6,10,17,23,24,25,26,27,29,30,31,33,36,37,38,41,43,44,45,46,],[6,-28,-27,-20,36,-21,-13,-16,-17,-23,-24,-25,-20,-28,-28,-28,36,-22,-14,-15,-18,]),'SEMI_COLON':([4,6,7,8,9,10,14,15,16,17,20,21,22,23,24,25,26,27,29,30,31,32,34,35,36,37,38,40,43,44,45,46,50,],[-26,-28,11,-2,-3,-27,22,-9,-10,-20,22,35,-7,-11,-21,-13,-16,-17,-23,-24,-25,-28,35,-8,-28,-28,-28,-12,-22,-14,-15,-18,-19,]),'END':([4,6,10,15,16,17,22,23,24,25,26,27,29,30,31,32,34,35,36,37,38,40,43,44,45,46,49,50,],[-26,-28,-27,-9,-10,-20,-7,-11,-21,-13,-16,-17,-23,-24,-25,-28,42,-8,-28,-28,-28,-12,-22,-14,-15,-18,50,-19,]),'CLOSE_PAREN':([4,6,10,24,25,26,27,28,29,30,31,33,36,37,38,39,41,43,44,45,46,],[-26,-28,-27,-21,-13,-16,-17,-28,-23,-24,-25,-20,-28,-28,-28,46,47,-22,-14,-15,-18,]),'INTEGER_TYPE':([5,],[8,]),'FLOAT_TYPE':([5,],[9,]),'PRINT':([11,12,13,21,22,35,42,48,],[-4,17,17,-5,-7,-8,-6,17,]),'CYCLE':([11,12,13,21,22,35,42,48,],[-4,19,19,-5,-7,-8,-6,19,]),'BEGIN':([11,47,],[13,48,]),'OPEN_PAREN':([17,19,28,32,33,36,37,38,],[28,33,28,28,28,28,28,28,]),'FLOAT_DIGIT':([17,28,32,33,36,37,38,],[30,30,30,30,30,30,30,]),'INT_DIGIT':([17,28,32,33,36,37,38,],[31,31,31,31,31,31,31,]),'EQUAL':([18,],[32,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'var':([0,],[1,]),'variable':([2,6,17,28,32,33,36,37,38,],[3,10,29,29,29,29,29,29,29,]),'type':([5,],[7,]),'body':([11,],[12,]),'lines':([12,13,48,],[14,20,49,]),'assign':([12,13,48,],[15,15,15,]),'while':([12,13,48,],[16,16,16,]),'colons':([14,20,],[21,34,]),'args':([17,33,],[23,41,]),'expr':([17,28,32,33,36,],[24,39,40,24,43,]),'fact':([17,28,32,33,36,37,38,],[25,25,25,25,25,44,45,]),'term':([17,28,32,33,36,37,38,],[26,26,26,26,26,26,26,]),'arg':([17,28,32,33,36,37,38,],[27,27,27,27,27,27,27,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> var","S'",1,None,None,None),
  ('var -> VAR variable COLON type SEMI_COLON body','var',6,'p_var','parser.py',21),
  ('type -> INTEGER_TYPE','type',1,'p_type','parser.py',24),
  ('type -> FLOAT_TYPE','type',1,'p_type','parser.py',25),
  ('body -> <empty>','body',0,'p_body','parser.py',27),
  ('body -> body lines colons','body',3,'p_body','parser.py',28),
  ('body -> BEGIN lines colons END','body',4,'p_body','parser.py',29),
  ('colons -> SEMI_COLON','colons',1,'p_colons','parser.py',38),
  ('colons -> colons SEMI_COLON','colons',2,'p_colons','parser.py',39),
  ('lines -> assign','lines',1,'p_lines','parser.py',42),
  ('lines -> while','lines',1,'p_lines','parser.py',43),
  ('lines -> PRINT args','lines',2,'p_lines','parser.py',44),
  ('assign -> VARIABLE EQUAL expr','assign',3,'p_assign','parser.py',52),
  ('expr -> fact','expr',1,'p_expr','parser.py',56),
  ('expr -> expr SUM fact','expr',3,'p_expr','parser.py',57),
  ('expr -> expr MINUS fact','expr',3,'p_expr','parser.py',58),
  ('fact -> term','fact',1,'p_fact','parser.py',65),
  ('term -> arg','term',1,'p_term','parser.py',72),
  ('term -> OPEN_PAREN expr CLOSE_PAREN','term',3,'p_term','parser.py',73),
  ('while -> CYCLE OPEN_PAREN args CLOSE_PAREN BEGIN lines END','while',7,'p_while','parser.py',80),
  ('args -> <empty>','args',0,'p_args','parser.py',84),
  ('args -> expr','args',1,'p_args','parser.py',85),
  ('args -> args COMMA expr','args',3,'p_args','parser.py',86),
  ('arg -> variable','arg',1,'p_arg','parser.py',96),
  ('arg -> FLOAT_DIGIT','arg',1,'p_arg','parser.py',97),
  ('arg -> INT_DIGIT','arg',1,'p_arg','parser.py',98),
  ('variable -> VARIABLE','variable',1,'p_variable','parser.py',102),
  ('variable -> VARIABLE COMMA variable','variable',3,'p_variable','parser.py',103),
  ('variable -> <empty>','variable',0,'p_variable','parser.py',104),
]
